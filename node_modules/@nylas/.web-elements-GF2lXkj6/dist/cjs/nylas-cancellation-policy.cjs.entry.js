'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const utils = require('./utils-0e1c4d88.js');
require('./_commonjsHelpers-9463df90.js');

const nylasCancellationPolicyCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-cancellation-policy{display:flex;flex-direction:column;gap:4px}.nylas-cancellation-policy label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-cancellation-policy label span.label-icon{margin-left:4px}.nylas-cancellation-policy label span.label-icon tooltip-component{display:flex}.nylas-cancellation-policy textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.nylas-cancellation-policy textarea::-webkit-resizer{display:none}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasCancellationPolicy = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.cancellationPolicy = undefined;
        this.name = 'cancelation-policy';
        this.message = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-cancellation-policy', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        this.message = newValue?.scheduler?.cancellation_policy || this.cancellationPolicy || '';
    }
    connectedCallback() {
        utils.debug('nylas-cancellation-policy', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-cancellation-policy', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-cancellation-policy', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.message = this.cancellationPolicy || '';
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-cancellation-policy', 'disconnectedCallback');
    }
    handleChange(event) {
        const value = utils.sanitize(event.target.value);
        this.message = value;
        this.internals.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    render() {
        return (index.h(index.Host, { key: '3a6dfd352ec770b8103541bf2145147c84832402' }, index.h("div", { key: '1cfa42ee08f5182fe9e1405ac6c8c56cea1c070e', class: "nylas-cancellation-policy", part: "ncpolicy" }, index.h("label", { key: 'a9867af2834b0a6d417a08c58695b38850d19796', htmlFor: this.name }, "Cancellation policy message", index.h("span", { key: 'c9a6e487bd1cfd0d594aefb7820fc5a29f10c1e5', class: "label-icon" }, index.h("tooltip-component", { key: '653b93c98e586c52ffa0c34d7031370e24836f60' }, index.h("info-icon", { key: '5164bfd6ae87d969e9022edf78a7e9860d8f1aac', slot: "tooltip-icon" }), index.h("span", { key: '3cd23badfe5525228486767147a5db993ce37737', slot: "tooltip-content" }, "Attendees receive this message if trying to cancel the event. Attendees are asked to provide a reason for cancellation.")))), index.h("textarea", { key: '85b6eee5d41437810195739c364a7b1195da928a', id: this.name, part: "ncpolicy__textarea", name: this.name, value: this.message, maxlength: "250", onInput: e => this.handleChange(e) }))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-cancellation-policy',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCancellationPolicy.prototype, "render", null);
NylasCancellationPolicy.style = nylasCancellationPolicyCss;

exports.nylas_cancellation_policy = NylasCancellationPolicy;

//# sourceMappingURL=nylas-cancellation-policy.cjs.entry.js.map