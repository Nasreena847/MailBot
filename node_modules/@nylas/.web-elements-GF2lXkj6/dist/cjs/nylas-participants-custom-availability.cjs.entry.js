'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const utils = require('./utils-0e1c4d88.js');
const constants = require('./constants-c58992fc.js');
require('./_commonjsHelpers-9463df90.js');

const nylasParticipantsCustomAvailabilityCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-participants-custom-availability{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-participants-custom-availability .header{padding:1rem}.nylas-participants-custom-availability .header h3{margin:0;font-size:16px;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-participants-custom-availability .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-participants-custom-availability .content .participant-container{padding-top:8px;border-top:1px solid var(--nylas-base-200)}.nylas-participants-custom-availability .content .participant-container .participant-title{display:flex;justify-content:space-between;align-items:center;padding:4px 16px 12px}.nylas-participants-custom-availability .content .participant-container .participant-title p{margin:0}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle{display:flex;gap:24px;align-items:center}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron:hover,.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron:active{color:var(--nylas-primary)}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron.open{transform:rotate(90deg)}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron.closed{transform:rotate(270deg)}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-participants-custom-availability .content .participant-container .participant-title .participant-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.nylas-participants-custom-availability .content .participant-container nylas-availability-picker::part(nap){margin:0;border:none}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasParticipantsCustomAvailability = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'participant-custom-availability';
        this.participants = this.selectedConfiguration?.participants || [];
        this.selectedParticipants = this.setParticipants(this.participants);
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-participants-custom-availability', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    participantsChangedHandler(newValue, oldValue) {
        utils.debug('nylas-participants-custom-availability', 'participantsChangedHandler', newValue, oldValue);
        this.selectedParticipants = this.setParticipants(newValue);
    }
    selectedConfigurationChangedHandler(newValue, oldValue) {
        utils.debug('nylas-participants-custom-availability', 'selectedConfigurationChangedHandler', newValue, oldValue);
        if (newValue?.participants) {
            this.selectedParticipants = this.setParticipants(newValue?.participants);
        }
    }
    connectedCallback() {
        utils.debug('nylas-participants-custom-availability', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-participants-custom-availability', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-participants-custom-availability', 'componentWillLoad');
    }
    componentDidLoad() {
        utils.debug('nylas-participants-custom-availability', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedParticipants = this.setParticipants(this.selectedConfiguration?.participants);
        }
        else {
            this.selectedParticipants = this.setParticipants(this.participants);
        }
    }
    nylasFormSwitchToggledHandler(event) {
        utils.debug('nylas-participants-custom-availability', 'nylasFormSwitchToggledHandler', event.detail);
        const openHours = this.selectedConfiguration?.participants.find(participant => participant.email === event.detail.name)?.availability?.open_hours || [];
        this.selectedParticipants[event.detail.name]['isOpen'] = event.detail.checked;
        this.selectedParticipants[event.detail.name]['setCustom'] = event.detail.checked;
        this.selectedParticipants[event.detail.name]['openHours'] = event.detail.checked ? (openHours?.length > 0 ? openHours : constants.DEFAULT_OPEN_HOURS) : [];
        this.selectedParticipants = { ...this.selectedParticipants };
        this.updateFormValue();
    }
    handleValueChanged(event) {
        utils.debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('participant-')) {
            return;
        }
        if (!this.participantFormRef.checkValidity()) {
            this.internals.setValidity({ customError: true }, 'Please fix the overlapping time ranges.');
            return;
        }
        else {
            this.internals.setValidity({});
        }
        const jsonValue = JSON.parse(value);
        const key = name.split('-')[2];
        if (!this.selectedParticipants[key])
            return;
        this.selectedParticipants[key]['openHours'] = jsonValue.openHours;
        this.selectedParticipants = { ...this.selectedParticipants };
        this.updateFormValue();
    }
    updateFormValue() {
        const participantOpenHours = {};
        const participants = this.selectedConfiguration?.participants || this.participants;
        participants.forEach(participant => {
            participantOpenHours[participant.email] = this.selectedParticipants[participant.email].openHours;
        });
        this.internals.setFormValue(JSON.stringify(participantOpenHours), this.name);
        this.valueChanged.emit({ value: JSON.stringify(participantOpenHours), name: this.name });
    }
    setParticipants(participants) {
        const selectedParticipants = {};
        participants?.forEach(participant => {
            selectedParticipants[participant.email] = {
                isOpen: false,
                setCustom: !!participant.availability?.open_hours ? true : false,
                openHours: participant.availability?.open_hours || [],
                name: participant.name || participant.email,
                availability: participant.availability,
            };
        });
        return selectedParticipants;
    }
    render() {
        return (index.h(index.Host, { key: '0fcb52a9bf85515bdc30024260451dc16a303cd0' }, index.h("div", { key: '51d1389d4d2102729df48d415424328e12d9b14c', class: "nylas-participants-custom-availability", part: "npca" }, index.h("div", { key: '15ac6b389076142d270ef9b2fd9cad3258850f46', class: "header", part: "npca__header" }, index.h("h3", { key: 'd23c27337b6603b42e686ecd90a362dced00e56a' }, "Participant open hours"), index.h("p", { key: '19371926bd6e02e8e6bc64a0946b67fb3179c247' }, "If not set, Nylas uses the default open hours for this participant.")), index.h("div", { key: '644998a32e12bed450fbab9c45fe00ff62ddf7f0', class: "content", part: "npca__content" }, index.h("form", { key: '7c66c87d7842be37b6fc6f57ff3127a81421cc47', ref: el => (this.participantFormRef = el) }, Object.keys(this.selectedParticipants).map((key, index$1) => {
            const participant = this.selectedParticipants[key];
            if (!participant || !participant.name || !participant.availability)
                return;
            return (index.h("div", { class: "participant-container", part: "npca__participant-container", key: `participant-conatiner-${index$1}` }, index.h("div", { class: "participant-title", part: "npca__participant-title" }, index.h("p", null, participant.name, "'s open hours"), index.h("div", { class: "participant-toggle", part: "npca__participant-toggle--container" }, index.h("toggle-switch", { exportparts: "ts_label: npca__toggle-label, ts_input: npca_toggle-input, ts_slider: npca_toggle-slider", name: key, checked: !!participant?.openHours && participant?.openHours.length > 0 }), index.h("span", { class: `chevron ${participant.isOpen ? 'open' : 'closed'} ${participant.setCustom ? '' : 'disabled'}`, onClick: () => {
                    if (!participant.setCustom)
                        return;
                    this.selectedParticipants[key].isOpen = !participant.isOpen;
                    this.selectedParticipants = { ...this.selectedParticipants };
                } }, index.h("chevron-icon", { width: "24", height: "24" })))), participant.isOpen && (index.h("nylas-availability-picker", { key: index$1, name: `participant-${index$1}-${key}`, openHours: participant.openHours, defaultTimezone: participant.openHours?.[0]?.timezone, hideHeader: true }))));
        }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "participants": ["participantsChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-participants-custom-availability',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasParticipantsCustomAvailability.prototype, "render", null);
NylasParticipantsCustomAvailability.style = nylasParticipantsCustomAvailabilityCss;

exports.nylas_participants_custom_availability = NylasParticipantsCustomAvailability;

//# sourceMappingURL=nylas-participants-custom-availability.cjs.entry.js.map