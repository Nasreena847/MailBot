'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const utils = require('./utils-0e1c4d88.js');
require('./_commonjsHelpers-9463df90.js');

const nylasEventDescriptionCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-description{display:flex;flex-direction:column;gap:4px}.nylas-event-description label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-description label span.label-icon{margin-left:4px}.nylas-event-description label span.label-icon tooltip-component{display:flex}.nylas-event-description textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.nylas-event-description textarea::-webkit-resizer{display:none}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventDescription = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.eventDescription = undefined;
        this.name = 'description';
        this.description = this.eventDescription || this.selectedConfiguration?.event_booking?.description || '';
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-event-description', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        if (newValue?.event_booking?.description) {
            this.description = newValue?.event_booking?.description;
        }
    }
    connectedCallback() {
        utils.debug('nylas-event-description', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-description', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-event-description', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.description = this.eventDescription || '';
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-event-description', 'disconnectedCallback');
    }
    handleChange(event) {
        const value = utils.sanitize(event.target.value);
        this.description = value;
        this.internals.setFormValue(value, 'description');
        this.valueChanged.emit({ value: value, name: this.name });
    }
    render() {
        return (index.h(index.Host, { key: 'dd827d096c15e009592bc75ea7655eb78e7bd989' }, index.h("div", { key: '7ec95b793f18c9088f11d59f25164c46fce00244', class: "nylas-event-description", part: "nedesc" }, index.h("label", { key: '239f510e59de8a3b9195629d10a145e27591e016', htmlFor: "description" }, "Event description", index.h("span", { key: '977f00f43126e12a329d5846bf2839686b428736', class: "label-icon" }, index.h("tooltip-component", { key: 'c81ed9bc47f6726e700c3aef9869c2cc4b7ac5dc' }, index.h("info-icon", { key: 'dbe479dc07441089215d3c09ea3feae3c0151a4c', slot: "tooltip-icon" }), index.h("span", { key: '4bfd20bdfe73ab3ea7d58f70c32aa345f45f9a01', slot: "tooltip-content" }, "The event description appears in the Scheduler Editor\u2019s manager view.")))), index.h("textarea", { key: '37bc370bc7f9f40ee1ac32ac09fc712597356fa1', id: "description", part: "nedesc__textarea", name: "description", value: this.description, maxlength: "8192", onInput: e => this.handleChange(e) }))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-event-description',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventDescription.prototype, "render", null);
NylasEventDescription.style = nylasEventDescriptionCss;

exports.nylas_event_description = NylasEventDescription;

//# sourceMappingURL=nylas-event-description.cjs.entry.js.map