{"file":"nylas-availability-picker.entry.cjs.js","mappings":"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","names":["debug","DEFAULT_OPEN_HOURS","timeToMinutes","convertTo12HourFormat","minutesToTime","convertTo24HourFormat","TIMEZONE_MAP","h","Host","RegisterComponent"],"sources":["src/components/scheduler-editor/nylas-availability-picker/nylas-availability-picker.scss?tag=nylas-availability-picker&encapsulation=shadow","src/components/scheduler-editor/nylas-availability-picker/nylas-availability-picker.tsx"],"sourcesContent":["@import '../../../common/styles/variables.scss';\n\n:host {\n  display: block;\n  @include default-css-variables;\n  width: inherit;\n}\n\n.nylas-availability-picker {\n  width: inherit;\n  display: flex;\n  flex-direction: column;\n  margin: 1rem;\n  border-radius: var(--nylas-border-radius-2x);\n  border: 1px solid var(--nylas-base-200);\n\n  .header {\n    padding: 1rem;\n\n    h3 {\n      margin: 0;\n      font-size: 16px;\n      font-weight: 600;\n      line-height: 20px;\n      color: var(--nylas-base-900);\n      text-align: left;\n    }\n\n    p {\n      margin: 0.25rem 0 0 0;\n      font-size: 0.875rem;\n      font-weight: 400;\n      line-height: 20px;\n      color: var(--nylas-base-600);\n      text-align: left;\n      display: flex;\n      align-items: center;\n      gap: 4px;\n    }\n  }\n\n  .content {\n    padding: 1rem;\n    color: var(--nylas-base-900);\n    font-size: 16px;\n    font-family: var(--nylas-font-family);\n    border-top: 1px solid var(--nylas-base-200);\n\n    @media #{$small-mobile} {\n      font-size: 15px;\n    }\n\n    .select-timezone {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      border-bottom: 1px solid var(--nylas-base-200);\n      padding-bottom: 1rem;\n      gap: 1rem;\n\n      h4 {\n        display: flex;\n        gap: 0.5rem;\n        align-items: center;\n        margin: 0;\n        font-size: 16px;\n\n        @media #{$small-mobile} {\n          font-size: 15px;\n        }\n\n        font-weight: 500;\n        line-height: 20px;\n      }\n    }\n\n    .availability {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n      padding: 0 0.5rem;\n\n      @media #{$small-mobile} {\n        gap: 0.5rem;\n        padding: 0;\n      }\n\n      margin: 1rem 0;\n\n      .availability-day {\n        display: grid;\n        grid-template-columns: minmax(auto, 65px) 1fr minmax(auto, 40px);\n\n        @media #{$mobile} {\n          grid-template-columns: 78px 1fr auto;\n        }\n\n        @media #{$small-mobile} {\n          display: inline-grid;\n          gap: 8px;\n          grid-template-columns: 60px 1fr auto;\n        }\n\n        gap: 1rem;\n        align-items: baseline;\n\n        .day {\n          display: flex;\n          gap: 0.5rem;\n\n          @media #{$small-mobile} {\n            gap: 0.25rem;\n          }\n\n          align-items: center;\n\n          input[type='checkbox'] {\n            transform: scale(1.3);\n          }\n        }\n\n        .time-ranges {\n          span.unavailable {\n            height: 48px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n          }\n\n          .time-range {\n            display: flex;\n            gap: 1.5rem;\n            justify-content: space-between;\n            align-items: baseline;\n\n            @media #{$small-mobile} {\n              justify-content: unset;\n              gap: 0.5rem;\n            }\n\n            .pickers {\n              display: flex;\n              gap: 1rem;\n\n              @media #{$small-mobile} {\n                gap: 0.5rem;\n              }\n\n              span {\n                margin-top: 0.75rem;\n              }\n            }\n\n            &:not(:last-of-type) {\n              margin-bottom: 1rem;\n            }\n          }\n\n          p.error {\n            color: var(--nylas-error);\n          }\n        }\n\n        button {\n          border: none;\n          background: transparent;\n          height: 40px;\n          cursor: pointer;\n          color: var(--nylas-base-800);\n\n          &:hover,\n          &:active {\n            color: var(--nylas-primary);\n          }\n        }\n      }\n    }\n  }\n}\n\nselect-dropdown {\n  width: auto;\n}\n\nselect-dropdown::part(sd_dropdown-button) {\n  justify-content: initial;\n}\n","import { RegisterComponent } from '@/common/register-component';\nimport { NylasSchedulerConfigConnector } from '@/connector/nylas-scheduler-config-connector';\nimport { convertTo12HourFormat, convertTo24HourFormat, debug, minutesToTime, timeToMinutes } from '@/utils/utils';\nimport { AttachInternals, Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasSchedulerEditor } from '../nylas-scheduler-editor/nylas-scheduler-editor';\nimport { DEFAULT_OPEN_HOURS, TIMEZONE_MAP } from '@/common/constants';\nimport { Configuration } from '@nylas/core';\n\nexport type OpenHours = {\n  days: number[];\n  start: string;\n  end: string;\n  timezone: string;\n};\n\nexport type Schedule = {\n  SUN: { start: string; end: string }[];\n  MON: { start: string; end: string }[];\n  TUE: { start: string; end: string }[];\n  WED: { start: string; end: string }[];\n  THU: { start: string; end: string }[];\n  FRI: { start: string; end: string }[];\n  SAT: { start: string; end: string }[];\n};\n\n/**\n * The `nylas-availability-picker` component is a form input for selecting availability (open hours).\n * @part nap__header - The header of the availability picker\n * @part nap__select-timezone - The timezone selection container\n * @part nap__select-timezone-button - The timezone selection button\n * @part nap__select-timezone-dropdown-content - The timezone selection dropdown content\n * @part nap__availability - The availability container\n * @part nap__day - The day container\n * @part nap__time-ranges - The time ranges container\n * @part nap__time-range - The time range container\n * @part nap__add-time-range - The add time range button\n * @part nap__time-picker-container - The time picker container\n * @part nap__time-picker-input - The time picker input\n * @part nap__time-picker-times - The time picker times\n */\n@Component({\n  tag: 'nylas-availability-picker',\n  styleUrl: 'nylas-availability-picker.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class NylasAvailabilityPicker {\n  /**\n   * The element <nylas-availability-picker> itself.\n   */\n  @Element() host!: HTMLNylasAvailabilityPickerElement;\n  /**\n   * The selected configuration.\n   */\n  @Prop() selectedConfiguration?: Configuration;\n  /**\n   * The open hours to display.\n   */\n  @Prop() openHours?: OpenHours[];\n  /**\n   * The name of the availability picker.\n   */\n  @Prop() name: string = 'availability';\n  /*\n   * The default timezone or preset timezone.\n   */\n  @Prop() defaultTimezone: string = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  /**\n   * Hide the header of the availability picker.\n   */\n  @Prop() hideHeader: boolean = false;\n\n  /**\n   * This event is fired when the selected availability / open hours change.\n   * The value is a stringified JSON object with the open hours and timezone.\n    ```\n    {\n      openHours: OpenHours[],\n      timezone: string\n    }\n    ```\n   */\n  @Event() valueChanged!: EventEmitter<{\n    value: string;\n    name: string;\n  }>;\n\n  /**\n   * The element internals.\n   */\n  @AttachInternals() internals!: ElementInternals;\n  @State() schedule = {\n    SUN: [],\n    MON: [{ start: '09:00am', end: '05:00pm' }],\n    TUE: [{ start: '09:00am', end: '05:00pm' }],\n    WED: [{ start: '09:00am', end: '05:00pm' }],\n    THU: [{ start: '09:00am', end: '05:00pm' }],\n    FRI: [{ start: '09:00am', end: '05:00pm' }],\n    SAT: [],\n  };\n  /**\n   * The selected timezone state.\n   */\n  @State() timezone: string = '';\n\n  /**\n   * The overlapping time ranges state. This is used to display an error message when there are overlapping time ranges.\n   */\n  @State() overlapDays: { [key: string]: number[] } = {};\n\n  /**\n   * When a name prop is passed, stencil does not automatically set the name attribute on the host element.\n   * Since this component is form-associated, the name attribute is required for form submission.\n   * This is a workaround to ensure that the name attribute is set on the host element.\n   */\n  @Watch('name')\n  elementNameChangedHandler(newValue: string) {\n    debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);\n    this.host.setAttribute('name', newValue);\n  }\n\n  @Watch('selectedConfiguration')\n  configChangedHandler(newConfig: Configuration) {\n    const defaultOpenHours = newConfig?.availability?.availability_rules?.default_open_hours ?? DEFAULT_OPEN_HOURS;\n    if (this.openHours) {\n      this.openHoursToSchedule(this.openHours);\n    } else if (defaultOpenHours) {\n      this.openHoursToSchedule(defaultOpenHours);\n    }\n  }\n\n  @Watch('schedule')\n  scheduleChanged(newValue: Schedule, oldValue: Schedule) {\n    if (newValue !== oldValue) {\n      let overlapDays: { [key: string]: number[] } = {};\n      Object.keys(newValue).forEach(key => {\n        const dayTimeRanges = newValue[key];\n        if (dayTimeRanges.length > 0) {\n          const overlaps = this.getOverlaps(dayTimeRanges);\n          if (overlaps.length > 0) {\n            overlapDays[key] = overlaps;\n          }\n        }\n      });\n      this.overlapDays = overlapDays;\n      if (typeof this.internals.setFormValue !== 'function') {\n        return;\n      }\n      if (Object.keys(overlapDays).length > 0) {\n        const element = this.host.shadowRoot?.getElementById(Object.keys(overlapDays)[0]) as HTMLInputElement;\n        if (element) {\n          debug('nylas-availability-picker', 'The time ranges are overlapping. Overlap: ', overlapDays);\n          this.internals.setValidity({ customError: true }, 'Overlapping time ranges found', element);\n        }\n      } else {\n        this.internals.setValidity({ customError: false });\n        this.internals.setFormValue(\n          JSON.stringify({\n            openHours: this.scheduleToOpenHours(this.schedule),\n            timezone: this.timezone,\n          }),\n        );\n      }\n      this.valueChanged.emit({\n        value: JSON.stringify({\n          openHours: this.scheduleToOpenHours(newValue),\n          timezone: this.timezone,\n        }),\n        name: this.name,\n      });\n    }\n  }\n\n  @Listen('nylasFormDropdownChanged')\n  nylasFormDropdownChangedHandler(\n    event: CustomEvent<{\n      value: string;\n      name: string;\n    }>,\n  ) {\n    const { name, value } = event.detail;\n    if (name === 'timezone') {\n      this.timezone = value;\n      if (typeof this.internals.setFormValue !== 'function') {\n        return;\n      }\n      const updateValue = {\n        openHours: this.scheduleToOpenHours(this.schedule),\n        timezone: this.timezone,\n      };\n      this.internals.setFormValue(JSON.stringify(updateValue));\n      this.valueChanged.emit({\n        value: JSON.stringify(updateValue),\n        name: this.name,\n      });\n    }\n  }\n\n  connectedCallback() {\n    debug('nylas-availability-picker', 'connectedCallback');\n  }\n\n  disconnectedCallback() {\n    debug('nylas-availability-picker', 'disconnectedCallback');\n  }\n\n  componentWillLoad() {\n    debug('nylas-availability-picker', 'componentWillLoad');\n    this.host.setAttribute('name', this.name);\n  }\n\n  componentDidLoad() {\n    debug('nylas-availability-picker', 'componentDidLoad');\n\n    if (this.selectedConfiguration) {\n      this.configChangedHandler(this.selectedConfiguration);\n    } else {\n      this.timezone = this.defaultTimezone;\n    }\n\n    if (typeof this.internals.setFormValue !== 'function') {\n      return;\n    }\n    const updateValue = {\n      openHours: this.scheduleToOpenHours(this.schedule),\n      timezone: this.timezone,\n    };\n    this.internals.setFormValue(JSON.stringify(updateValue));\n    this.valueChanged.emit({\n      value: JSON.stringify(updateValue),\n      name: this.name,\n    });\n  }\n\n  getOverlaps(timeRanges) {\n    // Convert times to minutes and add to the array\n    let timeRangesInMinutes = timeRanges.map((range, index) => ({\n      start: timeToMinutes(range.start),\n      end: timeToMinutes(range.end),\n      originalIndex: index,\n    }));\n\n    // Sort by start time\n    timeRangesInMinutes.sort((a, b) => a.start - b.start);\n    let overlaps: number[] = [];\n    // Check for overlap\n    for (let i = 1; i < timeRangesInMinutes.length; i++) {\n      if (timeRangesInMinutes[i].start < timeRangesInMinutes[i - 1].end) {\n        // Add both overlapping time range indices if they are not already included\n        if (!overlaps.includes(timeRangesInMinutes[i].originalIndex)) {\n          overlaps.push(timeRangesInMinutes[i].originalIndex);\n        }\n        if (!overlaps.includes(timeRangesInMinutes[i - 1].originalIndex)) {\n          overlaps.push(timeRangesInMinutes[i - 1].originalIndex);\n        }\n      }\n    }\n    return overlaps.sort((a, b) => a - b); // Return sorted list of indices\n  }\n\n  addTimeRange(day) {\n    const currentTimeRanges = this.schedule[day];\n\n    // Default working hours are from 00:00 to 23:45 for calculation purposes\n    const dayStart = 0; // Start of the day in minutes (00:00)\n    const dayEnd = 1425; // End of the day in minutes (23:45)\n\n    if (currentTimeRanges.length === 0) {\n      // If there are no existing time ranges, add one at the start of the day\n      this.schedule[day] = [{ start: '09:00am', end: '05:00pm' }]; // Example range\n    } else {\n      // Convert all time ranges to minutes for comparison\n      const timeRangesInMinutes = currentTimeRanges\n        .map(range => ({\n          start: timeToMinutes(range.start),\n          end: timeToMinutes(range.end),\n        }))\n        .sort((a, b) => a.start - b.start); // Sort by start time\n\n      // Attempt to add a new time range at the end of the day\n      const lastRangeEnd = timeRangesInMinutes[timeRangesInMinutes.length - 1].end;\n      if (lastRangeEnd + 60 <= dayEnd) {\n        // There's room at the end of the day\n        this.schedule[day].push({\n          start: convertTo12HourFormat(minutesToTime(lastRangeEnd)),\n          end: convertTo12HourFormat(minutesToTime(lastRangeEnd + 60)),\n        });\n      } else {\n        // No room at the end, look for gaps at the beginning of the day\n        let gapFound = false;\n        if (timeRangesInMinutes[0].start > dayStart + 60) {\n          // There's room for at least a 1-hour meeting at the beginning of the day\n          this.schedule[day].push({\n            start: convertTo12HourFormat(minutesToTime(dayStart)),\n            end: convertTo12HourFormat(minutesToTime(dayStart + 60)),\n          });\n          gapFound = true;\n        }\n\n        if (!gapFound) {\n          // Search for gaps between scheduled time ranges\n          for (let i = 0; i < timeRangesInMinutes.length - 1; i++) {\n            const currentEnd = timeRangesInMinutes[i].end;\n            const nextStart = timeRangesInMinutes[i + 1].start;\n\n            if (nextStart - currentEnd >= 60) {\n              // Found a gap\n              this.schedule[day].push({\n                start: convertTo12HourFormat(minutesToTime(currentEnd)),\n                end: convertTo12HourFormat(minutesToTime(currentEnd + 60)),\n              });\n              break; // Exit the loop after adding a time range\n            }\n          }\n        }\n      }\n    }\n\n    // Sort the updated schedule to maintain order\n    this.schedule[day].sort((a, b) => timeToMinutes(a.start) - timeToMinutes(b.start));\n\n    this.schedule = { ...this.schedule };\n  }\n\n  removeTimeRange(day, index) {\n    this.schedule[day].splice(index, 1);\n    this.schedule = { ...this.schedule };\n  }\n\n  @Listen('timeChange')\n  setTime(event: CustomEvent<{ key: string; value: string }>) {\n    const { key, value } = event.detail;\n    const [dayIndex, timeType] = key.split('_');\n    const [day, index] = dayIndex.split(':');\n\n    if (timeType === 'start') {\n      this.schedule[day][index].start = value;\n    } else if (timeType === 'end') {\n      this.schedule[day][index].end = value;\n    }\n    this.internals.setValidity({ customError: false });\n    this.schedule = { ...this.schedule };\n  }\n\n  @Listen('formError')\n  setFormError(event: CustomEvent<{ key: string; message: string }>) {\n    const { key } = event.detail;\n    const [_, timeType] = key.split('_');\n    const element = this.host.shadowRoot?.getElementById(key);\n    if (element) {\n      this.internals.setValidity({ customError: true }, `Invalid ${timeType} time`, element as HTMLInputElement);\n    }\n  }\n\n  openHoursToSchedule(openHours: OpenHours[]) {\n    const newSchedule = {\n      SUN: [],\n      MON: [],\n      TUE: [],\n      WED: [],\n      THU: [],\n      FRI: [],\n      SAT: [],\n    };\n    openHours.forEach(openHour => {\n      openHour.days.forEach(day => {\n        const dayKey = this.getDayKey(day);\n        const start12hr = convertTo12HourFormat(openHour.start);\n        const end12hr = convertTo12HourFormat(openHour.end);\n        const timeRange = { start: start12hr, end: end12hr };\n\n        // Check if the time range already exists for the day\n        let timeRangeExists = false;\n        if (newSchedule[dayKey]) {\n          // Search for an existing time range that matches the current one\n          timeRangeExists = newSchedule[dayKey].some(range => range.start === timeRange.start && range.end === timeRange.end);\n        }\n\n        if (!timeRangeExists) {\n          if (newSchedule[dayKey]) {\n            newSchedule[dayKey].push(timeRange);\n          } else {\n            newSchedule[dayKey] = [timeRange];\n          }\n        }\n      });\n    });\n    this.timezone = openHours[0]?.timezone ?? this.defaultTimezone;\n    this.schedule = newSchedule;\n  }\n\n  getDayKey(dayIndex: number): string {\n    const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n    return days[dayIndex];\n  }\n\n  scheduleToOpenHours(schedule: Schedule): OpenHours[] {\n    const dayKeys = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n    let openHoursMap: Map<string, { days: number[]; start: string; end: string }> = new Map();\n\n    dayKeys.forEach((dayKey, index) => {\n      if (schedule[dayKey]) {\n        // Check if schedule for the day exists\n        schedule[dayKey].forEach(timeRange => {\n          const start24hr = convertTo24HourFormat(timeRange.start);\n          const end24hr = convertTo24HourFormat(timeRange.end);\n          const key = `${start24hr}-${end24hr}`;\n\n          if (!openHoursMap.has(key)) {\n            openHoursMap.set(key, { days: [index], start: start24hr, end: end24hr });\n          } else {\n            let entry = openHoursMap.get(key);\n            if (entry) {\n              entry.days.push(index);\n              openHoursMap.set(key, entry);\n            }\n          }\n        });\n      }\n    });\n\n    let selectedOpenHours: OpenHours[] = [];\n    openHoursMap.forEach((value, _key) => {\n      selectedOpenHours.push({\n        days: value.days,\n        start: value.start,\n        end: value.end,\n        timezone: this.timezone,\n      });\n    });\n\n    return selectedOpenHours;\n  }\n\n  @RegisterComponent<NylasAvailabilityPicker, NylasSchedulerConfigConnector, Exclude<NylasSchedulerEditor['stores'], undefined>>({\n    name: 'nylas-availability-picker',\n    stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),\n    fireRegisterEvent: true,\n  })\n  render() {\n    const timezoneOptions = Object.keys(TIMEZONE_MAP).map(key => ({\n      label: TIMEZONE_MAP[key],\n      value: key,\n    }));\n    const selectedTimezoneOption = timezoneOptions.find(i => i.value === this.timezone);\n\n    return (\n      <Host>\n        <div class=\"nylas-availability-picker\" part=\"nap\">\n          {!this.hideHeader && (\n            <div class=\"header\" part=\"nap__header\">\n              <h3>Default open hours</h3>\n              <p>\n                Set when you're regularly available for event bookings.\n                <tooltip-component>\n                  <info-icon slot=\"tooltip-icon\" />\n                  <span slot=\"tooltip-content\">This is the default availability for participants who don’t have availability set on the Participants tab.</span>\n                </tooltip-component>\n              </p>\n            </div>\n          )}\n          <div class=\"content\">\n            <div class=\"select-timezone\" part=\"nap__select-timezone\">\n              <h4 class=\"sub-header\">Select timezone</h4>\n              {selectedTimezoneOption?.label && (\n                <select-dropdown\n                  name=\"timezone\"\n                  exportparts=\"sd_dropdown: nap__timezone-container, sd_dropdown-button: nap__timezone-button, sd_dropdown-content: nap__timezone-dropdown-content\"\n                  options={timezoneOptions}\n                  defaultSelectedOption={selectedTimezoneOption}\n                >\n                  <span slot=\"select-icon\">\n                    <globe-icon width=\"20\" height=\"20\" />\n                  </span>\n                </select-dropdown>\n              )}\n            </div>\n            <div class=\"availability\" part=\"nap__availability\">\n              {Object.keys(this.schedule).map(key => {\n                const day = key;\n                const timeRanges = this.schedule[key] as { start: string; end: string }[];\n                return (\n                  <div class=\"availability-day\">\n                    <div class=\"day\" part=\"nap__day\">\n                      <input\n                        type=\"checkbox\"\n                        name={day}\n                        id={day}\n                        checked={timeRanges.length > 0}\n                        onClick={() => {\n                          if (timeRanges.length > 0) {\n                            this.schedule[day] = [];\n                          } else {\n                            this.schedule[day] = [{ start: '09:00am', end: '05:00pm' }];\n                          }\n                          this.schedule = { ...this.schedule };\n                        }}\n                      />\n                      <label htmlFor={day} aria-label=\"Select day\">\n                        {day}\n                      </label>\n                    </div>\n                    <div class=\"time-ranges\" part=\"nap__time-ranges\">\n                      {timeRanges.length ? null : <span class=\"unavailable\">Unavailable</span>}\n                      {timeRanges.length > 0 &&\n                        timeRanges.map((timeRange, timeRangeIndex) => {\n                          const startKey = `${key}:${timeRangeIndex}_start`;\n                          const endKey = `${key}:${timeRangeIndex}_end`;\n                          return (\n                            <div class=\"time-range\" part=\"nap__time-range\">\n                              <div class=\"pickers\">\n                                <nylas-time-window-picker\n                                  id={startKey}\n                                  hasError={this.overlapDays[day]?.includes(timeRangeIndex)}\n                                  time={timeRange.start}\n                                  name={startKey}\n                                  key={startKey}\n                                  exportparts=\"time-picker: nap__time-picker-container, time-input: nap__time-picker-input, times: nap__time-picker-times\"\n                                />\n                                <span> - </span>\n                                <nylas-time-window-picker\n                                  id={endKey}\n                                  hasError={this.overlapDays[day]?.includes(timeRangeIndex)}\n                                  time={timeRange.end}\n                                  name={endKey}\n                                  key={endKey}\n                                  minimumStartTime={timeRange.start}\n                                  exportparts=\"time-picker: nap__time-picker-container, time-input: nap__time-picker-input, times: nap__time-picker-times\"\n                                />\n                              </div>\n                              <button onClick={() => this.removeTimeRange(day, timeRangeIndex)}>\n                                <close-icon />\n                              </button>\n                            </div>\n                          );\n                        })}\n                      <p class=\"error\">{this.overlapDays[day] ? 'Overlapping time ranges' : ''}</p>\n                    </div>\n                    <div>\n                      {timeRanges.length > 0 ? (\n                        <button onClick={() => this.addTimeRange(day)} part=\"nap__add-time-range\">\n                          <add-circle-icon />\n                        </button>\n                      ) : null}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}