'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const utils = require('./utils-0e1c4d88.js');
require('./_commonjsHelpers-9463df90.js');

const nylasBookingCalendarPickerCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-booking-calendar-picker{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-booking-calendar-picker .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-booking-calendar-picker .header h3{margin:0;font-size:1rem;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-booking-calendar-picker .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left;display:flex;align-items:center;gap:4px}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__loading{padding-bottom:1rem;display:flex;flex-direction:column;gap:4px}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__loading .label{display:flex;align-items:center;gap:0.5rem;margin:1rem 1rem 0;color:var(--nylas-base-800)}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__loading .loading-button{margin:0 1rem;padding:0;width:inherit;height:48px;color:black;font-size:1rem;cursor:not-allowed;display:flex;gap:0.5rem;justify-content:space-between;align-items:center;background:transparent;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__loading .loading-button span{padding:0 1rem}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown{padding:1rem;display:flex;flex-direction:column;gap:4px}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown span.label{display:flex;align-items:center;gap:4px;color:var(--nylas-base-800)}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown span.label tooltip-component{display:flex}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.nylas-booking-calendar-picker .nylas-booking-calendar-picker__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookingCalendarPicker = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.calendars = undefined;
        this.currentUser = undefined;
        this.currentUserCalendars = undefined;
        this.name = 'booking-calendar';
        this.defaultBookingCalendar = '';
        this.hideHeader = false;
        this.selectedCalendar = '';
    }
    connectedCallback() {
        utils.debug('nylas-booking-calendar-picker', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-booking-calendar-picker', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-booking-calendar-picker', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-booking-calendar-picker', 'componentDidLoad');
        this.defaultBookingCalendar = this.defaultBookingCalendar || this.currentUser?.email || '';
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(this.defaultBookingCalendar.toString(), this.name);
        }
        this.selectedCalendar = this.defaultBookingCalendar || this.currentUser?.email || '';
        this.valueChanged.emit({ value: this.selectedCalendar, name: this.name });
    }
    componentWillUpdate() {
        utils.debug('nylas-booking-calendar-picker', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-booking-calendar-picker', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-booking-calendar-picker', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-booking-calendar-picker', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-booking-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    currentUserCalendarsChangedHandler(newValue) {
        utils.debug('nylas-booking-calendar-picker', 'currentUserCalendarsChangedHandler', newValue);
        this.currentUserCalendars = newValue;
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-booking-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        const valueChanged = (event) => {
            const { value } = event.detail;
            this.selectedCalendar = value;
            this.internals.setFormValue(value.toString(), this.name);
        };
        this.valueChanged.emit({ value: event.detail.value, name: this.name, valueChanged });
    }
    render() {
        const currentUserCalendarOptions = this.currentUserCalendars?.map(calendar => {
            return {
                value: calendar.id,
                label: calendar.name,
            };
        }) ?? [];
        const optionsFromCalendars = this.calendars?.map(calendar => {
            return {
                value: calendar.id,
                label: calendar.name,
            };
        }) ?? [];
        const calendarOptions = optionsFromCalendars?.length > 0 ? optionsFromCalendars : currentUserCalendarOptions || [];
        return (index.h(index.Host, null, index.h("div", { class: "nylas-booking-calendar-picker", part: "nbcp" }, !this.hideHeader && (index.h("div", { class: "header", part: "nbcp__header" }, index.h("h3", null, "Calendar booking"), index.h("p", null, "Select the calendar where you want to add event bookings.", index.h("tooltip-component", null, index.h("info-icon", { slot: "tooltip-icon" }), index.h("span", { slot: "tooltip-content" }, "The calendar will be used to create events."))))), calendarOptions.length > 0 ? (index.h("div", { class: "nylas-booking-calendar-picker__dropdown" }, index.h("select-dropdown", { name: "booking-calendar", options: calendarOptions, withSearch: false, exportparts: "sd_dropdown: nbcp__dropdown, sd_dropdown-button: nbcp__dropdown-button, sd_dropdown-content: nbcp__dropdown-content", defaultSelectedOption: calendarOptions.find(cal => cal.value == this.defaultBookingCalendar) ?? calendarOptions[0] }))) : (index.h("div", { class: "nylas-booking-calendar-picker__loading" }, index.h("span", { class: "label" }, "Select a calendar to book meetings on ", index.h("info-icon", null)), index.h("div", { class: "loading-button" }, index.h("span", null, "Loading...")))))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "currentUserCalendars": ["currentUserCalendarsChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-booking-calendar-picker',
        stateToProps: new Map([
            ['schedulerConfig.calendars', 'currentUserCalendars'],
            ['schedulerConfig.currentUser', 'currentUser'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingCalendarPicker.prototype, "render", null);
NylasBookingCalendarPicker.style = nylasBookingCalendarPickerCss;

exports.nylas_booking_calendar_picker = NylasBookingCalendarPicker;

//# sourceMappingURL=nylas-booking-calendar-picker.cjs.entry.js.map