'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const utils = require('./utils-0e1c4d88.js');
require('./_commonjsHelpers-9463df90.js');

const nylasPageStylingCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-page-styling{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);text-align:left}.nylas-page-styling.no-border{border:none}.nylas-page-styling .header{padding:1rem;display:grid;grid-template-columns:1fr auto;border-bottom:1px solid var(--nylas-base-200)}.nylas-page-styling .header h3{border-radius:var(--nylas-border-radius-2x);margin:0;font-size:1rem;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-page-styling .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.nylas-page-styling .header .drawer-toggle{display:flex;gap:24px;align-items:center}.nylas-page-styling .header .drawer-toggle .chevron{display:flex;align-self:center;cursor:pointer}.nylas-page-styling .header .drawer-toggle .chevron:hover,.nylas-page-styling .header .drawer-toggle .chevron:active{color:var(--nylas-primary)}.nylas-page-styling .header .drawer-toggle .chevron.open{transform:rotate(90deg)}.nylas-page-styling .header .drawer-toggle .chevron.closed{transform:rotate(270deg)}.nylas-page-styling .header .drawer-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.nylas-page-styling .header .drawer-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.nylas-page-styling .nylas-page-styling__body{display:grid;grid-template-columns:1fr auto;background-color:var(--nylas-base-25);border-radius:0 0 var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.nylas-page-styling .nylas-page-styling__body{grid-template-columns:1fr}}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section{padding:1rem;display:flex;flex-direction:column;gap:1rem;color:var(--nylas-base-800)}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section.no-padding{padding:0}@media screen and (max-width: 768px){.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section{border:none}}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row{display:grid;grid-template-columns:1fr;align-items:center}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row label{display:flex;align-items:center}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row label span.required{color:var(--nylas-error, #cc4841)}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row label span.label-icon{margin-left:4px}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row label span.label-icon tooltip-component{display:flex}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row p{margin:0.25rem 0 0 0;font-size:1rem;font-weight:500;line-height:24px;color:var(--nylas-base-900)}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection{display:flex;flex-direction:column;gap:1rem}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection.hide{display:none}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection h3{margin:0;font-size:1rem;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection .input-container,.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection>*{display:flex;flex-direction:column;column-gap:2rem;row-gap:0.25rem;width:100%;flex:1}.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection .input-container textarea,.nylas-page-styling .nylas-page-styling__body .nylas-page-styling__section .nylas-page-styling__row .subsection>* textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.nylas-page-styling .nylas-page-styling__body span.error-message{color:var(--nylas-error)}.nylas-page-styling .nylas-page-styling__body span.help-text{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasPageStyling = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        this.bookingFormSubmitted = index.createEvent(this, "bookingFormSubmitted", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.appearance = undefined;
        this.isOpen = true;
        this.name = 'page-styling';
        this.currentAppearance = undefined;
        this.customInputsSlot = null;
    }
    connectedCallback() {
        utils.debug('nylas-page-styling', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-page-styling', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-page-styling', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-page-styling', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
    }
    componentWillUpdate() {
        utils.debug('nylas-page-styling', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-page-styling', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-page-styling', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-page-styling', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-page-styling', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    customInputsSlotChangedHandler(newValue) {
        utils.debug('nylas-page-styling', 'customInputsSlotChangedHandler', newValue);
        const appearance = this.currentAppearance;
        function updateInputDefaultValues(element) {
            if (element.hasAttribute && element.hasAttribute('name')) {
                const key = element.getAttribute('name');
                if (appearance && key && key in appearance && appearance[key] !== undefined) {
                    const componentType = element.getAttribute('component-type');
                    element.setAttribute('data-page-styling', 'true');
                    if (componentType === 'checkbox') {
                        element.setAttribute('checked', appearance[key]);
                    }
                    else if (componentType === 'radio-group') {
                        element.setAttribute('default-selected-value', appearance[key]);
                    }
                    else if (componentType === 'color-picker') {
                        element.setAttribute('default-selected-color', appearance[key]);
                    }
                    else if (componentType === 'select-dropdown') {
                        const options = element.getAttribute('options');
                        const selectedOption = options ? JSON.parse(options).find((option) => option.value === appearance[key]) : null;
                        element.setAttribute('default-selected-option', JSON.stringify(selectedOption));
                    }
                    else if (componentType === 'image-url') {
                        element.setAttribute('image-url', appearance[key]);
                    }
                    else {
                        element.setAttribute('default-value', appearance[key]);
                    }
                }
            }
            element.childNodes.forEach(child => {
                if (child.nodeType === Node.ELEMENT_NODE) {
                    updateInputDefaultValues(child);
                }
            });
        }
        if (newValue) {
            updateInputDefaultValues(newValue);
        }
    }
    cloneAndCopyProps(element) {
        const clonedElement = element.cloneNode(false);
        const componentType = element.getAttribute('component-type');
        const key = element.getAttribute('name');
        if (element.options) {
            const options = element.getAttribute('options');
            console.log('page-styling options', element, options);
            if (typeof options === 'string') {
                try {
                    const parsedOptions = JSON.parse(options);
                    clonedElement.options = parsedOptions;
                    if (componentType === 'select-dropdown' && key && key in this.currentAppearance) {
                        const selectedOption = parsedOptions.find((option) => option.value === this.currentAppearance[key]);
                        clonedElement.setAttribute('default-selected-option', JSON.stringify(selectedOption));
                    }
                }
                catch (e) {
                    console.error('Error parsing options', e);
                }
            }
            else {
                clonedElement.options = element.options;
            }
        }
        if (element.value) {
            clonedElement.value = element.value;
        }
        element.childNodes.forEach(child => {
            if (child.nodeType === Node.ELEMENT_NODE) {
                const clonedChild = this.cloneAndCopyProps(child);
                clonedElement.appendChild(clonedChild);
            }
            else if (child.nodeType === Node.TEXT_NODE) {
                clonedElement.appendChild(child.cloneNode(true));
            }
        });
        return clonedElement;
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-page-styling', 'selectedConfigurationChangedHandler', newValue);
        this.currentAppearance = newValue?.appearance || {};
        const editor = document.querySelector('nylas-scheduler-editor');
        const slotElement = editor?.shadowRoot?.querySelector('slot[name="custom-page-style-inputs"]');
        if (!slotElement) {
            return;
        }
        const divElement = document.createElement('div');
        const slottedElements = slotElement?.assignedElements({ flatten: true });
        slottedElements?.forEach(element => {
            const clonedElement = this.cloneAndCopyProps(element);
            this.customInputsSlotChangedHandler(clonedElement);
            divElement.appendChild(clonedElement);
        });
        const bodyElement = this.host.shadowRoot?.querySelector('.nylas-page-styling');
        const slotContainer = bodyElement?.querySelector('.nylas-page-styling__body .subsection');
        if (slotContainer) {
            slotContainer.innerHTML = '';
            divElement.childNodes.forEach(child => {
                slotContainer.appendChild(child);
            });
            this.customInputsSlot = divElement;
        }
    }
    checkIfElementIsInSlot(name) {
        const findElement = document?.querySelector(`[slot="custom-page-style-inputs"] [name="${name}"]`);
        return findElement ? true : false;
    }
    async nylasFormInputChangeHandler(event) {
        const { name, value } = event.detail;
        const type = event.detail?.type;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        switch (name) {
            case 'submit_button_label':
                this.currentAppearance = { ...this.currentAppearance, submit_button_label: value };
                break;
            case 'thank_you_message':
                if (type === 'multi_line_text') {
                    const value = utils.sanitize(event.detail.value);
                    this.currentAppearance = { ...this.currentAppearance, thank_you_message: value };
                }
                break;
            default:
                this.currentAppearance = { ...this.currentAppearance, [name]: value };
                break;
        }
        this.updateConfirmationFormValue();
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-page-styling', 'nylasFormDropdownChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        if (name === 'color') {
            this.currentAppearance = { ...this.currentAppearance, color: value };
        }
        else {
            this.currentAppearance = { ...this.currentAppearance, [name]: value };
        }
        this.updateConfirmationFormValue();
    }
    valueChangedHandler(event) {
        utils.debug('nylas-page-styling', 'valueChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        if (name === 'company_logo_url') {
            this.currentAppearance = { ...this.currentAppearance, company_logo_url: value };
        }
        else {
            this.currentAppearance = { ...this.currentAppearance, [name]: value };
        }
        this.updateConfirmationFormValue();
    }
    checkboxToggledHandler(event) {
        const { checked, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        this.currentAppearance = { ...this.currentAppearance, [name]: checked };
        this.updateConfirmationFormValue();
    }
    radioChangedHandler(event) {
        const { value, name } = event.detail;
        if (!this.checkIfElementIsInSlot(name)) {
            return;
        }
        this.currentAppearance = { ...this.currentAppearance, [name]: value };
        this.updateConfirmationFormValue();
    }
    updateConfirmationFormValue() {
        utils.debug('nylas-page-styling', 'updateConfirmationFormValue');
        this.internals.setFormValue(JSON.stringify(this.currentAppearance), this.name);
        this.valueChanged.emit({ value: JSON.stringify(this.currentAppearance), name: this.name });
    }
    toggleConfirmationEmail() {
        this.isOpen = !this.isOpen;
    }
    render() {
        return (index.h(index.Host, { key: '9fc827eaf05a8723a8c4cea5daf1ca6aaba356b5' }, index.h("div", { key: '42d6a0588ce76cfcc533aeafeccf061dc762357f', part: "nps", class: { 'nylas-page-styling': true, 'no-border': !this.customInputsSlot } }, this.customInputsSlot ? (index.h("div", { class: "header", part: "nps__header" }, index.h("div", null, index.h("h3", null, "Page styling and customization")), index.h("div", { class: "drawer-toggle", part: "nps__drawer-toggle--container" }, index.h("span", { class: `chevron ${this.isOpen ? 'open' : 'closed'} `, onClick: () => this.toggleConfirmationEmail() }, index.h("chevron-icon", { width: "24", height: "24" }))))) : null, index.h("div", { key: 'e04581fd5a7b1edc93d35daec2128653ffd694ff', id: "nylas-page-styling__body", class: "nylas-page-styling__body", part: "nps__body" }, index.h("div", { key: '629680dc636164be6179f9f7d4f9d31ab105f703', class: { 'nylas-page-styling__section': true, 'no-padding': !this.customInputsSlot } }, index.h("div", { key: 'bc4b9c675db086a43db544127e70b8e36b093894', class: "nylas-page-styling__row" }, index.h("div", { key: '778239dd0d8b0effdea6a10d447fc60a2fc698f0', class: { subsection: true, hide: !this.isOpen } })))))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-page-styling',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasPageStyling.prototype, "render", null);
NylasPageStyling.style = nylasPageStylingCss;

exports.nylas_page_styling = NylasPageStyling;

//# sourceMappingURL=nylas-page-styling.cjs.entry.js.map