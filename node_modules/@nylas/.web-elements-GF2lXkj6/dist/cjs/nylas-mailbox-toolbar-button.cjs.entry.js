'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const utils = require('./utils-0e1c4d88.js');
require('./_commonjsHelpers-9463df90.js');

const nylasMailboxToolbarButtonCss = ":host{display:block}sp-button{border-radius:var(--nylas-border-radius);background-color:var(--nylas-color-primary-400);color:var(--nylas-color-primary-900);fill:var(--nylas-color-primary-900)}sp-button:hover{background-color:var(--nylas-color-primary-500)}sp-button:disabled{background-color:var(--nylas-color-primary-200);color:var(--nylas-color-primary-600);cursor:not-allowed}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasMailboxToolbarButton = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.onClick = async () => {
            const method = this.method;
            utils.debug(`[nylas-mailbox-toolbar-button] onClick`, { method, mailboxConnector: this.mailboxConnector });
            if (this.mailboxConnector && method) {
                const methodToCall = this.callMethod(this.mailboxConnector, method);
                if (methodToCall) {
                    await methodToCall();
                }
            }
        };
        this.method = undefined;
        this.dataState = undefined;
        this.iconOnly = false;
        this.mailboxConnector = undefined;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        utils.debug(`[nylas-if-state] Component will load`);
    }
    async componentDidLoad() {
        utils.debug(`[nylas-if-state] Component did load`);
    }
    callMethod(obj, accessString) {
        const parts = accessString.split('.');
        let current = obj;
        for (const part of parts.slice(0, -1)) {
            current = current[part];
            if (!current) {
                return undefined;
            }
        }
        const methodName = parts[parts.length - 1];
        const method = current[methodName];
        if (typeof method === 'function') {
            return method.bind(current);
        }
        return undefined;
    }
    renderByState(state) {
        return state ? index.h("slot", { name: "loading" }, "Loading...") : index.h("slot", null, "Click");
    }
    hasSlot(name) {
        return !!this.host.querySelector(`[slot="${name}"]`);
    }
    render() {
        let state = false;
        const store = this.mailboxConnector?.nylasMailboxStore;
        if (typeof store !== 'undefined') {
            const storeKey = String(this.dataState);
            state = this.dataState ? store.get(storeKey) === 'loading' : false;
        }
        const key = state ? `state-loading` : 'state-ready';
        return (index.h(index.Host, { key: '0dc0623c7768935757a124c668daac32b7093e1f' }, index.h("sp-theme", { key: 'ff113301775da75e8cf314faa4c1db328dfa2373', scale: "medium", color: "dark" }, index.h("sp-button", { onClick: this.onClick, disabled: state, key: key, "icon-only": this.iconOnly, label: this.renderByState(state) }, this.hasSlot('icon') && (index.h("div", { slot: "icon", class: 'slot' }, index.h("slot", { name: "icon" }))), !this.iconOnly && this.renderByState(state)))));
    }
    get host() { return index.getElement(this); }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-mailbox-toolbar-button',
        connectorToProp: 'mailboxConnector',
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasMailboxToolbarButton.prototype, "render", null);
NylasMailboxToolbarButton.style = nylasMailboxToolbarButtonCss;

exports.nylas_mailbox_toolbar_button = NylasMailboxToolbarButton;

//# sourceMappingURL=nylas-mailbox-toolbar-button.cjs.entry.js.map