'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const utils = require('./utils-0e1c4d88.js');
require('./_commonjsHelpers-9463df90.js');

const nylasBookingConfirmationTypeCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-booking-confirmation-type{width:inherit;display:flex;flex-direction:column;margin-bottom:1rem}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown span.label{display:flex;align-items:center;gap:4px;color:var(--nylas-base-800)}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown span.label tooltip-component{display:flex}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-booking-confirmation-type .nylas-booking-confirmation-type__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookingConfirmationType = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'confirmation-type';
        this.bookingType = 'booking';
        this.showComponent = this.selectedConfiguration?.event_booking?.booking_type !== 'custom-confirmation';
        this.selectedBookingType = undefined;
        this.showDropdown = undefined;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-booking-confirmation-type', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-booking-confirmation-type', 'selectedConfigurationChangedHandler', newValue);
        if (newValue?.event_booking?.booking_type) {
            this.selectedBookingType = newValue?.event_booking?.booking_type;
            this.showDropdown = newValue?.event_booking?.booking_type !== 'custom-confirmation' && !!newValue?.scheduler?.organizer_confirmation_url;
        }
    }
    connectedCallback() {
        utils.debug('nylas-booking-confirmation-type', 'connectedCallback');
    }
    disconnectedCallback() {
        utils.debug('nylas-booking-confirmation-type', 'disconnectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-booking-confirmation-type', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-booking-confirmation-type', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.selectedBookingType = this.bookingType || 'booking';
        }
        this.internals.setFormValue(this.selectedBookingType.toString(), this.name);
        this.showDropdown = this.selectedConfiguration?.event_booking?.booking_type !== 'custom-confirmation' && !!this.selectedConfiguration?.scheduler?.organizer_confirmation_url;
    }
    componentWillUpdate() {
        utils.debug('nylas-booking-confirmation-type', 'componentWillUpdate');
    }
    componentDidUpdate() {
        utils.debug('nylas-booking-confirmation-type', 'componentDidUpdate');
    }
    componentWillRender() {
        utils.debug('nylas-booking-confirmation-type', 'componentWillRender');
    }
    componentDidRender() {
        utils.debug('nylas-booking-confirmation-type', 'componentDidRender');
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-booking-confirmation-type', 'nylasFormDropdownChangedHandler', event.detail);
        const valueChanged = (event) => {
            const { value } = event.detail;
            this.selectedBookingType = value;
            this.internals.setFormValue(value.toString(), this.name);
        };
        this.valueChanged.emit({ ...event.detail, valueChanged });
    }
    render() {
        const bookingOptions = [
            {
                label: 'Automatically accept bookings',
                value: 'booking',
            },
            {
                label: 'Manually accept bookings',
                value: 'organizer-confirmation',
            },
        ];
        return (index.h(index.Host, { key: 'bb3093d5abf52581a6b29eabf2c520ae1da1a425' }, this.showDropdown && (index.h("div", { class: "nylas-booking-confirmation-type", part: "nbct" }, bookingOptions.length > 0 && (index.h("div", { class: "nylas-booking-confirmation-type__dropdown" }, index.h("span", { class: "label" }, "When a booking is requested", index.h("tooltip-component", null, index.h("info-icon", { slot: "tooltip-icon" }), index.h("span", { slot: "tooltip-content" }, "Manually accept bookings allows you to review and either accept or decline each booking request."))), this.selectedBookingType && (index.h("select-dropdown", { name: "booking-type", options: bookingOptions, withSearch: false, exportparts: "sd_dropdown: nbct__dropdown, sd_dropdown-button: nbct__dropdown-button, sd_dropdown-content: nbct__dropdown-content", defaultSelectedOption: bookingOptions.find(cal => cal.value == this.selectedBookingType) }))))))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-booking-confirmation-type',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingConfirmationType.prototype, "render", null);
NylasBookingConfirmationType.style = nylasBookingConfirmationTypeCss;

exports.nylas_booking_confirmation_type = NylasBookingConfirmationType;

//# sourceMappingURL=nylas-booking-confirmation-type.cjs.entry.js.map