'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const utils = require('./utils-0e1c4d88.js');
require('./_commonjsHelpers-9463df90.js');

const nylasThreadsRefreshCss = ":host{display:contents}.container{width:100%;overflow:auto;-webkit-overflow-scrolling:touch}.pull-to-refresh{display:none;border:0;background-color:transparent;text-align:center;width:100%;justify-content:center}.pulling{position:relative;display:flex;margin:0 auto;padding:1rem}.pulling svg{width:24px;height:24px;color:var(--nylas-color-primary-500);transform:rotate(90deg)}.refreshing{position:relative;display:flex;margin:0 auto;padding:1rem}.refreshing svg{width:24px;height:24px;fill:var(--nylas-color-primary-500);animation:rotate 1s linear infinite}@keyframes rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasThreadsRefresh = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.refresh = index.createEvent(this, "refresh", 7);
        this.threshold = 100;
        this.onTouchStart = (e) => {
            utils.debug(`[nylas-threads-refresh] Touch start`, e.touches[0].pageY, this.containerElement?.scrollTop, this.containerElement?.offsetHeight, this.contentElement?.scrollTop);
            if (this.containerElement?.scrollTop === 0) {
                this.start = e.touches[0].pageY;
            }
            else {
                this.start = 0;
            }
        };
        this.onTouchMove = (e) => {
            if (this.start) {
                const distance = e.touches[0].pageY - this.start;
                if (distance > this.threshold) {
                    this.pulling = true;
                }
                else {
                    this.pulling = false;
                }
            }
        };
        this.onTouchEnd = (e) => {
            if (this.start) {
                const distance = e.changedTouches[0].pageY - this.start;
                if (distance > this.threshold) {
                    this.pulling = false;
                    this.refresh.emit({
                        updateState: this.updateState,
                    });
                }
                this.start = 0;
            }
        };
        this.start = 0;
        this.state = 'ready';
        this.pulling = false;
        utils.debug(`[nylas-threads-refresh] Constructor`);
        this.updateState = this.updateState.bind(this);
    }
    connectedCallback() { }
    async componentWillLoad() {
        utils.debug(`[nylas-threads-refresh] Component will load`);
    }
    componentDidLoad() {
        utils.debug(`[nylas-threads-refresh] Component did load`);
        this.containerElement?.addEventListener('touchstart', this.onTouchStart);
        this.containerElement?.addEventListener('touchmove', this.onTouchMove);
        this.containerElement?.addEventListener('touchend', this.onTouchEnd);
    }
    disconnectedCallback() {
        utils.debug(`[nylas-threads-refresh] Component disconnected`);
        this.containerElement?.removeEventListener('touchstart', this.onTouchStart);
        this.containerElement?.removeEventListener('touchmove', this.onTouchMove);
        this.containerElement?.removeEventListener('touchend', this.onTouchEnd);
    }
    async updateState(state) {
        this.state = state;
    }
    render() {
        return (index.h(index.Host, { key: '0e7150c1fd50e5422e124ac007132ae2ecc0006b' }, index.h("div", { key: '730765ce38847fdbe691f2b9cfeda44e1a46259b', class: "container", ref: r => (this.containerElement = r) }, index.h("button", { key: '55427e329f0405960f22f736f10722e620931516', class: {
                'pull-to-refresh': true,
                'pulling': this.pulling,
                'refreshing': this.state === 'loading',
            }, "aria-label": "Refreshing..." }, this.state === 'loading' && index.h("refresh-icon", { slot: "icon" }), this.state !== 'loading' && index.h("arrow-icon", { slot: "icon" })), index.h("div", { key: '585886ff635733f5e0398ca9cfe11944860f5a61', class: "content", ref: r => (this.contentElement = r) }, index.h("slot", { key: 'f61cab9fae1aae81ecb0e7a6544ddb4b845c91b4' })))));
    }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-threads-refresh',
        eventToProps: {
            refresh: async (event, nylasConnector) => {
                utils.debug(`[nylas-threads-refresh] Refreshing threads`);
                const { updateState } = event.detail;
                await updateState('loading');
                await nylasConnector.threads.getThreads(undefined, 'overwrite', false);
                await updateState('ready');
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasThreadsRefresh.prototype, "render", null);
NylasThreadsRefresh.style = nylasThreadsRefreshCss;

exports.nylas_threads_refresh = NylasThreadsRefresh;

//# sourceMappingURL=nylas-threads-refresh.cjs.entry.js.map