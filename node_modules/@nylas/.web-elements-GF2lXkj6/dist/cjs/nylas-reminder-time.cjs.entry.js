'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const constants = require('./constants-c58992fc.js');
const utils = require('./utils-0e1c4d88.js');
require('./_commonjsHelpers-9463df90.js');

const nylasReminderTimeCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-reminder-time{display:flex;flex-direction:column;gap:4px}.nylas-reminder-time label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-reminder-time label span.required{color:var(--nylas-error, #cc4841)}.nylas-reminder-time label span.label-icon{margin-left:4px}.nylas-reminder-time label span.label-icon tooltip-component{display:flex}.nylas-reminder-time__wrapper{display:flex;align-items:center;gap:0.5rem}.nylas-reminder-time__wrapper input{padding:12px 16px;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-200);font-family:var(--nylas-font-family);font-size:16px;line-height:24px;width:48px}.nylas-reminder-time__wrapper input-dropdown::part(id_dropdown-input){border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:14px 16px;width:50px}.nylas-reminder-time__wrapper input-dropdown::part(id_dropdown-content){width:100%;min-width:unset;height:160px}.nylas-reminder-time__wrapper select-dropdown{width:120px}@media screen and (max-width: 768px){.nylas-reminder-time__wrapper select-dropdown{width:100%}}.nylas-reminder-time__wrapper select-dropdown::part(sd_dropdown-button){border:1px solid var(--nylas-base-200)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
function getInitialTimeValue(timeInMinutes) {
    if (!timeInMinutes)
        return 30;
    if (timeInMinutes >= 60 * 24)
        return timeInMinutes / (60 * 24);
    if (timeInMinutes >= 90 || timeInMinutes === 60)
        return timeInMinutes / 60;
    return timeInMinutes;
}
function getInitialTimeIncrement(timeInMinutes) {
    if (!timeInMinutes)
        return 30;
    if (timeInMinutes >= 60 * 24)
        return 60 * 24;
    if (timeInMinutes >= 90 || timeInMinutes === 60)
        return 60;
    return 1;
}
const NylasReminderTime = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'reminder-time';
        this.eventReminderTimeMinutes = undefined;
        this.reminderTime = getInitialTimeValue(this.eventReminderTimeMinutes);
        this.reminderTimeMinutes = this.eventReminderTimeMinutes ?? 30;
        this.reminderTimeincrement = getInitialTimeIncrement(this.eventReminderTimeMinutes);
        this.reminderTimeMinutesOptions = constants.REMINDER_MINUTE_OPTIONS;
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-reminder-time', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    reminderTimeMinutesChangedHandler(newValue, oldValue) {
        utils.debug('nylas-reminder-time', 'reminderTimeMinutesChangedHandler', newValue);
        if (newValue === oldValue) {
            return;
        }
        this.valueChanged.emit({ value: newValue.toString(), name: this.name });
    }
    connectedCallback() {
        utils.debug('nylas-reminder-time', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-reminder-time', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.setReminderTimeMinuteOptions();
    }
    componentDidLoad() {
        utils.debug('nylas-reminder-time', 'componentDidLoad');
    }
    disconnectedCallback() {
        utils.debug('nylas-reminder-time', 'disconnectedCallback');
    }
    setReminderTimeMinuteOptions() {
        if (this.reminderTimeincrement === 1) {
            this.reminderTimeMinutesOptions = constants.REMINDER_MINUTE_OPTIONS;
        }
        else if (this.reminderTimeincrement === 60) {
            this.reminderTimeMinutesOptions = constants.REMINDER_HOUR_OPTIONS;
        }
        else
            this.reminderTimeMinutesOptions = constants.REMINDER_DAY_OPTIONS;
        return this.reminderTimeMinutesOptions;
    }
    nylasFormDropdownChangedHandler(event) {
        utils.debug('nylas-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        const { value } = event.detail;
        this.reminderTimeincrement = parseInt(value);
        if (this.reminderTimeincrement === 1) {
            this.reminderTime = 60;
        }
        else {
            this.reminderTime = 1;
        }
        this.setReminderTimeMinuteOptions();
        this.reminderTimeMinutes = this.reminderTime * this.reminderTimeincrement;
        this.internals.setFormValue(this.reminderTimeMinutes.toString(), this.name);
    }
    inputOptionChangedHandler(event) {
        utils.debug('nylas-calendar-picker', 'inputOptionChangedHandler', event.detail);
        const { value } = event.detail;
        this.reminderTime = value;
        this.reminderTimeMinutes = this.reminderTime * this.reminderTimeincrement;
        this.internals.setFormValue(this.reminderTimeMinutes.toString(), this.name);
    }
    render() {
        const reminderTimeOptions = [
            { value: 1, label: 'minute' },
            { value: 60, label: 'hour' },
            { value: 60 * 24, label: 'day' },
        ];
        return (index.h(index.Host, { key: '95650f7ac9614dca98c8e69c27b4b21467979b6d' }, index.h("div", { key: '14d23a6f804d63906402639d30550b9cd0ae3138', class: "nylas-reminder-time", part: "nrt" }, index.h("div", { key: 'a62fe9f7394f5a2bb34beebb29d81bf7aecacb85', class: "nylas-reminder-time__wrapper" }, index.h("input-dropdown", { key: '031b5fe434b4d354ed0bfdbac6b09b4695e2d6ce', name: 'reminder-time', options: this.reminderTimeMinutesOptions, inputValue: this.reminderTime.toString(), exportparts: "id_dropdown: nrt__input_dropdown, id_dropdown-input: nrt__input_dropdown-input, id_dropdown-content: nrt__input_dropdown-content", defaultInputOption: this.reminderTimeMinutesOptions.find(i => i.value == this.reminderTime) ?? reminderTimeOptions[0] }), index.h("select-dropdown", { key: 'cd3c38a0fef80875fe5ad9d418aaf53ac2a0f078', name: 'reminder-time-unit', options: reminderTimeOptions, pluralizedLabel: this.reminderTime > 1 ? 's' : '', exportparts: "sd_dropdown: nrt__dropdown, sd_dropdown-button: nrt__dropdown-button, sd_dropdown-content: nrt__dropdown-content", defaultSelectedOption: reminderTimeOptions.find(i => i.value == this.reminderTimeincrement) ?? reminderTimeOptions[0], withSearch: false })))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "reminderTimeMinutes": ["reminderTimeMinutesChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-reminder-time',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasReminderTime.prototype, "render", null);
NylasReminderTime.style = nylasReminderTimeCss;

exports.nylas_reminder_time = NylasReminderTime;

//# sourceMappingURL=nylas-reminder-time.cjs.entry.js.map