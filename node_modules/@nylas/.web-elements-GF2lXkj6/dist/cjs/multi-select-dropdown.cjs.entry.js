'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const utils = require('./utils-0e1c4d88.js');
require('./_commonjsHelpers-9463df90.js');

const multiSelectDropdownCss = ":host{display:block;width:inherit;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.dropdown{display:inline-block;width:100%;position:relative}.dropdown .dropdown-label{display:flex;align-items:center;gap:0.25rem;color:var(--nylas-base-800)}.dropdown span.error{color:var(--nylas-error);font-size:14px}.dropbtn{width:inherit;height:48px;color:black;padding:0.5rem;font-size:1rem;cursor:pointer;display:flex;gap:0.5rem;justify-content:space-between;align-items:center;background:transparent;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.dropbtn.focus{background:transparent}.dropbtn.error{border:1px solid var(--nylas-error)}.dropbtn:hover,.dropbtn:active{border:1px solid var(--nylas-primary)}.dropbtn:active{outline:2px solid var(--nylas-primary)}.dropbtn span.open{transform:rotate(90deg)}.dropbtn span.closed{transform:rotate(270deg)}.dropdown-content{display:block;margin-top:0.5rem;background-color:var(--nylas-base-0);width:100%;max-height:336px;overflow:auto;z-index:1;border-radius:4px;position:absolute;top:72px;box-shadow:0px 4px 6px -2px rgba(0, 0, 0, 0.0509803922);box-shadow:0px 10px 15px -3px rgba(0, 0, 0, 0.1019607843)}.dropdown-content ul{padding:0;list-style-type:none;color:var(--nylas-base-900);max-height:336px}.dropdown-content ul li{padding:16px, 12px, 16px, 12px;color:black;padding:12px 16px;text-decoration:none;display:block;font-family:inherit;font-size:14px;font-weight:400;line-height:20px;letter-spacing:0px;text-align:left;cursor:pointer}.dropdown-content ul li:hover,.dropdown-content ul li:focus{background-color:var(--nylas-base-100)}.dropdown-content ul li label{display:flex;align-items:center;gap:0.5rem}.dropdown-content ul li label input{margin:0}.selected-options{display:flex;flex-wrap:wrap;gap:0.5rem;padding:0.5rem 0;margin-top:0.25rem;background:var(--nylas-base-0)}.selected-options .selected-option{display:flex;align-items:center;gap:0.5rem;padding:4px 8px;border-radius:var(--nylas-border-radius-2x);background:var(--nylas-base-100);color:var(--nylas-base-800);font-size:16px;font-weight:500;line-height:1.5rem;letter-spacing:0.5px}.selected-options .selected-option button{background:transparent;border:none;cursor:pointer;padding:0}.selected-options .selected-option button:hover{color:var(--nylas-primary)}";

const MultiSelectDropdown = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.selectedOptionsChanged = index.createEvent(this, "selectedOptionsChanged", 7);
        this.name = undefined;
        this.label = undefined;
        this.options = [];
        this.error = '';
        this.availableOptions = this.options;
        this.isOpen = false;
        this.ariaActivedescendant = '';
        this.shouldFocusFirstOption = false;
    }
    componentDidLoad() {
        utils.debug('multi-select-dropdown', 'componentDidLoad');
        if (this.options) {
            this.availableOptions = this.options;
        }
    }
    componentDidRender() {
        utils.debug('multi-select-dropdown', 'componentDidRender');
        if (this.isOpen && this.shouldFocusFirstOption) {
            this.ariaActivedescendant = this.availableOptions[0]?.value;
            this.focusOption(0);
            this.shouldFocusFirstOption = false;
        }
    }
    handleOutsideClick(event) {
        const path = event.composedPath();
        const isClickInside = path.includes(this.el);
        if (!isClickInside && this.isOpen) {
            this.isOpen = false;
        }
    }
    selectOption(option) {
        this.availableOptions = this.availableOptions.map(o => {
            if (o.value === option.value) {
                o.selected = option.selected ? false : true;
            }
            return o;
        });
        const selectedOptions = this.availableOptions.filter(o => o.selected).map(o => o.value);
        this.selectedOptionsChanged.emit({
            value: selectedOptions,
            name: this.name,
        });
    }
    toggleDropdown() {
        this.isOpen = !this.isOpen;
        if (this.isOpen) {
            this.shouldFocusFirstOption = true;
        }
        else {
            this.ariaActivedescendant = '';
        }
    }
    handleSelectButtonKeyDown(event) {
        switch (event.key) {
            case 'ArrowDown':
            case 'Enter':
                event.preventDefault();
                if (!this.isOpen) {
                    this.toggleDropdown();
                }
                break;
            case 'Escape':
                this.isOpen = false;
                break;
        }
    }
    handleListboxKeydown(e) {
        const items = this.availableOptions;
        const currentIndex = items.findIndex(item => item.value === this.ariaActivedescendant);
        switch (e.key) {
            case 'ArrowDown':
            case 'Tab':
                if (!e.shiftKey) {
                    e.preventDefault();
                    const nextIndex = currentIndex + 1 < items.length ? currentIndex + 1 : 0;
                    this.ariaActivedescendant = items[nextIndex].value;
                    this.focusOption(nextIndex);
                }
                else {
                    e.preventDefault();
                    const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
                    this.ariaActivedescendant = items[prevIndex].value;
                    this.focusOption(prevIndex);
                }
                break;
            case 'ArrowUp':
                e.preventDefault();
                const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
                this.ariaActivedescendant = items[prevIndex].value;
                this.focusOption(prevIndex);
                break;
            case 'Enter':
                e.preventDefault();
                if (this.ariaActivedescendant) {
                    this.selectOption(items[currentIndex]);
                }
                break;
            case 'Escape':
                this.isOpen = false;
                break;
        }
    }
    focusOption(index) {
        const option = this.availableOptions[index];
        if (!option)
            return;
        const elementId = option.value;
        const element = this.el.shadowRoot?.getElementById(elementId);
        if (element) {
            element.focus();
            element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }
    getSelectedOptions() {
        return this.availableOptions.filter(option => option.selected);
    }
    renderOption(option) {
        return (index.h("li", { key: option.value, id: option.value, role: "option", tabindex: "0", "aria-selected": option.selected ? 'true' : 'false', onClick: e => {
                e.stopImmediatePropagation();
                this.selectOption(option);
            }, class: { selected: !!option.selected } }, index.h("label", { htmlFor: option.value }, index.h("input", { "aria-hidden": "true", id: option.value, type: "checkbox", checked: option.selected }), index.h("span", null, option.label))));
    }
    render() {
        return (index.h(index.Host, { key: 'cecb77880fd937e5845868c7cae0d9e341991088' }, index.h("div", { key: '3d6acf55e72e25e411812f2fd887678bb332ef16', class: "dropdown", part: "msd_dropdown" }, index.h("label", { key: 'c509b2157684148c0ee0d33f9a2de999d4e05945', class: "dropdown-label" }, this.label, index.h("slot", { key: '568acd93a920e4538350a56c2cef04a67fa07dc7', name: "label-icon", "aria-hidden": "true" })), index.h("button", { key: '036bf6146c9071cb369f95ec3e60ea6d8cf12d1a', name: this.name, part: `msd_dropdown-button ${this.error ? 'msd_dropdown-button--error' : ''}`, class: { dropbtn: true, open: this.isOpen, error: !!this.error }, onClick: () => this.toggleDropdown(), "aria-haspopup": "listbox", "aria-expanded": this.isOpen ? 'true' : 'false', "aria-label": this.name, onKeyDown: e => this.handleSelectButtonKeyDown(e) }, index.h("slot", { key: '4760a3c065fa4f0af09cf11326423aacf5511066', name: "select-icon", "aria-hidden": "true" }), index.h("span", { key: '4edd567dc3f25451a4f0cbddb02391bde5fc56fd', class: "selected-option", part: "msd_dropdown-button-selected-label" }, this.getSelectedOptions().length > 1 ? `Multiple options selected` : this.availableOptions.filter(o => o.selected)[0]?.label ?? this.availableOptions[0]?.label), index.h("span", { key: '6ae9028141f44f16dc56ecd294a2acc3db9a01d5', class: this.isOpen ? 'open' : 'closed', "aria-hidden": "true" }, index.h("chevron-icon", { key: '7381625a3b7a961a125d91a27e7b96e4754fb0a1', width: "16", height: "16" }))), this.error ? index.h("span", { class: "error" }, this.error) : null, this.isOpen ? null : (index.h("div", { class: 'selected-options' }, this.getSelectedOptions().map(option => (index.h("span", { class: "selected-option" }, option.label, index.h("button", { key: option.label, onClick: () => this.selectOption(option) }, index.h("close-icon", null))))))), this.isOpen ? (index.h("div", { class: "dropdown-content", part: "msd_dropdown-content" }, index.h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-multiselectable": true, "aria-activedescendant": this.ariaActivedescendant, onKeyDown: e => this.handleListboxKeydown(e) }, this.availableOptions.map(option => this.renderOption(option))))) : null)));
    }
    get el() { return index.getElement(this); }
};
MultiSelectDropdown.style = multiSelectDropdownCss;

exports.multi_select_dropdown = MultiSelectDropdown;

//# sourceMappingURL=multi-select-dropdown.cjs.entry.js.map