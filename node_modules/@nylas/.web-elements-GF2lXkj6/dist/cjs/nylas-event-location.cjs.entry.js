'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-c14ea8f5.js');
const registerComponent = require('./register-component-2f532e44.js');
const utils = require('./utils-0e1c4d88.js');
const constants = require('./constants-c58992fc.js');
require('./_commonjsHelpers-9463df90.js');

const nylasEventLocationCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-location{display:flex;flex-direction:column;gap:4px;font-family:var(--nylas-font-family)}.nylas-event-location label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-location label span.label-icon{margin-left:4px}.nylas-event-location label span.label-icon tooltip-component{display:flex}.nylas-event-location span[slot=select-icon]{border-right:1px solid var(--nylas-base-200);padding:16px 0.75rem 16px 0.5rem;border-radius:var(--nylas-border-radius-2x);border-bottom-right-radius:0;border-top-right-radius:0;height:20px}.nylas-event-location div.location-input{display:grid;grid-template-columns:auto 1fr;width:100%;gap:0.5rem}@media screen and (max-width: 768px){.nylas-event-location div.location-input{grid-template-columns:1fr}}.nylas-event-location div.location-input input{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:12px 16px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px}.nylas-event-location select-dropdown{width:208px}@media screen and (max-width: 768px){.nylas-event-location select-dropdown{width:100%}}.nylas-event-location select-dropdown::part(sd_dropdown){width:100%}.nylas-event-location select-dropdown::part(sd_dropdown-content){left:calc(35px + 0.5rem)}.nylas-event-location select-dropdown::part(sd_dropdown-button){display:flex;justify-content:space-between;width:100%;border:1px solid var(--nylas-base-200);padding:0 0.5rem}.nylas-event-location select-dropdown::part(sd_dropdown-button-selected-label){display:inline-flex;align-self:center;padding:14px 0;font-family:var(--nylas-font-family);font-size:16px;line-height:24px}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventLocation = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChanged = index.createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.name = 'location';
        this.currentUser = undefined;
        this.userProvider = undefined;
        this.eventConferencing = undefined;
        this.conferenceProviders = undefined;
        this.selectedConfiguration = undefined;
        this.eventLocation = undefined;
        this.location = this.eventLocation ?? '';
        this.grantId = this.eventConferencing ? this.setDefaultGrantID(this.eventConferencing) : '';
        this.selectedLocationOption = this.eventConferencing ? this.setDefaultLocationOption(this.eventConferencing, this.location) : '';
        this.userProviderState = this.userProvider ?? '';
    }
    elementNameChangedHandler(newValue) {
        utils.debug('nylas-event-location', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        utils.debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        const configLocation = newValue?.event_booking?.location;
        const configConferencing = newValue?.event_booking?.conferencing;
        if (configConferencing?.provider) {
            this.selectedLocationOption = this.setDefaultLocationOption(configConferencing, configLocation ?? '');
            this.grantId = this.setDefaultGrantID(configConferencing);
            this.location = configLocation ? configLocation : '';
        }
        else if (configLocation) {
            this.selectedLocationOption = configLocation ? 'custom' : 'none';
            this.location = configLocation;
        }
        else {
            this.selectedLocationOption = 'none';
            this.location = '';
        }
    }
    connectedCallback() {
        utils.debug('nylas-event-location', 'connectedCallback');
    }
    componentWillLoad() {
        utils.debug('nylas-event-location', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        utils.debug('nylas-event-location', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        if (this.currentUser?.provider) {
            this.userProviderState = this.currentUser.provider;
        }
    }
    disconnectedCallback() {
        utils.debug('nylas-event-location', 'disconnectedCallback');
    }
    nylasFormDropdownChangedHandler(event) {
        this.selectedLocationOption = event.detail.value;
        let payload;
        switch (this.selectedLocationOption) {
            case 'none':
                this.location = '';
                this.setFormValue('', this.name);
                this.valueChanged.emit({ value: '', name: this.name });
                this.valueChanged.emit({ value: JSON.stringify({}), name: 'conference' });
                break;
            case 'custom':
                this.valueChanged.emit({ value: JSON.stringify({}), name: 'conference' });
                break;
            case 'google':
                this.location = '';
                this.setFormValue('', this.name);
                const googleConfGrantId = this.conferenceProviders?.['google'];
                payload = {
                    provider: constants.PROVIDER_CONFERENCE_MAP.google,
                    autocreate: googleConfGrantId
                        ? {
                            conf_grant_id: googleConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
            case 'microsoft':
                this.location = '';
                this.setFormValue('', this.name);
                const microsoftConfGrantId = this.conferenceProviders?.['microsoft'];
                payload = {
                    provider: constants.PROVIDER_CONFERENCE_MAP.microsoft,
                    autocreate: microsoftConfGrantId
                        ? {
                            conf_grant_id: microsoftConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
            case 'zoom':
                this.location = '';
                this.setFormValue('', this.name);
                const zoomConfGrantId = this.conferenceProviders?.['zoom'];
                payload = {
                    provider: constants.PROVIDER_CONFERENCE_MAP.zoom,
                    autocreate: zoomConfGrantId
                        ? {
                            conf_grant_id: zoomConfGrantId,
                        }
                        : {},
                };
                this.valueChanged.emit({ value: JSON.stringify(payload), name: 'conference' });
                this.valueChanged.emit({ value: '', name: this.name });
                break;
        }
    }
    setDefaultLocationOption(eventConferencing, eventLocation) {
        if (eventConferencing != null && eventConferencing?.provider != null && eventConferencing?.autocreate != null) {
            return constants.CONFERENCE_PROVIDER_MAP[eventConferencing?.provider];
        }
        return eventLocation ? 'custom' : 'none';
    }
    setDefaultGrantID(eventConferencing) {
        if (eventConferencing != null && eventConferencing?.autocreate != null) {
            return eventConferencing?.autocreate?.conf_grant_id;
        }
        return '';
    }
    setFormValue(value, name) {
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(value, name);
        }
    }
    handleChange(event) {
        const value = utils.sanitize(event.target.value);
        this.location = value;
        this.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    render() {
        const locationOptions = [
            { value: 'none', label: 'None' },
            { value: 'custom', label: 'Custom location' },
        ];
        switch (this.userProviderState) {
            case 'google':
                locationOptions.push({ value: 'google', label: 'Google Meet' });
                break;
            case 'microsoft':
                locationOptions.push({ value: 'microsoft', label: 'Microsoft Teams' });
                break;
        }
        if (this.conferenceProviders?.['zoom']) {
            locationOptions.push({ value: 'zoom', label: 'Zoom Meeting' });
        }
        const newLocationOptions = [...locationOptions];
        const defaultOption = locationOptions.find(i => i.value == this.selectedLocationOption);
        const icons = {
            none: index.h("location-off-icon", { key: '2482c1d7540ae00fddbff24ddf0b4189685e3db4' }),
            custom: index.h("location-icon", { key: 'aeb4445371396bad7b3062e0a0ce62f4227f97c4' }),
            google: index.h("google-meet-icon", { key: '6e790972192ecca0900dea5904d3f318d19341cc' }),
            microsoft: index.h("microsoft-teams-icon", { key: '1b372c0129879cf9c16b015ba4fdb6d1cee40597' }),
            zoom: index.h("zoom-icon", { key: '1b46c44aa6db92e2e136bbab6fa98f17376da160' }),
        };
        const locationIcon = icons[this.selectedLocationOption];
        return (index.h(index.Host, { key: 'f2870194d69bf49afadd49f87c42fb085f60b085' }, index.h("div", { key: '247dd130e13d9e8287da1f5d83656f40a2ad313d', class: "nylas-event-location", part: "nel" }, index.h("label", { key: 'b7d548b8522830155db8fd2fc7eca8793e8bb8e1', htmlFor: "location" }, "Event meeting or location", index.h("span", { key: '587c6c27f6f89ed5a263372123bd509b5984025f', class: "label-icon" }, index.h("tooltip-component", { key: '0dad9cbc3627fe4c549fbdba418119b205b1e812' }, index.h("info-icon", { key: '6a3938dc0cee21a1c8379b33720ada33c96edacd', slot: "tooltip-icon" }), index.h("span", { key: 'dbff5af98e90895815712d4e55bf57c3fdd2f5c4', slot: "tooltip-content" }, "Select a conferencing option or add a custom location.")))), index.h("div", { key: '0fe09f3fc8c30a8203a1207357f8e20a81a4bf28', class: "location-input" }, defaultOption?.label && (index.h("select-dropdown", { withSearch: false, name: "location", options: newLocationOptions, defaultSelectedOption: defaultOption, exportparts: "sd_dropdown: nel__dropdown, sd_dropdown-button: nel__dropdown-button, sd_dropdown-content: nel__dropdown-content" }, index.h("span", { slot: "select-icon" }, locationIcon))), this.selectedLocationOption === 'custom' && (index.h("input", { type: "text", part: "nel__location", id: "location", name: "location", maxlength: "1024", value: this.location, onInput: e => this.handleChange(e) }))))));
    }
    static get formAssociated() { return true; }
    get host() { return index.getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
};
__decorate([
    registerComponent.RegisterComponent({
        name: 'nylas-event-location',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.conferenceProviders', 'conferenceProviders'],
            ['schedulerConfig.currentUser', 'currentUser'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventLocation.prototype, "render", null);
NylasEventLocation.style = nylasEventLocationCss;

exports.nylas_event_location = NylasEventLocation;

//# sourceMappingURL=nylas-event-location.cjs.entry.js.map