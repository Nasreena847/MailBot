import { h } from "@stencil/core";
import { sanitize } from "../../../utils/utils";
const DefaultPattern = {
    email: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
    phone_number: /^\+?\d{1,15}$/,
};
const DefaultPlaceholder = {
    email: 'name@example.com',
    phone_number: '1234567890',
};
export class InputComponent {
    constructor() {
        this.name = 'input';
        this.defaultValue = undefined;
        this.label = '';
        this.type = 'text';
        this.placeholder = DefaultPlaceholder[this.type];
        this.required = false;
        this.readOnly = false;
        this.autoFocus = false;
        this.pattern = undefined;
        this.maxLength = 255;
        this.patternError = '';
        this.requiredError = '';
        this.value = undefined;
        this.error = '';
    }
    handleDefaultValueChange(newValue) {
        this.value = sanitize(newValue);
        if (this.value) {
            this.validatePattern(this.value);
        }
    }
    componentDidLoad() {
        this.value = sanitize(this.defaultValue || '');
        if (this.type !== 'text' && !this.pattern) {
            this.pattern = DefaultPattern[this.type];
        }
        if (this.value) {
            this.validatePattern(this.value);
        }
    }
    handleBookingFormSubmitted(event) {
        this.validatePattern(this.value);
        if (this.error) {
            event.preventDefault();
        }
    }
    async handleFormSubmitted(event) {
        if (this.el?.getAttribute('data-page-styling')) {
            this.validatePattern(this.value);
            if (this.error) {
                event.preventDefault();
            }
        }
    }
    handleInput(e) {
        this.error = '';
        this.value = sanitize(e.target.value);
        this.nylasFormInputChanged.emit({
            value: this.value,
            name: this.name,
            label: this.label,
            error: this.error,
            type: this.type,
        });
    }
    handleBlur() {
        this.nylasFormInputBlurred.emit({
            value: this.value,
            name: this.name,
        });
    }
    handleFocus() {
        this.nylasFormInputFocused.emit({
            value: this.value,
            name: this.name,
        });
    }
    validatePattern(value) {
        this.error = '';
        if (this.required && !value) {
            this.error = this.requiredError || 'This field is required.';
            return;
        }
        if (!this.pattern || (!value && !this.required))
            return;
        if (this.pattern.test(value)) {
            this.error = '';
        }
        else {
            this.error = this.patternError || 'Invalid format.';
        }
    }
    render() {
        return (h("label", { key: '207cb06847b7a045c4917180affc535169b55596', part: "ic__label", class: { error: !!this.error } }, this.label && (h("p", null, h("span", { class: "label" }, this.label), this.required && h("span", { class: "required" }, "*"))), h("div", { key: '8da4d52acd543376116d9851df43eb54b3e3fec1', part: "ic__input_wrapper", class: "input_wrapper" }, h("input", { key: '541168da152c81e01dfa0263f8c1f0b6e73e09f2', type: "text", name: this.name, part: "ic__input", readOnly: this.readOnly, autoFocus: this.autoFocus, value: this.value, maxLength: this.maxLength, placeholder: this.placeholder, class: { error: !!this.error }, onInput: e => this.handleInput(e), onFocus: () => this.handleFocus(), onBlur: () => this.handleBlur() }), h("slot", { key: '9e4ccbf52802dc59bda1d6b738c45026b8b78bd4', name: "additional-input" })), this.error && h("span", { class: "error help-text" }, this.error)));
    }
    static get is() { return "input-component"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["input-component.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["input-component.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the input. This is used to identify the input when submitting a form."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'input'"
            },
            "defaultValue": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default value of the input. This is the value that is displayed when the input is rendered."
                },
                "attribute": "default-value",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The label of the input. This is displayed above the input."
                },
                "attribute": "label",
                "reflect": false,
                "defaultValue": "''"
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'text' | 'email' | 'phone_number'",
                    "resolved": "\"email\" | \"phone_number\" | \"text\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The type of the input. This is used to determine the input's behavior.\nSupported types are 'text', 'email', and 'phone_number'."
                },
                "attribute": "type",
                "reflect": false,
                "defaultValue": "'text'"
            },
            "placeholder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The placeholder of the input. This is displayed when the input is empty."
                },
                "attribute": "placeholder",
                "reflect": false,
                "defaultValue": "DefaultPlaceholder[this.type]"
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the input is required. If true, the input must have a value when submitting a form.\nDefault is false. If the input is required and the value is empty, an error message is displayed."
                },
                "attribute": "required",
                "reflect": false,
                "defaultValue": "false"
            },
            "readOnly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the input is read-only. If true, the input cannot be edited.\nDefault is false."
                },
                "attribute": "read-only",
                "reflect": false,
                "defaultValue": "false"
            },
            "autoFocus": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the input should be focused when rendered.\nDefault is false. If true, the input is focused when rendered.\nUse this to set the focus on the first input in a form."
                },
                "attribute": "auto-focus",
                "reflect": false,
                "defaultValue": "false"
            },
            "pattern": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "RegExp",
                    "resolved": "RegExp | undefined",
                    "references": {
                        "RegExp": {
                            "location": "global",
                            "id": "global::RegExp"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The pattern to validate the input value. If the value does not match the pattern, an error message is displayed.\nDefault is null. If the pattern is not set, the pattern is determined by the input type for 'email' and 'phone_number'."
                }
            },
            "maxLength": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The maximum length of the input value. If the value is longer than the maximum length, an error message is displayed.\nDefault is 255."
                },
                "attribute": "max-length",
                "reflect": false,
                "defaultValue": "255"
            },
            "patternError": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The error message to display when the value does not match the pattern.\nDefault is 'Invalid <field> format.' where <field> is the input label."
                },
                "attribute": "pattern-error",
                "reflect": false,
                "defaultValue": "''"
            },
            "requiredError": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "This error message is displayed when the input value is empty and the input is required."
                },
                "attribute": "required-error",
                "reflect": false,
                "defaultValue": "''"
            }
        };
    }
    static get states() {
        return {
            "value": {},
            "error": {}
        };
    }
    static get events() {
        return [{
                "method": "nylasFormInputChanged",
                "name": "nylasFormInputChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the input value is changed.\nThe scheduling form listens for this event to validate the input value and submit the form.\nIf using outside of the scheduling form, listen for this event to validate the input value\nand handle the input value change."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    label: string;\n    type: string;\n    error: string;\n  }",
                    "resolved": "{ value: string; name: string; label: string; type: string; error: string; }",
                    "references": {}
                }
            }, {
                "method": "nylasFormInputFocused",
                "name": "nylasFormInputFocused",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }, {
                "method": "nylasFormInputBlurred",
                "name": "nylasFormInputBlurred",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "defaultValue",
                "methodName": "handleDefaultValueChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "bookingFormSubmitted",
                "method": "handleBookingFormSubmitted",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "formSubmitted",
                "method": "handleFormSubmitted",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=input-component.js.map
