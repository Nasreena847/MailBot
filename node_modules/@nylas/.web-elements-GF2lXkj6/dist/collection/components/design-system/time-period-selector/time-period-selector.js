import { debug } from "../../../utils/utils";
import { h } from "@stencil/core";
const pluralToSingular = {
    hours: 'hour',
    days: 'day',
    weeks: 'week',
    months: 'month',
};
export class TimePeriodSelector {
    constructor() {
        this.timePeriods = ['hour', 'day', 'week', 'month'];
        this.defaultSelectedPeriod = undefined;
        this.defaultSelectedNumber = undefined;
        this.selectedPeriod = this.defaultSelectedPeriod;
        this.selectedNumber = this.defaultSelectedNumber;
        this.numberOptions = this.calculateOptions(this.defaultSelectedPeriod || 'hour').map(i => {
            return {
                label: i.toString(),
                value: i.toString(),
            };
        });
        this.timePeriodOptions = this.timePeriods.map(period => {
            return {
                label: period,
                value: period,
            };
        });
    }
    componentDidLoad() {
        this.selectedNumber = this.defaultSelectedNumber;
        this.selectedPeriod = this.defaultSelectedPeriod;
        const period = pluralToSingular[this.selectedPeriod] ?? this.selectedPeriod;
        const numberOptions = this.calculateOptions(period);
        this.numberOptions = numberOptions.map(i => {
            return {
                label: i.toString(),
                value: i.toString(),
            };
        });
    }
    calculateOptions(period) {
        switch (period) {
            case 'hour':
                return Array.from({ length: 23 }, (_, i) => i + 1);
            case 'minute':
                return Array.from({ length: 13 }, (_, i) => i * 5);
            case 'day':
                return Array.from({ length: 30 }, (_, i) => i + 1);
            case 'week':
                return Array.from({ length: 4 }, (_, i) => i + 1);
            case 'month':
                return Array.from({ length: 12 }, (_, i) => i + 1);
            default:
                return [];
        }
    }
    inputOptionChangedHandler(event) {
        debug('time-period-selector', 'inputOptionChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (name === 'time-number') {
            this.selectedNumber = value ? parseInt(value) : this.defaultSelectedNumber;
        }
        const selected = {
            number: this.selectedNumber,
            period: this.selectedPeriod,
        };
        this.timePeriodChanged.emit(selected);
    }
    nylasFormDropdownChangedHandler(event) {
        debug('time-period-selector', 'nylasFormDropdownChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (name === 'time-period') {
            this.selectedPeriod = value;
            this.updateNumberOptionsAndSelectedNumber(value);
        }
        else if (name === 'time-number') {
            this.selectedNumber = parseInt(value);
        }
        const selected = {
            number: this.selectedNumber,
            period: this.selectedPeriod,
        };
        this.timePeriodChanged.emit(selected);
    }
    updateNumberOptionsAndSelectedNumber(period) {
        const numberOptions = this.calculateOptions(period);
        this.numberOptions = numberOptions.map(i => {
            return {
                label: i.toString(),
                value: i.toString(),
            };
        });
        this.selectedNumber = parseInt(this.numberOptions[0].value);
    }
    render() {
        return (h("div", { key: 'abc8dbfd41d9a73fb9f4d482785b6804a0149e7c', class: "time-period-selector" }, typeof this.selectedNumber == 'number' && (h("input-dropdown", { id: "time-number", name: 'time-number', inputValue: this.selectedNumber.toString(), exportparts: "id_dropdown: tps__number-dropdown, id_dropdown-input: tps__number-dropdown-button, id_dropdown-content: tps__number-dropdown-content", options: this.numberOptions, defaultInputOption: this.numberOptions.find(i => i.value == this.selectedNumber.toString()) })), typeof this.selectedPeriod == 'string' && (h("select-dropdown", { id: "time-period", name: 'time-period', options: this.timePeriodOptions, exportparts: "sd_dropdown: tps__period-dropdown, sd_dropdown-button: tps__period-dropdown-button, sd_dropdown-content: tps__period-dropdown-content", pluralizedLabel: this.selectedNumber > 1 ? 's' : '', defaultSelectedOption: this.timePeriodOptions.find(i => i.value == this.selectedPeriod), withSearch: false }))));
    }
    static get is() { return "time-period-selector"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() {
        return {
            "$": ["time-period-selector.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["time-period-selector.css"]
        };
    }
    static get properties() {
        return {
            "timePeriods": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "string[]",
                    "resolved": "string[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "defaultValue": "['hour', 'day', 'week', 'month']"
            },
            "defaultSelectedPeriod": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The default selected time period."
                },
                "attribute": "default-selected-period",
                "reflect": false
            },
            "defaultSelectedNumber": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The default selected number."
                },
                "attribute": "default-selected-number",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "selectedPeriod": {},
            "selectedNumber": {},
            "numberOptions": {},
            "timePeriodOptions": {}
        };
    }
    static get events() {
        return [{
                "method": "timePeriodChanged",
                "name": "timePeriodChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "{ number: number; period: string }",
                    "resolved": "{ number: number; period: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get listeners() {
        return [{
                "name": "inputOptionChanged",
                "method": "inputOptionChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=time-period-selector.js.map
