import { h } from "@stencil/core";
export class InputDropdown {
    constructor() {
        this.name = undefined;
        this.options = [];
        this.defaultInputOption = undefined;
        this.inputValue = undefined;
        this.pluralizedLabel = '';
        this.filterable = false;
        this.selectedOption = this.defaultInputOption || null;
        this.isOpen = false;
        this.typedValue = '';
        this.filteredOptions = [...this.options];
        this.ariaActivedescendant = '';
        this.shouldAutoScroll = false;
    }
    optionsChangedHandler(newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        this.filteredOptions = this.getFilteredOptions(newValue);
    }
    defaultSelectedOptionChangedHandler(newValue, oldValue) {
        if (newValue?.label === oldValue?.label) {
            return;
        }
        this.selectedOption = newValue;
    }
    inputValueChangedHandler(newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        this.filteredOptions = this.getFilteredOptions(this.options);
    }
    componentWillLoad() {
        this.filteredOptions = this.getFilteredOptions(this.options);
        if (!this.selectedOption && !!this.defaultInputOption) {
            this.selectedOption = this.defaultInputOption;
        }
        if (!this.selectedOption && this.options.length > 0) {
            this.selectedOption = this.options[0];
        }
    }
    getFilteredOptions(options) {
        if (!this.filterable) {
            return options;
        }
        return options.filter(option => option?.value?.toString().toLowerCase().includes(this.typedValue?.toLowerCase()) || option?.label?.toLowerCase().includes(this.typedValue?.toLowerCase()));
    }
    toggleDropdown() {
        this.isOpen = !this.isOpen;
    }
    selectOption(option) {
        this.selectedOption = option;
        this.toggleDropdown();
        this.inputOptionChanged.emit({
            value: option.value,
            name: this.name,
        });
    }
    handleOnInput(event) {
        const value = event.target.value;
        this.typedValue = value;
        const optionIndex = this.options.findIndex(option => option.label.toLowerCase().includes(value.toLowerCase()));
        if (optionIndex > -1) {
            this.scrollToViewWithinParent(optionIndex);
        }
        this.inputOptionChanged.emit({
            value,
            name: this.name,
        });
    }
    scrollToViewWithinParent(optionIndex) {
        const option = this.options[optionIndex];
        const childElement = this.el.shadowRoot?.getElementById(option.value.toString());
        const parentElement = this.optionsRef;
        this.ariaActivedescendant = option.value.toString();
        if (!childElement || !parentElement)
            return;
        const childRect = childElement.getBoundingClientRect();
        const parentRect = parentElement.getBoundingClientRect();
        if (childRect.top < parentRect.top) {
            parentElement.scrollTop -= parentRect.top - childRect.top;
        }
        else if (childRect.bottom > parentRect.bottom) {
            parentElement.scrollTop += childRect.bottom - parentRect.bottom;
        }
    }
    handleSelectButtonKeyDown(event) {
        switch (event.key) {
            case 'ArrowDown':
            case 'Enter':
                event.preventDefault();
                if (!this.isOpen) {
                    this.toggleDropdown();
                }
                this.inputRef?.focus();
                break;
            case 'Escape':
                this.isOpen = false;
                break;
        }
    }
    handleClick(event) {
        if (this.isOpen) {
            const value = event.target.value;
            const optionIndex = this.options.findIndex(option => option.label.toLowerCase().includes(value.toLowerCase()));
            if (optionIndex > -1) {
                setTimeout(() => {
                    this.scrollToViewWithinParent(optionIndex);
                }, 10);
            }
        }
    }
    handleListboxKeydown(e) {
        const items = this.filteredOptions;
        const currentIndex = items.findIndex(item => item.value === this.ariaActivedescendant);
        if (e.key === 'ArrowDown' || (e.key === 'Tab' && !e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === items.length - 1) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const nextIndex = currentIndex + 1 < items.length ? currentIndex + 1 : 0;
            this.ariaActivedescendant = items[nextIndex].value;
            this.focusOption(nextIndex);
        }
        else if (e.key === 'ArrowUp' || (e.key === 'Tab' && e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === 0) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
            this.ariaActivedescendant = items[prevIndex].value;
            this.focusOption(prevIndex);
        }
        else if (e.key === 'Enter') {
            e.preventDefault();
            if (this.ariaActivedescendant) {
                this.selectOption(items[currentIndex]);
            }
        }
        else if (e.key === 'Escape') {
            this.isOpen = false;
        }
    }
    focusOption(index) {
        const option = this.filteredOptions[index];
        if (!option)
            return;
        const elementId = option.value;
        const element = this.el.shadowRoot?.getElementById(elementId);
        if (element) {
            element.focus();
            element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }
    handleComboboxKeyDown(event) {
        if (event.key === 'ArrowDown' || (event.key == 'Tab' && !event.shiftKey)) {
            event.preventDefault();
            if (!this.isOpen) {
                this.isOpen = true;
                this.shouldAutoScroll = true;
                return;
            }
            this.ariaActivedescendant = this.filteredOptions[0].value;
            this.focusOption(0);
        }
        else if (event.key === 'ArrowUp' || (event.key === 'Tab' && event.shiftKey)) {
            event.preventDefault();
            this.ariaActivedescendant = this.filteredOptions[this.filteredOptions.length - 1].value;
            this.focusOption(this.filteredOptions.length - 1);
        }
        else if (event.key === 'Escape') {
            this.isOpen = false;
        }
    }
    handleOutsideClick(event) {
        const path = event.composedPath();
        const isClickInside = path.includes(this.el);
        if (!isClickInside && this.isOpen) {
            this.isOpen = false;
        }
    }
    render() {
        return (h("div", { key: 'fa0347bf09ec791976c3628837a400ffce06f785', class: "dropdown", part: "id_dropdown" }, h("input", { key: 'd18704609aa859f705397ca57a0d491a8f09ed99', type: "text", name: this.name, id: this.name, part: "id_dropdown-input", class: { dropbtn: true, open: this.isOpen }, value: this.inputValue, onClick: (e) => {
                this.toggleDropdown();
                this.shouldAutoScroll = true;
                this.handleClick(e);
            }, "aria-haspopup": "listbox", "aria-label": this.name, "aria-expanded": this.isOpen ? 'true' : 'false', onKeyDown: e => this.handleComboboxKeyDown(e), onInput: event => this.handleOnInput(event) }), this.isOpen ? (h("div", { class: "dropdown-content", part: "id_dropdown-content", ref: el => (this.optionsRef = el) }, h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-activedescendant": this.ariaActivedescendant, onKeyDown: e => this.handleListboxKeydown(e) }, this.filteredOptions.map(option => (h("li", { tabindex: "0", key: option.value, id: option.value, onClick: () => this.selectOption(option), role: "option", class: {
                focused: this.ariaActivedescendant === option.value.toString(),
            } }, option.labelHTML ? option.labelHTML : option.label)))))) : null));
    }
    static get is() { return "input-dropdown"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["input-dropdown.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["input-dropdown.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the dropdown"
                },
                "attribute": "name",
                "reflect": false
            },
            "options": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DropdownOption[]",
                    "resolved": "DropdownOption[]",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The options to display in the dropdown"
                },
                "defaultValue": "[]"
            },
            "defaultInputOption": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DropdownOption",
                    "resolved": "DropdownOption | undefined",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default selected option"
                }
            },
            "inputValue": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Should show search input"
                },
                "attribute": "input-value",
                "reflect": false
            },
            "pluralizedLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Show pluralized label for the selected option. This is s tring that is appended to the selected option label as a suffix."
                },
                "attribute": "pluralized-label",
                "reflect": false,
                "defaultValue": "''"
            },
            "filterable": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "This is used to set if the dropdown should be filtered based on the input value.\nIf set to true, the dropdown will be filtered based on the input value."
                },
                "attribute": "filterable",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "selectedOption": {},
            "isOpen": {},
            "typedValue": {},
            "filteredOptions": {},
            "ariaActivedescendant": {},
            "shouldAutoScroll": {}
        };
    }
    static get events() {
        return [{
                "method": "inputOptionChanged",
                "name": "inputOptionChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected option is changed"
                },
                "complexType": {
                    "original": "{\n    value: DropdownOption['value'];\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "options",
                "methodName": "optionsChangedHandler"
            }, {
                "propName": "defaultInputOption",
                "methodName": "defaultSelectedOptionChangedHandler"
            }, {
                "propName": "inputValue",
                "methodName": "inputValueChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "handleOutsideClick",
                "target": "document",
                "capture": true,
                "passive": false
            }];
    }
}
//# sourceMappingURL=input-dropdown.js.map
