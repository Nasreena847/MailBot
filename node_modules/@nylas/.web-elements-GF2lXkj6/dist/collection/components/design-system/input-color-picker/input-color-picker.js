import { h } from "@stencil/core";
export class InputColorPicker {
    constructor() {
        this.componentType = 'color-picker';
        this.name = undefined;
        this.defaultSelectedColor = undefined;
        this.selectedColor = this.defaultSelectedColor;
        this.isOpen = false;
        this.ariaActivedescendant = '';
        this.errorMessage = '';
    }
    componentWillLoad() {
        this.selectedColor = this.defaultSelectedColor;
        this.el.setAttribute('component-type', this.componentType);
    }
    handleFocus() {
        this.isOpen = true;
    }
    handleBlur() {
        this.isOpen = false;
    }
    handleInput(event) {
        this.selectedColor = event.target.value;
    }
    handleChange(event) {
        this.selectedColor = event.target.value;
        this.nylasFormDropdownChanged.emit({
            value: this.selectedColor,
            name: this.name,
            error: this.errorMessage,
        });
    }
    handleKeyDown(event) {
        if (event.code === 'Enter' || event.code === 'Space') {
            event.preventDefault();
            this.inputRef?.click();
        }
    }
    handleOutsideClick(event) {
        const path = event.composedPath();
        const isClickInside = path.includes(this.el);
        if (!isClickInside && this.isOpen) {
            this.isOpen = false;
        }
    }
    render() {
        return (h("div", { key: '145dabea01809c210829fc3cdc4882793b38a154', class: "color-picker-container", part: "icp_color-picker", tabindex: "0", onKeyDown: e => this.handleKeyDown(e) }, h("input", { key: '4ee61547ce9d051d2066fdcbcb1ebd048a8444cf', type: "color", ref: el => (this.inputRef = el), id: this.name, name: this.name, value: this.selectedColor, tabindex: "-1", onFocus: () => this.handleFocus(), onBlur: () => this.handleBlur(), onInput: e => this.handleInput(e), onChange: e => this.handleChange(e), onKeyDown: e => this.handleKeyDown(e) }), h("label", { key: '9473f60a27db4bb073c740df461ea2f276890ddb', part: "icp_color-picker-button", htmlFor: this.name, class: { labelBtn: true, open: this.isOpen, error: !!this.errorMessage }, "aria-haspopup": "listbox", "aria-expanded": this.isOpen ? 'true' : 'false', "aria-label": this.name }, h("span", { key: '3e10c11d8dae028ca965da307f06a51c6c71cf40', class: "selected-option", part: "icp_color-picker-button-selected-label" }, this.selectedColor || 'Select a color'), h("span", { key: 'bfbe7728225a7e6203189ae4da06fc4abf4f4ec4', class: {
                open: this.isOpen,
                closed: !this.isOpen,
                chevron: true,
            }, "aria-hidden": "true" }, h("chevron-icon", { key: '99d0dc5de95436ef6ca79421026debda57c32390', width: "16", height: "16" })), this.errorMessage && h("span", { class: "error help-text" }, this.errorMessage))));
    }
    static get is() { return "input-color-picker"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["input-color-picker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["input-color-picker.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the dropdown"
                },
                "attribute": "name",
                "reflect": false
            },
            "defaultSelectedColor": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default selected color"
                },
                "attribute": "default-selected-color",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "selectedColor": {},
            "isOpen": {},
            "ariaActivedescendant": {},
            "errorMessage": {}
        };
    }
    static get events() {
        return [{
                "method": "nylasFormDropdownChanged",
                "name": "nylasFormDropdownChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected option is changed"
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    error?: string;\n    label?: string;\n  }",
                    "resolved": "{ value: string; name: string; error?: string | undefined; label?: string | undefined; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "click",
                "method": "handleOutsideClick",
                "target": "document",
                "capture": true,
                "passive": false
            }];
    }
}
//# sourceMappingURL=input-color-picker.js.map
