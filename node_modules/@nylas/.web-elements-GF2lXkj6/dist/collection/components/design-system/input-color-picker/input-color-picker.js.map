{"version":3,"file":"input-color-picker.js","sourceRoot":"","sources":["../../../../src/components/design-system/input-color-picker/input-color-picker.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Listen, Prop, State } from '@stencil/core';\n\n/**\n * The `input-color-picker` component is a dropdown that allows users to select an accent color from either RGB inputs or an interactive color picker and converts them to a hex value.\n * This component is used in the scheduling form to input dropdown type inputs.\n * @part icp_color-picker - The dropdown container\n * @part icp_color-picker-button - The dropdown button\n * @part icp_color-picker-button-selected-label - The selected option label\n * @part icp_color-picker-label - The dropdown label\n */\n@Component({\n  tag: 'input-color-picker',\n  styleUrl: 'input-color-picker.scss',\n  shadow: true,\n})\nexport class InputColorPicker {\n  @Element() el!: HTMLElement;\n  private readonly componentType: string = 'color-picker';\n\n  private inputRef?: HTMLInputElement;\n\n  // Props\n  /**\n   * The name of the dropdown\n   */\n  @Prop() name!: string;\n  /**\n   * The default selected color\n   */\n  @Prop({ attribute: 'default-selected-color' }) defaultSelectedColor?: string;\n\n  // States\n  /**\n   * The selected option\n   */\n  @State() selectedColor: string | undefined = this.defaultSelectedColor;\n  /**\n   * The open state of the dropdown\n   */\n  @State() isOpen: boolean = false;\n  /**\n   * The aria-activedescendant attribute for the listbox element to indicate the currently active\n   * option in the list box to screen readers. The value of aria-activedescendant is the ID of\n   * the active option.\n   */\n  @State() ariaActivedescendant: string = '';\n\n  /**\n   * The error message to display when the value is empty or null and the dropdown is required\n   */\n  @State() errorMessage: string = '';\n\n  // Events\n  /**\n   * This event is fired when the selected option is changed\n   */\n  @Event({ bubbles: true, composed: true }) nylasFormDropdownChanged!: EventEmitter<{\n    value: string;\n    name: string;\n    error?: string;\n    label?: string;\n  }>;\n\n  // Lifecycle events\n  componentWillLoad() {\n    this.selectedColor = this.defaultSelectedColor;\n    this.el.setAttribute('component-type', this.componentType);\n  }\n\n  // Methods\n  handleFocus() {\n    this.isOpen = true;\n  }\n  handleBlur() {\n    this.isOpen = false;\n  }\n\n  // handle input separately from change to allow for live updates in label\n  handleInput(event: Event) {\n    this.selectedColor = (event.target as HTMLInputElement).value;\n  }\n\n  handleChange(event: Event) {\n    this.selectedColor = (event.target as HTMLInputElement).value;\n    this.nylasFormDropdownChanged.emit({\n      value: this.selectedColor,\n      name: this.name,\n      error: this.errorMessage,\n    });\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.code === 'Enter' || event.code === 'Space') {\n      event.preventDefault();\n      this.inputRef?.click();\n    }\n  }\n\n  // Event listeners\n  @Listen('click', { target: 'document', capture: true })\n  handleOutsideClick(event: MouseEvent) {\n    // Get the path of the event\n    const path = event.composedPath();\n    const isClickInside = path.includes(this.el);\n\n    if (!isClickInside && this.isOpen) {\n      this.isOpen = false;\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"color-picker-container\" part=\"icp_color-picker\" tabindex=\"0\" onKeyDown={e => this.handleKeyDown(e)}>\n        <input\n          type=\"color\"\n          ref={el => (this.inputRef = el as HTMLInputElement)}\n          id={this.name}\n          name={this.name}\n          value={this.selectedColor}\n          tabindex=\"-1\"\n          onFocus={() => this.handleFocus()}\n          onBlur={() => this.handleBlur()}\n          onInput={e => this.handleInput(e)}\n          onChange={e => this.handleChange(e)}\n          onKeyDown={e => this.handleKeyDown(e)}\n        />\n        <label\n          part=\"icp_color-picker-button\"\n          htmlFor={this.name}\n          class={{ labelBtn: true, open: this.isOpen, error: !!this.errorMessage }}\n          aria-haspopup=\"listbox\"\n          aria-expanded={this.isOpen ? 'true' : 'false'}\n          aria-label={this.name}\n        >\n          <span class=\"selected-option\" part=\"icp_color-picker-button-selected-label\">\n            {this.selectedColor || 'Select a color'}\n          </span>\n          <span\n            class={{\n              open: this.isOpen,\n              closed: !this.isOpen,\n              chevron: true,\n            }}\n            aria-hidden=\"true\"\n          >\n            <chevron-icon width=\"16\" height=\"16\" />\n          </span>\n          {this.errorMessage && <span class=\"error help-text\">{this.errorMessage}</span>}\n        </label>\n      </div>\n    );\n  }\n}\n"]}