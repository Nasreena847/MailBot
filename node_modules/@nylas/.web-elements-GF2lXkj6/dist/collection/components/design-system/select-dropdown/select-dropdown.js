import { h } from "@stencil/core";
export class SelectDropdown {
    constructor() {
        this.componentType = 'select-dropdown';
        this.name = undefined;
        this.options = [];
        this.defaultSelectedOption = null;
        this.withSearch = true;
        this.label = undefined;
        this.required = false;
        this.pluralizedLabel = '';
        this.dropdownButtonText = undefined;
        this.withChevron = true;
        this.selectedOption = undefined;
        this.isOpen = false;
        this.searchValue = '';
        this.filteredOptions = [...this.options];
        this.ariaActivedescendant = '';
        this.errorMessage = '';
    }
    optionsChangedHandler(newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        this.filteredOptions = newValue;
    }
    defaultSelectedOptionChangedHandler(newValue, oldValue) {
        if (typeof newValue === 'undefined' || newValue?.label === oldValue?.label) {
            return;
        }
        this.selectedOption = newValue;
        this.nylasFormDropdownDefaultSelected.emit({
            value: newValue?.value || '',
            name: this.name,
            error: this.errorMessage,
            label: this.label,
        });
    }
    componentWillLoad() {
        this.el.setAttribute('component-type', this.componentType);
    }
    componentDidLoad() {
        this.filteredOptions = this.options;
        this.selectedOption = this.defaultSelectedOption;
        if (!this.selectedOption && this.options.length > 0) {
            this.selectedOption = this.options[0];
        }
        this.nylasFormDropdownDefaultSelected.emit({
            value: this.selectedOption?.value || '',
            name: this.name,
            error: this.errorMessage,
            label: this.label,
        });
    }
    handleBookingFormSubmitted(event) {
        this.validate(this.selectedOption?.value || '');
        if (this.errorMessage) {
            event.preventDefault();
        }
    }
    validate(value) {
        if (this.required && !value) {
            this.errorMessage = `${this.label} is required.`;
        }
        else {
            this.errorMessage = '';
        }
    }
    toggleDropdown() {
        this.isOpen = !this.isOpen;
    }
    filterOptions(event) {
        const value = event.target.value;
        this.searchValue = value;
        this.filteredOptions = this.options.filter(option => option.label.toLowerCase().includes(value.toLowerCase()));
    }
    selectOption(option) {
        this.errorMessage = '';
        this.selectedOption = option;
        this.toggleDropdown();
        this.nylasFormDropdownChanged.emit({
            value: option.value,
            name: this.name,
            error: this.errorMessage,
            label: this.label,
        });
    }
    handleSelectButtonKeyDown(event) {
        switch (event.key) {
            case 'ArrowDown':
            case 'Enter':
                event.preventDefault();
                if (!this.isOpen) {
                    this.toggleDropdown();
                }
                this.inputRef?.focus();
                break;
            case 'Escape':
                this.isOpen = false;
                break;
        }
    }
    handleListboxKeydown(e) {
        const items = this.filteredOptions;
        const currentIndex = items.findIndex(item => item.value === this.ariaActivedescendant);
        if (e.key === 'ArrowDown' || (e.key === 'Tab' && !e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === items.length - 1) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const nextIndex = currentIndex + 1 < items.length ? currentIndex + 1 : 0;
            this.ariaActivedescendant = items[nextIndex].value;
            this.focusOption(nextIndex);
        }
        else if (e.key === 'ArrowUp' || (e.key === 'Tab' && e.shiftKey)) {
            e.preventDefault();
            if (currentIndex === 0) {
                this.ariaActivedescendant = '';
                this.inputRef?.focus();
                return;
            }
            const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
            this.ariaActivedescendant = items[prevIndex].value;
            this.focusOption(prevIndex);
        }
        else if (e.key === 'Enter') {
            e.preventDefault();
            if (this.ariaActivedescendant) {
                this.selectOption(items[currentIndex]);
            }
        }
        else if (e.key === 'Escape') {
            this.isOpen = false;
        }
    }
    focusOption(index) {
        const option = this.filteredOptions[index];
        if (!option)
            return;
        const elementId = option.value;
        const element = this.el.shadowRoot?.getElementById(elementId);
        if (element) {
            element.focus();
            element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }
    handleComboboxKeyDown(event) {
        if (event.key === 'ArrowDown' || (event.key == 'Tab' && !event.shiftKey)) {
            event.preventDefault();
            this.ariaActivedescendant = this.filteredOptions[0].value;
            this.focusOption(0);
        }
        else if (event.key === 'ArrowUp' || (event.key === 'Tab' && event.shiftKey)) {
            event.preventDefault();
            this.ariaActivedescendant = this.filteredOptions[this.filteredOptions.length - 1].value;
            this.focusOption(this.filteredOptions.length - 1);
        }
        else if (event.key === 'Escape') {
            this.isOpen = false;
        }
    }
    generateButtonText(option, dropButtonText) {
        if (dropButtonText) {
            return dropButtonText;
        }
        return option?.label ? `${option?.label + this.pluralizedLabel}` : '';
    }
    handleOutsideClick(event) {
        const path = event.composedPath();
        const isClickInside = path.includes(this.el);
        if (!isClickInside && this.isOpen) {
            this.isOpen = false;
        }
    }
    render() {
        const buttonText = this.generateButtonText(this.selectedOption, this.dropdownButtonText);
        return (h("div", { key: '4b724d892194708b2dcd0ed74c8e23486ba2b4f7', class: "dropdown", part: "sd_dropdown" }, h("label", { key: '06d33f4f5daa7c09eed054505989210e35c2beb5', part: "sd_dropdown_label", class: { error: !!this.errorMessage } }, this.label && (h("p", null, h("span", { class: "label" }, this.label), this.required && h("span", { class: "required" }, "*"))), h("button", { key: '8e5952f7e2a1279670304e82f329da3e8e60522a', part: "sd_dropdown-button", class: { dropbtn: true, open: this.isOpen, error: !!this.errorMessage }, onClick: () => this.toggleDropdown(), "aria-haspopup": "listbox", "aria-expanded": this.isOpen ? 'true' : 'false', "aria-label": this.name, onKeyDown: e => this.handleSelectButtonKeyDown(e) }, h("slot", { key: 'aece407da3b35858b9ec1248d09447706b3120cc', name: "select-icon", "aria-hidden": "true" }), h("span", { key: '55aae4a92f862c81533635999fb60693705cb12b', class: "selected-option", part: "sd_dropdown-button-selected-label" }, buttonText), this.withChevron && (h("span", { class: {
                open: this.isOpen,
                closed: !this.isOpen,
                chevron: true,
            }, "aria-hidden": "true" }, h("chevron-icon", { width: "16", height: "16" })))), this.errorMessage && h("span", { class: "error help-text" }, this.errorMessage)), this.isOpen ? (h("div", { class: "dropdown-content", part: "sd_dropdown-content" }, this.withSearch && (h("div", { class: { 'search-box': true, 'open': this.isOpen } }, h("search-icon", { width: "15", height: "15", class: 'icon' }), h("input", { type: "text", role: "combobox", placeholder: "Search", value: this.searchValue, ref: el => (this.inputRef = el), onInput: event => this.filterOptions(event), onKeyDown: e => this.handleComboboxKeyDown(e) }))), h("ul", { tabindex: "-1", role: "listbox", "aria-label": this.name, "aria-activedescendant": this.ariaActivedescendant, onKeyDown: e => this.handleListboxKeydown(e) }, this.filteredOptions.map(option => option.value.toString() ? (h("li", { tabindex: "0", key: option.value, id: option.value, onClick: () => this.selectOption(option), role: "option" }, option.labelHTML ? h("div", { part: "sd_dropdown-labelhtml" }, option.labelHTML) : option.label)) : null)))) : null));
    }
    static get is() { return "select-dropdown"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["select-dropdown.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["select-dropdown.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the dropdown"
                },
                "attribute": "name",
                "reflect": false
            },
            "options": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DropdownOption[]",
                    "resolved": "DropdownOption[]",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The options to display in the dropdown"
                },
                "defaultValue": "[]"
            },
            "defaultSelectedOption": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DropdownOption | null",
                    "resolved": "DropdownOption | null",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The default selected option"
                },
                "defaultValue": "null"
            },
            "withSearch": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Should show search input"
                },
                "attribute": "with-search",
                "reflect": false,
                "defaultValue": "true"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The label for the dropdown, skipped if no label is provided"
                },
                "attribute": "label",
                "reflect": false
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "If true, the dropdown is required for form submission"
                },
                "attribute": "required",
                "reflect": false,
                "defaultValue": "false"
            },
            "pluralizedLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Show pluralized label for the selected option. This is s tring that is appended to the selected option label as a suffix."
                },
                "attribute": "pluralized-label",
                "reflect": false,
                "defaultValue": "''"
            },
            "dropdownButtonText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Overrides the select dropdown to be used as a button with dropdownButtonText representing actions &  dropdownText name on the dropdown intead of selected value"
                },
                "attribute": "dropdown-button-text",
                "reflect": false
            },
            "withChevron": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Should show chevron on button"
                },
                "attribute": "with-chevron",
                "reflect": false,
                "defaultValue": "true"
            }
        };
    }
    static get states() {
        return {
            "selectedOption": {},
            "isOpen": {},
            "searchValue": {},
            "filteredOptions": {},
            "ariaActivedescendant": {},
            "errorMessage": {}
        };
    }
    static get events() {
        return [{
                "method": "nylasFormDropdownChanged",
                "name": "nylasFormDropdownChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected option is changed"
                },
                "complexType": {
                    "original": "{\n    value: DropdownOption['value'];\n    name: string;\n    error?: string;\n    label?: string;\n  }",
                    "resolved": "{ value: string; name: string; error?: string | undefined; label?: string | undefined; }",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                }
            }, {
                "method": "nylasFormDropdownDefaultSelected",
                "name": "nylasFormDropdownDefaultSelected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the default selected option is set, on component load"
                },
                "complexType": {
                    "original": "{\n    value: DropdownOption['value'];\n    name: string;\n    error?: string;\n    label?: string;\n  }",
                    "resolved": "{ value: string; name: string; error?: string | undefined; label?: string | undefined; }",
                    "references": {
                        "DropdownOption": {
                            "location": "global",
                            "id": "global::DropdownOption"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "options",
                "methodName": "optionsChangedHandler"
            }, {
                "propName": "defaultSelectedOption",
                "methodName": "defaultSelectedOptionChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "bookingFormSubmitted",
                "method": "handleBookingFormSubmitted",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "click",
                "method": "handleOutsideClick",
                "target": "document",
                "capture": true,
                "passive": false
            }];
    }
}
//# sourceMappingURL=select-dropdown.js.map
