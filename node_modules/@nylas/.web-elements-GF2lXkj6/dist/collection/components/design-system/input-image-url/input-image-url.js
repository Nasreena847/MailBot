var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, isValidImage } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class InputImageUrl {
    constructor() {
        this.componentType = 'image-url';
        this.imageUrl = '';
        this.errorMessage = '';
        this.name = 'input-image-url';
        this.currentImageUrl = this.imageUrl;
    }
    connectedCallback() {
        debug('nylas-image-input', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-image-input', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-image-input', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.host.setAttribute('component-type', this.componentType);
    }
    componentDidLoad() {
        debug('nylas-image-input', 'componentDidLoad');
        this.currentImageUrl = this.imageUrl;
        this.setImage(this.imageUrl);
    }
    componentWillUpdate() {
        debug('nylas-image-input', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-image-input', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-image-input', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-image-input', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-image-input', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    async nylasFormInputChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === this.name) {
            this.setImage(value);
        }
    }
    async nylasFormInputBlurHandler(event) {
        const { name, value } = event.detail;
        if (name === this.name) {
            this.setImage(value);
        }
    }
    setImage(value) {
        this.errorMessage = '';
        isValidImage(value)
            .then(() => {
            this.currentImageUrl = value;
            this.internals.setValidity({});
            this.internals.setFormValue(this.currentImageUrl, this.name);
            this.valueChanged.emit({ value: this.currentImageUrl, name: this.name });
        })
            .catch(() => {
            this.internals.setValidity({ customError: true }, 'Invalid image URL.');
            this.errorMessage = 'Invalid image URL.';
        });
    }
    render() {
        return (h(Host, { key: 'c8569ab945369f897bc13436ecdee791b5204484' }, h("div", { key: '2a48916d7d61bb62cdb2f7e2cf690746c3c08db2', class: "logo-container" }, h("div", { key: '39494f8e807bbddd67fbb7148cfac66c00a00b49', class: "input-container" }, h("input-component", { key: '1a4a4c588a0e40e44858ea295b2e0467b8be4116', name: this.name, id: this.name, type: "text", required: false, exportparts: "ic_input: iiu__logo-input-textfield", defaultValue: this.imageUrl ?? '' }), this.errorMessage && h("span", { class: "error-message" }, this.errorMessage)), this.currentImageUrl && !this.errorMessage && (h("div", { class: "logo" }, h("img", { src: this.currentImageUrl, alt: "Logo" }))))));
    }
    static get is() { return "input-image-url"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["input-image-url.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["input-image-url.css"]
        };
    }
    static get properties() {
        return {
            "imageUrl": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Image"
                },
                "attribute": "image-url",
                "reflect": false,
                "defaultValue": "''"
            },
            "errorMessage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Error message to display when the image URL is invalid."
                },
                "attribute": "error-message",
                "reflect": false,
                "defaultValue": "''"
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the component"
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'input-image-url'"
            }
        };
    }
    static get states() {
        return {
            "currentImageUrl": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the image URL is changed"
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormInputChanged",
                "method": "nylasFormInputChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormInputBlurred",
                "method": "nylasFormInputBlurHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-image-input',
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], InputImageUrl.prototype, "render", null);
//# sourceMappingURL=input-image-url.js.map
