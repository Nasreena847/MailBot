{"version":3,"file":"input-image-url.js","sourceRoot":"","sources":["../../../../src/components/design-system/input-image-url/input-image-url.tsx"],"names":[],"mappings":"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","sourcesContent":["import { RegisterComponent } from '@/common/register-component';\nimport { NylasSchedulerConfigConnector } from '@/connector/nylas-scheduler-config-connector';\nimport { debug, isValidImage } from '@/utils/utils';\nimport { AttachInternals, Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasSchedulerEditor } from '../../scheduler-editor/nylas-scheduler-editor/nylas-scheduler-editor';\n\n/**\n * The `nylas-image-input` component is a UI component that allows users input an image URL and see a preview of the image.\n *\n * @part iiu__logo-input-textfield - The image input textfield\n */\n@Component({\n  tag: 'input-image-url',\n  styleUrl: 'input-image-url.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class InputImageUrl {\n  @Element() host!: HTMLInputImageUrlElement;\n  private readonly componentType: string = 'image-url';\n\n  /**\n   * Image\n   */\n  @Prop({ attribute: 'image-url' }) imageUrl: string = '';\n  /**\n   * Error message to display when the image URL is invalid.\n   */\n  @Prop() errorMessage: string = '';\n  /**\n   * The name of the component\n   */\n  @Prop() name: string = 'input-image-url';\n  /**\n   * The element internals.\n   */\n  @AttachInternals() internals!: ElementInternals;\n\n  /**\n   * The current image URL state.\n   */\n  @State() currentImageUrl: string = this.imageUrl;\n\n  /**\n   * This event is fired when the image URL is changed\n   */\n  @Event() valueChanged!: EventEmitter<{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }>;\n\n  // Lifecycle methods\n  connectedCallback() {\n    debug('nylas-image-input', 'connectedCallback');\n  }\n\n  disconnectedCallback() {\n    debug('nylas-image-input', 'disconnectedCallback');\n  }\n\n  componentWillLoad() {\n    debug('nylas-image-input', 'componentWillLoad');\n    // See comment in the @Watch('name') decorator for more information.\n    this.host.setAttribute('name', this.name);\n    this.host.setAttribute('component-type', this.componentType);\n  }\n\n  componentDidLoad() {\n    debug('nylas-image-input', 'componentDidLoad');\n    this.currentImageUrl = this.imageUrl;\n    this.setImage(this.imageUrl);\n  }\n\n  componentWillUpdate() {\n    debug('nylas-image-input', 'componentWillUpdate');\n  }\n\n  componentDidUpdate() {\n    debug('nylas-image-input', 'componentDidUpdate');\n  }\n\n  componentWillRender() {\n    debug('nylas-image-input', 'componentWillRender');\n  }\n\n  componentDidRender() {\n    debug('nylas-image-input', 'componentDidRender');\n  }\n\n  /**\n   * When a name prop is passed, stencil does not automatically set the name attribute on the host element.\n   * Since this component is form-associated, the name attribute is required for form submission.\n   * This is a workaround to ensure that the name attribute is set on the host element.\n   */\n  @Watch('name')\n  elementNameChangedHandler(newValue: string) {\n    debug('nylas-image-input', 'elementNameChangedHandler', newValue);\n    this.host.setAttribute('name', newValue);\n  }\n\n  @Listen('nylasFormInputChanged')\n  async nylasFormInputChangedHandler(event: CustomEvent<{ value: string; name: string }>) {\n    const { name, value } = event.detail;\n\n    if (name === this.name) {\n      this.setImage(value);\n    }\n  }\n\n  @Listen('nylasFormInputBlurred')\n  async nylasFormInputBlurHandler(event: CustomEvent<{ value: string; name: string }>) {\n    const { name, value } = event.detail;\n\n    if (name === this.name) {\n      this.setImage(value);\n    }\n  }\n\n  setImage(value: string) {\n    this.errorMessage = '';\n\n    isValidImage(value)\n      .then(() => {\n        this.currentImageUrl = value;\n\n        this.internals.setValidity({});\n        this.internals.setFormValue(this.currentImageUrl, this.name);\n        this.valueChanged.emit({ value: this.currentImageUrl, name: this.name });\n      })\n      .catch(() => {\n        this.internals.setValidity({ customError: true }, 'Invalid image URL.');\n        this.errorMessage = 'Invalid image URL.';\n      });\n  }\n\n  @RegisterComponent<InputImageUrl, NylasSchedulerConfigConnector, Exclude<NylasSchedulerEditor['stores'], undefined>>({\n    name: 'nylas-image-input',\n    eventToProps: {\n      valueChanged: async (\n        event: CustomEvent<{ value: string; name: string; valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void }>,\n        _nylasSchedulerConfigConnector: NylasSchedulerConfigConnector,\n      ) => {\n        const { valueChanged } = event.detail;\n        // If a handler is passed, call it.\n        if (valueChanged) {\n          valueChanged(event);\n        }\n      },\n    },\n  })\n  render() {\n    return (\n      <Host>\n        <div class=\"logo-container\">\n          <div class=\"input-container\">\n            <input-component name={this.name} id={this.name} type=\"text\" required={false} exportparts=\"ic_input: iiu__logo-input-textfield\" defaultValue={this.imageUrl ?? ''} />\n            {this.errorMessage && <span class=\"error-message\">{this.errorMessage}</span>}\n          </div>\n\n          {this.currentImageUrl && !this.errorMessage && (\n            <div class=\"logo\">\n              <img src={this.currentImageUrl} alt=\"Logo\" />\n            </div>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}