{"version":3,"file":"textarea-component.js","sourceRoot":"","sources":["../../../../src/components/design-system/textarea-component/textarea-component.tsx"],"names":[],"mappings":"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","sourcesContent":["import { sanitize } from '@/utils/utils';\nimport { Component, h, Prop, State, Event, EventEmitter, Listen } from '@stencil/core';\n\n/**\n * `textarea-component` allows users to enter multiline text.\n * It is ideal for larger inputs like comments or messages in a form.\n * This component is used in the scheduling form to input multiline text.\n *\n * @part tc__label - The label for the textarea.\n * @part tc__textarea - The textarea element.\n */\n@Component({\n  tag: 'textarea-component',\n  styleUrl: 'textarea-component.scss',\n  shadow: true,\n})\nexport class TextareaComponent {\n  /**\n   * The name of the textarea, important for form submissions.\n   */\n  @Prop() name: string = 'textarea';\n\n  /**\n   * The default value of the textarea, appearing when the component first renders.\n   */\n  @Prop() defaultValue?: string;\n\n  /**\n   * The label for the textarea, displayed above it.\n   */\n  @Prop() label: string = '';\n\n  /**\n   * Placeholder text shown in the textarea when it is empty.\n   */\n  @Prop() placeholder: string = '';\n\n  /**\n   * Specifies if the textarea is required for form submission.\n   * If true, an error message shows if left empty.\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * If true, the textarea cannot be edited by the user.\n   */\n  @Prop() readOnly: boolean = false;\n\n  /**\n   * Automatically focus the textarea when the component loads.\n   */\n  @Prop() autoFocus: boolean = false;\n\n  /**\n   * The maximum number of characters allowed in the textarea.\n   */\n  @Prop() maxLength: number = 255;\n\n  /**\n   * The type\n   */\n  @Prop() type: string = 'multi_line_text';\n\n  /**\n   * The content of the label's tooltip\n   */\n  @Prop() tooltip: string = '';\n\n  /**\n   * State for the current value of the textarea.\n   */\n  @State() value: string = '';\n\n  /**\n   * State for managing the display of any error messages.\n   */\n  @State() error: string = '';\n\n  /**\n   * Event emitted when the value of the textarea changes.\n   * Useful for parent components to capture user input.\n   */\n  @Event() nylasFormInputChanged!: EventEmitter<{ value: string; name: string; error: string; label: string; type: string }>;\n\n  /**\n   * Lifecycle method that runs before the component loads.\n   * It sets the initial value and cleans it using sanitize-html.\n   */\n  componentDidLoad() {\n    this.value = sanitize(this.defaultValue || '');\n  }\n\n  // Event listeners\n  /**\n   * Listen for the bookingFormSubmitted event to validate the input value when the form is submitted.\n   */\n  @Listen('bookingFormSubmitted', { target: 'document' })\n  handleBookingFormSubmitted(event: CustomEvent) {\n    this.validate(this.value);\n    if (this.error) {\n      event.preventDefault();\n    }\n  }\n\n  @Listen('triggerValidation', { target: 'document' })\n  handletriggerValidation(event: CustomEvent) {\n    this.validate(this.value);\n    if (this.error) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Handles user input in the textarea, updating the value and emitting an event.\n   */\n  handleInput(e: Event) {\n    const inputElement = e.target as HTMLTextAreaElement;\n    this.value = sanitize(inputElement.value);\n    this.nylasFormInputChanged.emit({\n      value: this.value,\n      name: this.name,\n      error: this.error,\n      label: this.label,\n      type: this.type,\n    });\n  }\n\n  /**\n   * Validates the textarea value based on the required prop and maxLength.\n   * If the value is invalid, an error message is displayed.\n   */\n  validate(value: string) {\n    if (this.required && !value) {\n      this.error = `${this.label} is required.`;\n    } else if (value.length > this.maxLength) {\n      this.error = `${this.label} cannot exceed ${this.maxLength} characters.`;\n    } else {\n      this.error = '';\n    }\n  }\n\n  /**\n   * Renders the component UI including the label, textarea, and any error messages.\n   */\n  render() {\n    return (\n      <label part=\"tc__label\" class={{ error: !!this.error }}>\n        <p>\n          <span class=\"label\">{this.label}</span>\n          {this.required && <span class=\"required\">*</span>}\n          {this.tooltip && (\n            <tooltip-component>\n              <info-icon slot=\"tooltip-icon\" />\n              <span slot=\"tooltip-content\">{this.tooltip}</span>\n            </tooltip-component>\n          )}\n        </p>\n        <textarea\n          name={this.name}\n          placeholder={this.placeholder}\n          readOnly={this.readOnly}\n          autoFocus={this.autoFocus}\n          value={this.value}\n          maxLength={this.maxLength}\n          onInput={e => this.handleInput(e)}\n          class={{ error: !!this.error }}\n          part=\"tc__textarea\"\n        />\n        {this.error && <span class=\"error help-text\">{this.error}</span>}\n      </label>\n    );\n  }\n}\n"]}