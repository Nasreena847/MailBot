{"version":3,"file":"nylas-selected-event-card.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler/nylas-selected-event-card/test/nylas-selected-event-card.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,sBAAsB,EAAE,MAAM,8BAA8B,CAAC;AACtE,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,SAAS,UAAU,CAAC,IAAI;IACtB,IAAI,CAAC,CAAC,IAAI,YAAY,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;QACrD,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAEvC,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC;IACnB,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;IAE3B,MAAM,gBAAgB,GAAG,OAAO,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAEtF,MAAM,aAAa,GAAG,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,gBAAgB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;IACrH,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,UAAU,CAAC,GAAG,EAAE;QAEd,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,MAAM,YAAY,GAAG,IAAI,CAAC;QAE1B,MAAM,CAAC,IAAI,GAAG;YACZ,GAAG,YAAY;YACf,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;gBAClD,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC;oBACtB,QAAQ,EAAE,kBAAkB;iBAC7B,CAAC;gBACF,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnC,kBAAkB,EAAE,IAAI,CAAC,EAAE,EAAE;aAC9B,CAAC,CAAQ;SACX,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,sBAAsB,CAAC;YACpC,IAAI,EAAE,yDAAyD;SAChE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,gBAAgB,GAAG,EAAE,UAAU,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;QAClI,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACtD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,sBAAsB,CAAC;YACpC,QAAQ,EAAE,GAAG,EAAE;gBACb,OAAO,iCAA2B,gBAAgB,EAAE,gBAAgB,EAAE,YAAY,EAAE,YAAY,GAAI,CAAC;YACvG,CAAC;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,WAAW,GAAG,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,aAAa,CAAC,qBAAqB,CAAmB,CAAC;QACnG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,6BAA6B,CAAC,CAAC;QAEzE,MAAM,WAAW,GAAG,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,aAAa,CAAC,qBAAqB,CAAmB,CAAC;QACnG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasSelectedEventCard } from '../nylas-selected-event-card';\nimport { h } from '@stencil/core';\nfunction formatTime(date) {\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\n    return '';\n  }\n  let hours = date.getHours();\n  const minutes = date.getMinutes();\n  const ampm = hours >= 12 ? 'PM' : 'AM';\n\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n\n  const formattedMinutes = minutes < 10 ? '0' + minutes.toString() : minutes.toString();\n\n  const formattedTime = `${hours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')} ${ampm}`;\n  return formattedTime;\n}\n\ndescribe('nylas-selected-event-card', () => {\n  beforeEach(() => {\n    // Clear and reset the mock before each test if needed\n    jest.clearAllMocks();\n    const originalIntl = Intl;\n\n    global.Intl = {\n      ...originalIntl,\n      DateTimeFormat: jest.fn().mockImplementation(() => ({\n        resolvedOptions: () => ({\n          timeZone: 'America/New_York',\n        }),\n        format: jest.fn(x => formatTime(x)),\n        supportedLocalesOf: jest.fn(),\n      })) as any,\n    };\n  });\n\n  it('renders correctly with initial props', async () => {\n    const page = await newSpecPage({\n      components: [NylasSelectedEventCard],\n      html: `<nylas-selected-event-card></nylas-selected-event-card>`,\n    });\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('updates time display when selectedTimeslot changes', async () => {\n    const selectedTimeslot = { start_time: new Date('2021-01-01T09:00:00Z'), end_time: new Date('2021-01-01T10:00:00Z'), emails: [] };\n    const selectedDate = new Date('2021-01-01T00:00:00Z');\n    const page = await newSpecPage({\n      components: [NylasSelectedEventCard],\n      template: () => {\n        return <nylas-selected-event-card selectedTimeslot={selectedTimeslot} selectedDate={selectedDate} />;\n      },\n    });\n\n    if (!page.root) {\n      throw new Error('Component did not render.');\n    }\n\n    await page.waitForChanges();\n\n    const dateDisplay = page?.root?.shadowRoot?.querySelector('[part=\"nsec__date\"]') as HTMLDivElement;\n    expect(dateDisplay.textContent).toContain('Thursday, December 31, 2020');\n\n    const timeDisplay = page?.root?.shadowRoot?.querySelector('[part=\"nsec__time\"]') as HTMLDivElement;\n    expect(timeDisplay.textContent).toContain('9:00 AM - 10:00 AM');\n  });\n});\n"]}