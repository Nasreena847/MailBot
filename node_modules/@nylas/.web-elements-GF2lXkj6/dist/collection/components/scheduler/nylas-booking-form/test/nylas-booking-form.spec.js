import { newSpecPage } from "@stencil/core/testing";
import { NylasBookingForm } from "../nylas-booking-form";
import { InputComponent } from "../../../design-system/input-component/input-component";
describe('nylas-booking-form', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    let consoleErrorSpy;
    beforeEach(() => {
        consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => { });
    });
    afterEach(() => {
        consoleErrorSpy.mockRestore();
    });
    it('renders correctly with initial props', async () => {
        const bookingInfo = {
            primaryParticipant: {
                name: 'John Doe',
                email: 'john.doe@example.com',
            },
        };
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.bookingInfo = bookingInfo;
        await page.waitForChanges();
        expect(page.rootInstance.name).toEqual('John Doe');
        expect(page.rootInstance.email).toEqual('john.doe@example.com');
        expect(page.root).toMatchSnapshot();
    });
    it('renders an email error message when email is invalid', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]')?.shadowRoot?.querySelector('input');
        nameInput.value = 'John Doe';
        nameInput.dispatchEvent(new Event('input'));
        const emailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="email"]')?.shadowRoot?.querySelector('input');
        emailInput.value = 'invalid-email';
        emailInput.dispatchEvent(new Event('input'));
        const form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        const errorMessage = page?.root?.shadowRoot
            ?.querySelector('.input-wrapper:nth-child(2) [part="nbf__input-textfield"][id="email"]')
            ?.shadowRoot?.querySelector('.help-text');
        console.debug(errorMessage.className);
        expect(errorMessage.textContent).toBe('Email has invalid format.');
    });
    it('renders correctly with additional fields from the config', async () => {
        const configSettings = {
            scheduler: {
                available_days_in_future: 30,
                min_cancellation_notice: 0,
                min_booking_notice: 60,
                hide_rescheduling_options: false,
                hide_cancellation_options: false,
                hide_additional_guests: false,
                additional_fields: {
                    additional_email: {
                        label: 'Additional email',
                        type: 'email',
                        required: false,
                        order: 2,
                    },
                    checkbox: {
                        label: 'Checkbox Label',
                        type: 'checkbox',
                        required: false,
                        order: 6,
                    },
                    dropdown: {
                        label: 'Dropdown Label',
                        type: 'dropdown',
                        required: false,
                        order: 3,
                        options: ['Yes', 'No'],
                    },
                    long_text: {
                        label: 'Long text Label',
                        type: 'multi_line_text',
                        required: false,
                        order: 5,
                    },
                    phone_number: {
                        label: 'Phone Number',
                        type: 'phone_number',
                        required: false,
                        order: 1,
                    },
                    radio_button: {
                        label: 'Radio Button Label',
                        type: 'radio_button',
                        required: false,
                        order: 7,
                        options: ['Yes', 'No'],
                    },
                    short_text: {
                        label: 'Short Text Label',
                        type: 'text',
                        required: false,
                        order: 4,
                    },
                },
                email_template: {
                    booking_confirmed: {},
                },
            },
            organizer: {
                email: 'pooja.g@nylas.com',
                name: 'Pooja Guggari',
            },
        };
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        if (!page.root) {
            throw new Error('Component did not render.');
        }
        page.root.configSettings = configSettings;
        await page.waitForChanges();
        expect(page.root).toMatchSnapshot();
        const additionalEmailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="additional_email"]');
        additionalEmailInput.value = 'abcd@gmail.com';
        page.root?.dispatchEvent(new CustomEvent('nylasFormInputChanged', {
            detail: {
                value: additionalEmailInput.value,
                name: 'additional_email',
                error: '',
                label: 'Additional email',
            },
        }));
        const checkboxInput = page?.root?.shadowRoot?.querySelector('[part="nbf__checkbox-component"][id="checkbox"]');
        checkboxInput.checked = true;
        page.root?.dispatchEvent(new CustomEvent('nylasFormCheckboxToggled', {
            detail: {
                checked: checkboxInput.checked,
                name: 'checkbox',
                error: '',
                label: 'Checkbox Label',
            },
        }));
        await page.waitForChanges();
        expect(page.rootInstance.additionalFields).toEqual({ additional_email: 'abcd@gmail.com', checkbox: 'true' });
    });
    xit('renders guest email input on add guest button click', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest');
        addGuestButton.click();
        await page.waitForChanges();
        const guestEmailInputs = page?.root?.shadowRoot?.querySelectorAll('[part="nbf__input-textfield"][id^="guest-email-"]');
        expect(guestEmailInputs.length).toEqual(1);
    });
    xit('allows multiple guest emails to be added', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest');
        addGuestButton.click();
        addGuestButton.click();
        await page.waitForChanges();
        const guestEmailInputs = page?.root?.shadowRoot?.querySelectorAll('[id^="guest-email-"]');
        expect(guestEmailInputs.length).toBe(2);
    });
    xit('removes a guest email input on remove button click', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest');
        addGuestButton.click();
        addGuestButton.click();
        await page.waitForChanges();
        const removeGuestButton = page?.root?.shadowRoot?.querySelector('.remove-guest');
        removeGuestButton.click();
        await page.waitForChanges();
        const guestEmailInputs = page?.root?.shadowRoot?.querySelectorAll('[id^="guest-email-"]');
        expect(guestEmailInputs.length).toBe(1);
    });
    it('emits nameChanged and emailChanged events on input change', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameChangedSpy = jest.fn();
        const emailChangedSpy = jest.fn();
        page.win.addEventListener('nameChanged', nameChangedSpy);
        page.win.addEventListener('emailChanged', emailChangedSpy);
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]')?.shadowRoot?.querySelector('label input');
        nameInput.value = 'John Doe';
        page.root?.dispatchEvent(new CustomEvent('nylasFormInputChanged', {
            detail: {
                value: nameInput.value,
                name: 'name',
                error: '',
            },
        }));
        const emailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="email"]')?.shadowRoot?.querySelector('label input');
        emailInput.value = 'john.doe@example.com';
        page.root?.dispatchEvent(new CustomEvent('nylasFormInputChanged', {
            detail: {
                value: emailInput.value,
                name: 'email',
                error: '',
            },
        }));
        await page.waitForChanges();
        expect(nameChangedSpy.mock.calls[0][0].detail).toEqual('John Doe');
        expect(emailChangedSpy.mock.calls[0][0].detail).toEqual('john.doe@example.com');
    });
    it('emits backButtonClicked event on back button click', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const backButton = page?.root?.shadowRoot?.querySelector('.back');
        const backButtonClickedSpy = jest.fn();
        page.win.addEventListener('backButtonClicked', backButtonClickedSpy);
        backButton.click();
        await page.waitForChanges();
        expect(backButtonClickedSpy).toHaveBeenCalled();
    });
    it('on entering name input and focusing on email input there are no errors', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]')?.shadowRoot?.querySelector('input');
        const emailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="email"]')?.shadowRoot?.querySelector('input');
        nameInput.focus();
        nameInput.value = 'text';
        emailInput.focus();
        await page.waitForChanges();
        expect(consoleErrorSpy).not.toHaveBeenCalled();
    });
    it('validates name input correctly', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]')?.shadowRoot?.querySelector('input');
        nameInput.value = 'John Doe';
        nameInput.dispatchEvent(new Event('input'));
        const form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        let errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper [part="nbf__input-textfield"][id="name"]')?.shadowRoot?.querySelector('.help-text');
        expect(errorMessage).toBeNull();
        nameInput.value = '';
        nameInput.dispatchEvent(new Event('input'));
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper [part="nbf__input-textfield"][id="name"]')?.shadowRoot?.querySelector('.help-text');
        expect(errorMessage.textContent).toBe('Name is required.');
    });
    it('validates email input correctly', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]')?.shadowRoot?.querySelector('label input[name="name"]');
        nameInput.value = 'John Doe';
        nameInput.dispatchEvent(new Event('input'));
        const emailInput = page?.root?.shadowRoot
            ?.querySelector('[part="nbf__input-textfield"][id="email"]')
            ?.shadowRoot?.querySelector('label input[name="email"]');
        emailInput.value = 'john.doe@example.com';
        emailInput.dispatchEvent(new Event('input'));
        let form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        let errorMessage = page?.root?.shadowRoot
            ?.querySelector('.input-wrapper:nth-child(2) [part="nbf__input-textfield"][id="email"]')
            ?.shadowRoot?.querySelector('.help-text');
        await page.waitForChanges();
        expect(errorMessage).toBeNull();
        emailInput.value = '';
        emailInput.dispatchEvent(new Event('input'));
        await page.waitForChanges();
        form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        errorMessage = page?.root?.shadowRoot
            ?.querySelector('.input-wrapper:nth-child(2) [part="nbf__input-textfield"][id="email"]')
            ?.shadowRoot?.querySelector('.help-text');
        expect(errorMessage.textContent).toBe('Email is required.');
    });
    xit('validates guest email inputs correctly', async () => {
        const page = await newSpecPage({
            components: [NylasBookingForm, InputComponent],
            html: `<nylas-booking-form></nylas-booking-form>`,
        });
        const nameInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="name"]')?.shadowRoot?.querySelector('input');
        nameInput.value = 'John Doe';
        nameInput.dispatchEvent(new Event('input'));
        const emailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id="email"]')?.shadowRoot?.querySelector('input');
        emailInput.value = 'john.doe@example.com';
        emailInput.dispatchEvent(new Event('input'));
        const addGuestButton = page?.root?.shadowRoot?.querySelector('.add-guest');
        addGuestButton.click();
        await page.waitForChanges();
        const guestEmailInput = page?.root?.shadowRoot?.querySelector('[part="nbf__input-textfield"][id^="guest-email-0"]');
        guestEmailInput.dispatchEvent(new Event('blur'));
        await page.waitForChanges();
        let errorMessage = page?.root?.shadowRoot?.querySelector('.input-wrapper:nth-child(3) .button-wrapper .help-text');
        expect(errorMessage.textContent).toBe('Email is required.');
        guestEmailInput.value = 'invalid-email';
        guestEmailInput.dispatchEvent(new Event('input'));
        let form = page?.root?.shadowRoot?.querySelector('form');
        form.dispatchEvent(new Event('submit'));
        await page.waitForChanges();
        expect(errorMessage.textContent).toBe('Invalid format. ');
    });
});
//# sourceMappingURL=nylas-booking-form.spec.js.map
