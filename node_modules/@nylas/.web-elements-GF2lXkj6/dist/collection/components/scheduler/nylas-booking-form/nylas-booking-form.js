var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { Host, h } from "@stencil/core";
import { RegisterComponent } from "../../../common/register-component";
import { debug, sanitize } from "../../../utils/utils";
import sanitizeHtml from "sanitize-html";
import i18next from "../../../utils/i18n";
const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
export class NylasBookingForm {
    constructor() {
        this.handleGuestChange = (guestIndex, email) => {
            this.resetGuestEmailError(guestIndex);
            const guests = [...this.guestEmails];
            guests[guestIndex] = sanitizeHtml(email);
            this.guestEmails = [...guests];
        };
        this.handleGuestBlur = (guestIndex, email) => {
            this.resetGuestEmailError(guestIndex);
            if (email === '') {
                this.guestEmailErrors[guestIndex] = i18next.t('fieldRequired', { field: i18next.t('email') });
                return;
            }
            if (!emailRegex.test(email)) {
                this.guestEmailErrors[guestIndex] = i18next.t('invalidInputFormat', { field: i18next.t('email') });
                return;
            }
            this.handleGuestChange(guestIndex, email);
        };
        this.addGuestButtonClickedHandler = e => {
            e.preventDefault();
            this.guestEmails = [...this.guestEmails, ''];
        };
        this.removeGuestButtonClickHandler = (e, guestIndex) => {
            e.preventDefault();
            this.resetGuestEmailError(guestIndex);
            const guests = [...this.guestEmails];
            guests.splice(guestIndex, 1);
            this.guestEmails = [...guests];
        };
        this.handleBackButtonClicked = e => {
            e.preventDefault();
            this.backButtonLoading = true;
            this.backButtonClicked.emit();
        };
        this.bookButtonClickedHandler = async (e) => {
            e.preventDefault();
            const formSubmittedEvent = this.bookingFormSubmitted.emit();
            if (formSubmittedEvent.defaultPrevented) {
                return;
            }
            debug('nylas-booking-form', 'bookButtonClickedHandler', this.bookingInfo);
            const name = this.name || this.bookingInfo?.primaryParticipant?.name;
            const email = this.email || this.bookingInfo?.primaryParticipant?.email;
            if (!name || name === '') {
                this.isNameValid = false;
                this.validationError.name = i18next.t('fieldRequired', { field: i18next.t('name') }) || 'Name is required';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Name is required',
                });
                return;
            }
            if (!email || email === '') {
                this.isEmailValid = false;
                this.validationError.email = i18next.t('fieldRequired', { field: i18next.t('email') }) || 'Email is required';
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: 'Email is required',
                });
                return;
            }
            if (!emailRegex.test(email)) {
                this.isEmailValid = false;
                this.validationError.email = i18next.t('invalidInputFormat', { field: i18next.t('email') });
                this.bookingFormError.emit({
                    title: 'Booking form error',
                    description: i18next.t('invalidInputFormat', { field: i18next.t('email') }) || 'Invalid email',
                });
                return;
            }
            let guests = [];
            if (this.guestEmails.length > 0) {
                let hasError = false;
                this.guestEmails.forEach((email, i) => {
                    if (email === '') {
                        hasError = true;
                        this.guestEmailErrors = { ...this.guestEmailErrors, [i]: i18next.t('fieldRequired', { field: i18next.t('email') }) };
                    }
                    else if (!emailRegex.test(email)) {
                        hasError = true;
                        this.guestEmailErrors = { ...this.guestEmailErrors, [i]: i18next.t('invalidInputFormat', { field: i18next.t('email') }) };
                    }
                });
                if (hasError) {
                    this.bookingFormError.emit({
                        title: 'Booking form error',
                        description: i18next.t('invalidInputFormat', { field: i18next.t('guestEmail') }) || 'Invalid guest email',
                    });
                    return;
                }
                guests = this.guestEmails.map((email) => ({ name: email.trim(), email: email.trim() }));
            }
            else if (this.bookingInfo?.guests) {
                guests = this.bookingInfo?.guests;
            }
            const bookingInfoAdditionalFields = this.bookingInfo?.additionalFields || [];
            this.detailsConfirmed.emit({
                primaryParticipant: {
                    name: name,
                    email: email,
                },
                guests: guests,
                additionalFields: { ...bookingInfoAdditionalFields, ...this.additionalFields },
            });
        };
        this.updateAdditionalFields = (name, value) => {
            if (this.additionalFields) {
                this.additionalFields[name] = value;
            }
        };
        this.isLoading = undefined;
        this.bookingInfo = undefined;
        this.eventInfo = undefined;
        this.configSettings = undefined;
        this.name = '';
        this.email = '';
        this.guestEmails = [];
        this.guestEmailErrors = {};
        this.isNameValid = true;
        this.isEmailValid = true;
        this.additionalFields = {};
        this.validationError = { name: '', email: '' };
        this.backButtonLoading = false;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() {
        debug('nylas-booking-form', 'componentWillLoad', this.bookingInfo);
        if (this.bookingInfo && this.bookingInfo?.primaryParticipant) {
            this.name = this.bookingInfo.primaryParticipant?.name;
            this.email = this.bookingInfo.primaryParticipant?.email;
        }
    }
    bookingInfoChangedHandler(newValue) {
        if (newValue && newValue.primaryParticipant) {
            this.name = newValue.primaryParticipant.name;
            this.email = newValue.primaryParticipant.email;
        }
    }
    changeName(name) {
        this.isNameValid = true;
        this.validationError.name = '';
        this.name = sanitize(name);
        this.nameChanged.emit(name);
    }
    changeEmail(email) {
        this.isEmailValid = true;
        this.validationError.email = '';
        this.email = sanitizeHtml(email);
        this.emailChanged.emit(email);
    }
    resetGuestEmailError(guestIndex) {
        const errors = { ...this.guestEmailErrors };
        delete errors[guestIndex];
        this.guestEmailErrors = { ...errors };
    }
    nylasFormInputChangedHandler(event) {
        switch (event.detail.name) {
            case 'name':
                this.changeName(event.detail.value);
                break;
            case 'email':
                this.changeEmail(event.detail.value);
                break;
            default:
                if (event.detail.error) {
                    this.bookingFormError.emit({
                        title: 'Booking form error',
                        description: event.detail.error,
                    });
                    return;
                }
                this.updateAdditionalFields(event.detail.name, event.detail.value);
                break;
        }
    }
    selectOptionChangedHandler(event) {
        if (event.detail.error) {
            this.bookingFormError.emit({
                title: 'Booking form error',
                description: event.detail.error,
            });
            return;
        }
        this.updateAdditionalFields(event.detail.name, event.detail.value);
    }
    switchToggledHandler(event) {
        this.updateAdditionalFields(event.detail.name, event.detail.checked ? 'true' : 'false');
    }
    checkboxToggledHandler(event) {
        this.updateAdditionalFields(event.detail.name, event.detail.checked ? 'true' : 'false');
    }
    radioChangedHandler(event) {
        this.updateAdditionalFields(event.detail.name, event.detail.value);
    }
    dropdownDefaultSelectedHandler(event) {
        this.updateAdditionalFields(event.detail.name, event.detail.value);
    }
    render() {
        return (h(Host, { key: 'e6226715a8817b1ac42f46e3efd78cc2aa1d413c' }, h("form", { key: 'd6e4aff3c6f9b978bef7cc7c1becdd8f84f2897d', onSubmit: e => this.bookButtonClickedHandler(e), noValidate: true }, h("div", { key: 'c3561940f06b86fab4eb248626cb63a09cbf1353', class: "nylas-booking-form", part: "nbf" }, h("div", { key: '02072469ac898b656c9829c484a24415d9e8e597', class: "input-wrapper", part: "nbf__input-wrapper" }, h("input-component", { key: '301574dd5c31489404efc426bc41d413b659c0a4', label: i18next.t('name'), name: "name", id: "name", defaultValue: this.bookingInfo?.primaryParticipant?.name || this.name, placeholder: i18next.t('namePlaceholder'), type: "text", required: true, requiredError: i18next.t('fieldRequired', { field: i18next.t('name') }), patternError: i18next.t('invalidInputFormat', { field: i18next.t('name') }), part: "nbf__input-textfield" })), h("div", { key: 'af992058321d3efbc622e335400da283123fe54c', class: "input-wrapper", part: "nbf__input-wrapper" }, h("input-component", { key: '3815bf80434a7178dcdc75fde5ee80db5c651179', label: i18next.t('email'), name: "email", id: "email", pattern: emailRegex, defaultValue: this.bookingInfo?.primaryParticipant?.email || this.email, placeholder: i18next.t('emailPlaceholder'), type: "email", required: true, requiredError: i18next.t('fieldRequired', { field: i18next.t('email') }), patternError: i18next.t('invalidInputFormat', { field: i18next.t('email') }), part: "nbf__input-textfield" })), this.configSettings?.scheduler?.hide_additional_guests !== true && (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, this.guestEmails.map((email, index) => (h("div", { class: "input-wrapper button-wrapper" }, h("label", { class: {
                error: !!this.guestEmailErrors[index],
            } }, i18next.t('guestEmail')), h("div", { class: "guest-email-input" }, h("input", { type: "email", id: `guest-email-${index}`, maxLength: 100, class: {
                'guest-email': true,
                'error': !!this.guestEmailErrors[index],
            }, placeholder: i18next.t('guestEmailPlaceholder'), value: email, "data-index": index, part: "nbf__input-textfield", onBlur: (e) => this.handleGuestBlur(index, e.target?.value), onInput: (e) => this.handleGuestChange(index, e.target?.value) }), h("button-component", { variant: "basic", onClick: (e) => this.removeGuestButtonClickHandler(e, index), class: {
                'remove-guest': true,
                'error': !!this.guestEmailErrors[index],
            } }, h("close-icon", null))), h("p", { class: "help-text" }, this.guestEmailErrors[index])))), h("button-component", { class: "add-guest", variant: "invisible", part: "nbf__button-ghost", onClick: e => this.addGuestButtonClickedHandler(e) }, h("div", { class: "button-content" }, h("add-circle-icon", { slot: "icon" }), this.guestEmails.length > 0 ? `${i18next.t('addAnotherGuest')}` : `${i18next.t('addGuest')}`)))), Object.entries((this.configSettings?.scheduler?.additional_fields || {}))
            ?.sort((a, b) => a[1].order - b[1].order)
            .map(x => {
            const field = x[1];
            const label = field.label;
            const key = x[0];
            const defaultValue = this.bookingInfo?.additionalFields?.[key]?.value || '';
            switch (field.type) {
                case 'dropdown':
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("select-dropdown", { label: label, name: key, id: key, withSearch: false, defaultSelectedOption: defaultValue ? { value: defaultValue, label: defaultValue } : undefined, options: field.options?.map(option => ({ value: option, label: option })), required: field.required, exportparts: "sd_dropdown: nbf__dropdown, sd_dropdown-button: nbf__dropdown-button, sd_dropdown-content: nbf__dropdown-content" })));
                case 'checkbox':
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("checkbox-component", { label: label, name: key, id: key, checked: defaultValue === 'true', required: field.required, part: "nbf__checkbox-component" })));
                case 'radio_button':
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("radio-button-group", { label: label, name: key, id: key, defaultSelectedValue: defaultValue || field.options?.[0] || '', options: field.options?.map(option => ({ value: option, label: option })), required: field.required, part: "nbf__radio-button-group" })));
                case 'multi_line_text':
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("textarea-component", { label: label, defaultValue: defaultValue, name: key, id: key, required: field.required, part: "nbf__textarea-component" })));
                default:
                    return (h("div", { class: "input-wrapper", part: "nbf__input-wrapper" }, h("input-component", { label: label, name: key, id: key, type: field.type, defaultValue: defaultValue || '', requiredError: i18next.t('fieldRequired', { field: label }), required: field.required, part: "nbf__input-textfield" })));
            }
        })), h("div", { key: '0f18461673aa4542e73b9316509aa7b5a2fba6f3', class: "cta" }, h("button-component", { key: '7041a279f4acc3fb2029321dec40b9fffd9d9a6d', variant: 'basic', class: "back", part: "nbf__button-outline", isLoading: this.backButtonLoading && this.isLoading, onClick: this.handleBackButtonClicked }, h("slot", { key: '6bf9092b2143c0b48cf56f2159d91283f804c3a3', name: "booking-form-back-label" }, `${i18next.t('backButton')}`)), h("button-component", { key: '2e97b28476b04ede3687737c78bfa6a8814b42c9', variant: 'primary', isLoading: !this.backButtonLoading && this.isLoading, disabled: this.isLoading, part: "nbf__button-primary", type: "submit" }, h("slot", { key: 'e708cfa7c230cced4f75c814a660af51a1b8dfe4', name: "booking-form-book-label" }, `${i18next.t('bookNowButton')}`))))));
    }
    static get is() { return "nylas-booking-form"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-booking-form.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-booking-form.css"]
        };
    }
    static get properties() {
        return {
            "isLoading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The loading state."
                },
                "attribute": "is-loading",
                "reflect": false
            },
            "bookingInfo": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "NylasSchedulerBookingData",
                    "resolved": "any",
                    "references": {
                        "NylasSchedulerBookingData": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::unknown"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The booking info."
                },
                "attribute": "booking-info",
                "reflect": false
            },
            "eventInfo": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "NylasEvent",
                    "resolved": "undefined | { booking_id: string; organizer: { email: string; name: string; is_organizer?: boolean | undefined; }; title: string; description: string; status: string; }",
                    "references": {
                        "NylasEvent": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::NylasEvent"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The booked event (Used to track if a booking is created in an eventOverride)."
                }
            },
            "configSettings": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "ConfigSettings",
                    "resolved": "any",
                    "references": {
                        "ConfigSettings": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::unknown"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The config settings for the scheduler."
                },
                "attribute": "config-settings",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "name": {},
            "email": {},
            "guestEmails": {},
            "guestEmailErrors": {},
            "isNameValid": {},
            "isEmailValid": {},
            "additionalFields": {},
            "validationError": {},
            "backButtonLoading": {}
        };
    }
    static get events() {
        return [{
                "method": "nameChanged",
                "name": "nameChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the name is changed."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }, {
                "method": "emailChanged",
                "name": "emailChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the email is changed."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }, {
                "method": "backButtonClicked",
                "name": "backButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the cancel button is clicked."
                },
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                }
            }, {
                "method": "detailsConfirmed",
                "name": "detailsConfirmed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the book button is clicked and the form validation is complete and successful.\nThis event is fired before the booking request is sent."
                },
                "complexType": {
                    "original": "NylasSchedulerBookingData",
                    "resolved": "NylasSchedulerBookingData",
                    "references": {
                        "NylasSchedulerBookingData": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::unknown"
                        }
                    }
                }
            }, {
                "method": "bookingFormError",
                "name": "bookingFormError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs in the booking form validation."
                },
                "complexType": {
                    "original": "Partial<Notification>",
                    "resolved": "{ id?: string | undefined; type?: NotificationType | undefined; title?: string | undefined; code?: number | undefined; category?: string | undefined; description?: string | undefined; ttl?: number | \"none\" | undefined; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "Notification": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Notification"
                        }
                    }
                }
            }, {
                "method": "bookingFormSubmitted",
                "name": "bookingFormSubmitted",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired immediately after the book button is clicked.\nThe booking form validation is not complete at this point."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "bookingInfo",
                "methodName": "bookingInfoChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormInputChanged",
                "method": "nylasFormInputChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormDropdownChanged",
                "method": "selectOptionChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormSwitchToggled",
                "method": "switchToggledHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormCheckboxToggled",
                "method": "checkboxToggledHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormRadioChanged",
                "method": "radioChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormDropdownDefaultSelected",
                "method": "dropdownDefaultSelectedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-booking-form',
        stateToProps: new Map([
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.eventInfo', 'eventInfo'],
            ['scheduler.configSettings', 'configSettings'],
        ]),
        eventToProps: {
            backButtonClicked: async (_event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.toggleAdditionalData(false);
            },
            nameChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setParticipantName(event.detail);
            },
            emailChanged: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setParticipantEmail(event.detail);
            },
            detailsConfirmed: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booking-form', 'detailsConfirmed', event.detail);
            },
            bookingFormSubmitted: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booking-form', 'bookingFormSubmitted', event.detail);
            },
            bookingFormError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booking-form', 'bookingFormError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingForm.prototype, "render", null);
//# sourceMappingURL=nylas-booking-form.js.map
