import { Fragment, Host, h } from "@stencil/core";
import { debug } from "../../../utils/utils";
export class NylasNotification {
    constructor() {
        this.ttl = 5000;
        this.allowedCategories = ['component', 'api', 'validation', 'invalid_session'];
        this.notifications = [];
    }
    onError(event) {
        debug(`[nylas-notification] Error: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    onWarning(event) {
        debug(`[nylas-notification] Warning: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    onInfo(event) {
        debug(`[nylas-notification] Info: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    onSuccess(event) {
        debug(`[nylas-notification] Success: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    isChildOf(parentHost) {
        let parent = this.host.parentNode;
        while (parent) {
            if (parent === parentHost) {
                return true;
            }
            if (parent instanceof ShadowRoot) {
                parent = parent.host;
            }
            else {
                parent = parent.parentNode;
            }
        }
        return false;
    }
    handleNotification(event) {
        const parentHost = event.detail.host;
        if (event.defaultPrevented) {
            debug(`[nylas-notification] Event default prevented`);
            return;
        }
        if (parentHost && !this.isChildOf(parentHost)) {
            debug(`[nylas-notification] Host not a parent`);
            return;
        }
        if (this.ttl === 0) {
            debug(`[nylas-notification] TTL is 0`);
            return;
        }
        if (this.allowedCategories.length > 0 && !this.allowedCategories.includes(event.detail.notification.category)) {
            debug(`[nylas-notification] Category not allowed`);
            return;
        }
        this.notifications = [...this.notifications, { ...event.detail.notification }];
        if (event.detail.notification.ttl !== 'none') {
            const ttl = event.detail.notification.ttl ? event.detail.notification.ttl : this.ttl;
            window.setTimeout(() => {
                this.notifications = this.notifications.filter(notif => notif.id !== event.detail.notification.id);
            }, ttl);
        }
    }
    dismissNotification(id) {
        this.notifications = this.notifications.filter(notif => notif.id !== id);
    }
    render() {
        return (h(Host, { key: '9a2b2d32b746b25c06f61494c2cae183712f61e0' }, h(Fragment, { key: '561d628e0954735a0a0643b076101f4a0e4cfe0a' }, this.notifications.map(notif => (h("div", { class: `notif ${notif.type}`, key: notif.id }, h("div", { class: "content" }, h("span", { class: `icon ${notif.type}` }, (notif.type === 'error' || notif.type === 'warning') && h("warning-icon", null)), h("span", { class: "message" }, h("span", { class: "title" }, notif.title), notif.description && h("span", { class: "description" }, notif.description))), h("button", { class: "dismiss-btn", onClick: () => this.dismissNotification(notif.id) }, h("close-icon", null))))), h("slot", { key: '2f2d91b57282c87026f507f065b0e98615658ff2' }))));
    }
    static get is() { return "nylas-notification"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-notification.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-notification.css"]
        };
    }
    static get properties() {
        return {
            "ttl": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "number | 'none'",
                    "resolved": "\"none\" | number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The time-to-live for notifications in milliseconds. Set to 'none' to disable auto-dismissal."
                },
                "attribute": "ttl",
                "reflect": false,
                "defaultValue": "5000"
            },
            "allowedCategories": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "string[]",
                    "resolved": "string[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "defaultValue": "['component', 'api', 'validation', 'invalid_session']"
            }
        };
    }
    static get states() {
        return {
            "notifications": {}
        };
    }
    static get elementRef() { return "host"; }
    static get listeners() {
        return [{
                "name": "nylasSchedulerError",
                "method": "onError",
                "target": "body",
                "capture": false,
                "passive": false
            }, {
                "name": "nylasSchedulerWarning",
                "method": "onWarning",
                "target": "body",
                "capture": false,
                "passive": false
            }, {
                "name": "nylasSchedulerInfo",
                "method": "onInfo",
                "target": "body",
                "capture": false,
                "passive": false
            }, {
                "name": "nylasSchedulerSuccess",
                "method": "onSuccess",
                "target": "body",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=nylas-notification.js.map
