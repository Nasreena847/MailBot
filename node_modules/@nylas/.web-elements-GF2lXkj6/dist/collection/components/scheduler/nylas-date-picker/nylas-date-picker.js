var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { addDaysToCurrentDate, convertMinutesToHoursAndMinutes, getFirstDayOfMonth, getLastDayOfMonth, isSameDay, isSameMonth, translateMonth } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import { timeDay } from "d3-time";
import i18next from "../../../utils/i18n";
import { debug } from "../../../utils/utils";
export class NylasDatePicker {
    constructor() {
        this.selectableDates = undefined;
        this.selectedDate = undefined;
        this.configSettings = undefined;
        this.selectedLanguage = undefined;
        this.isLoading = undefined;
        this.eventDuration = undefined;
        this.month = this.selectedDate || new Date();
        this.dates = this.getDates();
        this.disableNextMonthButton = false;
    }
    configSettingsChanged(newConfigSettings) {
        const nextMonth = new Date(this.month.getFullYear(), this.month.getMonth() + 1, 1);
        const availableDaysInFuture = newConfigSettings?.scheduler?.available_days_in_future;
        if (availableDaysInFuture === undefined) {
            return;
        }
        const endDate = addDaysToCurrentDate(new Date(), availableDaysInFuture);
        if (endDate.getTime() < nextMonth.getTime()) {
            this.disableNextMonthButton = true;
        }
        else {
            this.disableNextMonthButton = false;
        }
    }
    selectedLanguageChanged(newLanguage) {
        i18next.changeLanguage(newLanguage);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    getDates() {
        const lastDayOfMonth = getLastDayOfMonth(this.month);
        const firstDayOfMonth = getFirstDayOfMonth(this.month);
        return timeDay.range(timeDay.offset(firstDayOfMonth, -firstDayOfMonth.getDay()), timeDay.offset(lastDayOfMonth, 7 - lastDayOfMonth.getDay()));
    }
    selectDate(date) {
        this.dateSelected.emit(date);
    }
    changeMonth(change) {
        this.month = new Date(this.month.getFullYear(), this.month.getMonth() + change, 1);
        const nextMonth = new Date(this.month.getFullYear(), this.month.getMonth() + 1, 1);
        const availableDaysInFuture = this.configSettings?.scheduler?.available_days_in_future;
        const endDate = addDaysToCurrentDate(new Date(), availableDaysInFuture);
        if (endDate.getTime() < nextMonth.getTime()) {
            this.disableNextMonthButton = true;
        }
        else {
            this.disableNextMonthButton = false;
        }
        this.dates = this.getDates();
        this.monthChanged.emit(this.month);
    }
    isSelected(date, selectedDate, selectableDates) {
        return date && selectedDate && isSameDay(date, selectedDate) && selectableDates && selectableDates?.length > 0;
    }
    isDisabled(date, selectableDates) {
        return date && selectableDates?.find(d => isSameDay(d, date)) === undefined;
    }
    render() {
        return (h(Host, { key: '3e6dd28572687991de4841d639c5bdbd5d2d6e0b', part: "ndp" }, h("div", { key: 'b8a31231d9e04035c468f9c025bbd3adb4f0dbb2', class: "nylas-date-picker" }, h("div", { key: 'c25024241ce71fb94bcc485cc32614c820a69fee', class: "title", part: "ndp__title" }, this.configSettings?.name ? (h("h1", null, this.configSettings?.name)) : (this.configSettings?.organizer?.name && (h("h1", null, h("person-icon", null), this.configSettings?.organizer?.name || 'Organizer'))), h("p", { key: 'f51da2bb7f8b5d6b84ea5a9ea66aef03b9e10e12' }, h("clock-icon", { key: '42a947b00a14afe7c57c716e37ef4d418e55e337' }), this.eventDuration ? convertMinutesToHoursAndMinutes(this.eventDuration) : `- ${i18next.t('time.minutes')}`)), h("div", { key: 'bb264f745cbe51ece10238e3a2f3fae55d2f1bdb', class: 'header flex-row' }, h("h2", { key: '16ecbac96e4ede32b8b524a645f96e30d16e2814', part: 'ndp__month-header' }, h("strong", { key: 'aaf8064ac4ebd41680fb4c147b5a23fc7e5554f2' }, translateMonth(this.month.toLocaleDateString(undefined, { month: 'long' }).toLocaleLowerCase())), "\u00A0", this.month.toLocaleDateString(undefined, { year: 'numeric' })), h("div", { key: '8d5fdca1f4de5d8b75c89ebf6bc6d964b39b8351', class: 'pagination' }, h("button", { key: '9a993814c06483337caea097727932aa75e53243', onClick: () => this.changeMonth(-1), class: { 'chevron-left': true, 'button': true }, disabled: !this.selectableDates?.length || this.month <= new Date(), part: "ndp__month-button" }, h("chevron-icon", { key: 'edd3668dee154cb573cf3ed25e72beb2938cb9d2' })), h("button", { key: '9452edc29c45e8ff24f76521b94762f128201ba0', onClick: () => this.changeMonth(1), class: { 'chevron-right': true, 'button': true }, disabled: this.disableNextMonthButton, part: "ndp__month-button" }, h("chevron-icon", { key: '1f27334ee808470e844f8f08c4fd4dfc39376b2d' })))), h("div", { key: '4173feb8a2661c49d0c898864886db0f90f6a181', class: 'dates' }, [
            i18next.t('days.sunday'),
            i18next.t('days.monday'),
            i18next.t('days.tuesday'),
            i18next.t('days.wednesday'),
            i18next.t('days.thursday'),
            i18next.t('days.friday'),
            i18next.t('days.saturday'),
        ].map(day => {
            return (h("div", { class: 'day', part: "ndp__day" }, day));
        }), this.dates.map((date, i) => {
            const isDisabled = this.isDisabled(date, this.selectableDates);
            if (this.isLoading) {
                return (h("button", { disabled: true, class: {
                        'date day-skeleton': true,
                        'current-month': isSameMonth(date, this.month),
                    }, style: { animationDelay: `${i * 20}ms` }, part: `ndp__date ndp__date--disabled` }, date.getDate()));
            }
            return (h("button", { class: {
                    'date': true,
                    'selected': !!(this.selectedDate && isSameDay(date, this.selectedDate) && this.selectableDates && this.selectableDates?.length > 0),
                    'current-day': isSameDay(date, new Date()),
                    'current-month': isSameMonth(date, this.month),
                }, "aria-lang": date.toLocaleDateString(undefined, { dateStyle: 'full' }), disabled: isDisabled, onClick: () => this.selectDate(date), part: `ndp__date ${this.isSelected(date, this.selectedDate, this.selectableDates) ? 'ndp__date--selected' : ''} ${isSameDay(date, new Date()) ? 'ndp__date--current-day' : ''} ${isSameMonth(date, this.month) ? 'ndp__date--current-month' : ''}` }, date.getDate()));
        })))));
    }
    static get is() { return "nylas-date-picker"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-date-picker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-date-picker.css"]
        };
    }
    static get properties() {
        return {
            "selectableDates": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Date[]",
                    "resolved": "Date[] | undefined",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The dates that are selectable."
                }
            },
            "selectedDate": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Date",
                    "resolved": "Date | undefined",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected date."
                }
            },
            "configSettings": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ConfigSettings",
                    "resolved": "undefined | { scheduler: { available_days_in_future: number; min_cancellation_notice: number; min_booking_notice: number; rescheduling_url?: string | undefined; cancellation_url?: string | undefined; cancellation_policy?: string | undefined; hide_additional_guests?: boolean | undefined; hide_cancellation_options?: boolean | undefined; hide_rescheduling_options?: boolean | undefined; additional_fields?: Record<string, AdditionalFields> | undefined; confirmation_redirect_url?: string | undefined; organizer_confirmation_url?: string | undefined; }; organizer: { name: string; email: string; }; slug: string; appearance: Appearance; booking_type: string; name: string; }",
                    "references": {
                        "ConfigSettings": {
                            "location": "import",
                            "path": "@/stores/scheduler-store",
                            "id": "src/stores/scheduler-store.ts::ConfigSettings"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The config settings."
                }
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false
            },
            "isLoading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The loading state."
                },
                "attribute": "is-loading",
                "reflect": false
            },
            "eventDuration": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The event duration."
                },
                "attribute": "event-duration",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "month": {},
            "dates": {},
            "disableNextMonthButton": {}
        };
    }
    static get events() {
        return [{
                "method": "dateSelected",
                "name": "dateSelected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when a date is selected."
                },
                "complexType": {
                    "original": "Date",
                    "resolved": "Date",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                }
            }, {
                "method": "monthChanged",
                "name": "monthChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the month is changed."
                },
                "complexType": {
                    "original": "Date",
                    "resolved": "Date",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                }
            }];
    }
    static get watchers() {
        return [{
                "propName": "configSettings",
                "methodName": "configSettingsChanged"
            }, {
                "propName": "selectedLanguage",
                "methodName": "selectedLanguageChanged"
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-date-picker',
        stateToProps: new Map([
            ['scheduler.selectableDates', 'selectableDates'],
            ['scheduler.selectedDate', 'selectedDate'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.eventDuration', 'eventDuration'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            dateSelected: async (event, nylasSchedulerConnector) => {
                debug('nylas-date-picker', 'dateSelected', event.detail);
                nylasSchedulerConnector.scheduler.selectDate(event.detail);
            },
            monthChanged: async (event, _nylasSchedulerConnector) => {
                debug('nylas-date-picker', 'monthChanged', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasDatePicker.prototype, "render", null);
//# sourceMappingURL=nylas-date-picker.js.map
