{"version":3,"file":"nylas-scheduling.js","sourceRoot":"","sources":["../../../../src/components/scheduler/nylas-scheduling/nylas-scheduling.tsx"],"names":[],"mappings":"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":["import { NylasBaseProvider } from '@/common/abstract-provider';\nimport { RegisteredComponent } from '@/common/register-component';\nimport type { SchedulerEventOverride } from '@/common/component-types';\nimport { NylasSchedulerConnector } from '@/connector/nylas-scheduler-connector';\nimport { CreateNylasSchedulerStore, NylasSchedulerStoreState, NylasSchedulerStoreType } from '@/stores/scheduler-store';\nimport {\n  NylasSchedulerBookingData,\n  ThemeConfig,\n  Notification,\n  NotificationType,\n  NylasSchedulerErrorResponse,\n  Timeslot,\n  NylasSchedulerResponse,\n  NylasSuccessResponse,\n} from '@nylas/core';\nimport { Component, Element, Event, EventEmitter, Host, Listen, Method, Prop, State, Watch, h } from '@stencil/core';\nimport { addDaysToCurrentDate, capitalizeFirstLetter, compactStringToUUIDs, debug } from '@/utils/utils';\nimport { SchedulerView } from './scheduler-view';\nimport { ErrorCategory } from '@/connector/nylas-scheduler-connector/errors';\nimport { MessageBanner } from './message-banner';\nimport i18next from '@/utils/i18n';\nimport { NylasEvent, UISettingsResponse } from '@/common/types';\nimport { LANGUAGE_CODE, LANGUAGE_CODE_MAP, Locale } from '@/common/constants';\n\nconst genericError = { title: i18next.t('genericErrorTitle'), type: NotificationType.Error, category: ErrorCategory.Component };\n\n/**\n * The `nylas-scheduling` component is used to display the Nylas Scheduling UI.\n *\n * @part ndp - [nylas-date-picker] The date picker host.\n * @part ndp__title - [nylas-date-picker] The title.\n * @part ndp__month-header - [nylas-date-picker] The month header.\n * @part ndp__month-button - [nylas-date-picker] The month button.\n * @part ndp__day - [nylas-date-picker] The day.\n * @part ndp__date - [nylas-date-picker] The date.\n * @part ndp__date--selected - [nylas-date-picker] The selected date.\n * @part ndp__date--current-day - [nylas-date-picker] The current day.\n * @part ndp__date--current-month - [nylas-date-picker] The dates in the current month.\n * @part ndp__date--disabled - [nylas-date-picker] The disabled dates.\n * @part ntp - [nylas-timeslot-picker] The timeslot picker component.\n * @part ntp__timeslot - [nylas-timeslot-picker] The timeslot button.\n * @part ntp__timeslot--selected - [nylas-timeslot-picker] The selected timeslot button.\n * @part ntp__button-primary - [nylas-timeslot-picker] The timeslot picker CTA.\n * @part nsec - [nylas-selected-event-card] The selected event card component.\n * @part nsec__card - [nylas-selected-event-card] The card component.\n * @part nsec__icon - [nylas-selected-event-card] The calendar icon.\n * @part nsec__date - [nylas-selected-event-card] The date selected.\n * @part nsec__time - [nylas-selected-event-card] The timeslot selected.\n * @part nbf - [nylas-booking-form] The booking form host.\n * @part nbf__input-textfield - [nylas-booking-form] The input textfield.\n * @part nbf__button-ghost - [nylas-booking-form] The ghost button.\n * @part nbf__button-outline - [nylas-booking-form] The outline button.\n * @part nbf__button-primary - [nylas-booking-form] The primary button.\n * @part nbf__input-wrapper - [nylas-booking-form] The input wrapper.\n * @part nbf__checkbox-component - [nylas-booking-form] The checkbox component.\n * @part nbf__radio-button-group - [nylas-booking-form] The radio button group.\n * @part nbf__textarea-component - [nylas-booking-form] The textarea component.\n * @part nbf__dropdown - [nylas-booking-form] The dropdown component.\n * @part nbf__dropdown-button - [nylas-booking-form] The dropdown button.\n * @part nbf__dropdown-content - [nylas-booking-form] The dropdown content.\n * @part ncec - [nylas-cancelled-event-card] The cancelled event card host.\n * @part ncec__icon - [nylas-cancelled-event-card] The calendar icon.\n * @part ncec__title - [nylas-cancelled-event-card] The title of the cancelled event card.\n * @part ncec__description - [nylas-cancelled-event-card] The description of the cancelled event card.\n * @part ncec__button-outline - [nylas-cancelled-event-card] The close button CTA.\n * @part ncec__card - [nylas-cancelled-event-card] The cancelled event card.\n * @part nbec - [nylas-booked-event-card] The booked event card host.\n * @part nbec__card - [nylas-booked-event-card] The booked event card.\n * @part nbec__title - [nylas-booked-event-card] The title of the booked event card.\n * @part nbec__description - [nylas-booked-event-card] The description of the booked event card.\n * @part nbec__button-outline - [nylas-booked-event-card] The cancel & reschedule button CTA.\n * @part nbec__cancel-cta - [nylas-booked-event-card] The cancel button CTA.\n * @part nbec__reschedule-cta - [nylas-booked-event-card] The reschedule button CTA.\n * @part nls - [nylas-locale-switch] The locale switch container.\n * @part nls__timezone - [nylas-locale-switch] The timezone select container\n * @part nls__timezone-dropdown - [nylas-locale-switch] The timezone dropdown\n * @part nls__timezone-drop-button - [nylas-locale-switch] The timezone dropdown button\n * @part nls__timezone-drop-button-selected-label - [nylas-locale-switch] The timezone dropdown button selected label\n * @part nls__timezone-drop-content - [nylas-locale-switch] The timezone dropdown content\n * @part nls__timezone-drop-label - [nylas-locale-switch] The timezone dropdown label\n * @part nls__language - [nylas-locale-switch] The language select container\n * @part nls__language-dropdown - [nylas-locale-switch] The language dropdown\n * @part nls__language-drop-button - [nylas-locale-switch] The language dropdown button\n * @part nls__language-drop-content - [nylas-locale-switch] The language dropdown content\n * @part nls__language-drop-label - [nylas-locale-switch] The language dropdown label\n * @part ncbf - [nylas-cancel-booking-form] The cancel booking form container.\n * @part ncbf__icon - [nylas-cancel-booking-form] The calendar icon.\n * @part ncbf__title - [nylas-cancel-booking-form] The title of the cancel booking form.\n * @part ncbf__description - [nylas-cancel-booking-form] The description of the cancel booking form.\n * @part ncbf__reason-textarea - [nylas-cancel-booking-form] The reason textarea.\n * @part ncbf__button-cta - [nylas-cancel-booking-form] The cancel booking form CTA button.\n * @part ncbf__button-outline - [nylas-cancel-booking-form] The cancel booking form outline button.\n * @part ncbf__card - [nylas-cancel-booking-form] The cancel booking form card.\n */\n@Component({\n  tag: 'nylas-scheduling',\n  styleUrl: 'nylas-scheduling.scss',\n  shadow: true,\n})\nexport class NylasScheduling {\n  /**\n   * Stores to be used by the provider.\n   */\n  private stores?: { scheduler: NylasSchedulerStoreType };\n\n  /**\n   * This is a base provide that defines the common methods and properties\n   * that all providers should have.\n   *\n   * Because stencil does not support abstract classes, we have to use a\n   * property to store the base provider instance.\n   */\n  private baseProvider?: NylasBaseProvider<Exclude<typeof this.stores, undefined>>;\n\n  /**\n   * The Nylas Scheduler Connector instance.\n   * The branins of the provider. It manages data fetching and state synchronization.\n   */\n  private nylasSchedulerConnector?: NylasSchedulerConnector;\n\n  /**\n   * The host element.\n   * Used to manage the host element of the provider.\n   */\n  @Element() private host!: HTMLNylasSchedulingElement;\n\n  /**\n   * This is used to set the mode for the Nylas Scheduler.\n   * The mode can be either `app` or `composable`. The default mode is `app`.\n   * - `app`: This mode is used to show the default Nylas Scheduler UI.\n   * - `composable`: This mode is used to show the composable Nylas Scheduler UI\n   *    by passing the individual scheduler components as children.\n   */\n  @Prop() readonly mode: 'app' | 'composable' = 'app';\n\n  /**\n   * The default scheduler store state.\n   * Used to set the initial state of the scheduler store.\n   */\n  @Prop({ attribute: 'default-scheduler-store-state' }) readonly defaultSchedulerState?: Partial<NylasSchedulerStoreState>;\n\n  /**\n   * The session ID for the Nylas Scheduler.\n   * This is used to authenticate the user.\n   */\n  @Prop() readonly sessionId?: string;\n\n  /**\n   * The URL for the Nylas Scheduler API. (staging or production URL)\n   */\n  @Prop() readonly schedulerApiUrl: string = 'https://api.us.nylas.com';\n\n  /**\n   * This enables passing the bookingInfo object to the Scheduler UI for direct booking event creation.\n   * When used with timeslotConfirmedHandler, it bypasses the additional data page and immediately\n   * invokes the handler after booking.\n   */\n  @Prop() readonly bookingInfo?: NylasSchedulerBookingData;\n\n  /**\n   * Booking Ref required for rescheduling flow.\n   */\n  @Prop() readonly rescheduleBookingRef?: string;\n\n  /**\n   * Booking Ref required for cancelling flow.\n   */\n  @Prop() readonly cancelBookingRef?: string;\n\n  /**\n   * Booking Ref required for the manual confirmation flow.\n   */\n  @Prop() readonly organizerConfirmationBookingRef?: string;\n\n  /**\n   * The config ID for the Nylas Scheduler. This should be passed in when using a public config,\n   * in which case the sessionId is not required.\n   */\n  @Prop() readonly configurationId?: string;\n\n  /**\n   * The slug of the configuration (public config) to be used for the Nylas Scheduler. This is used in conjunction with the clientId.\n   * When the configurationId is not provided, the slug and clientId are used to make requests to the Scheduler API endpoints.\n   * If the configurationId is provided, this prop will be ignored.\n   */\n  @Prop() readonly slug?: string;\n\n  /**\n   * The app ID of the configuration (public config) to be used for the Nylas Scheduler. This is used in conjunction with the slug.\n   * When the configurationId is not provided, the slug and clientId are used to make requests to the Scheduler API endpoints.\n   * If the configurationId is provided, this prop will be ignored.\n   */\n  @Prop() readonly clientId?: string;\n\n  /**\n   * This prop lets you hide the Nylas branding.\n   * Default is true.\n   */\n  @Prop() readonly nylasBranding?: boolean = true;\n\n  /**\n   * This provides an easy way to override the default function of the event emitter.\n   * An example of this is the `timeslotConfirmed` event. By default, this event will set the scheduler store state for `showBookingForm` to `true` which will\n   * show the booking form. However, if you want to override this behavior, you can pass in the prop `eventOverride` like:\n   * ```html\n   * <nylas-scheduling eventOverride={{\"timeslotConfirmed\": (event, nylasConnector) => { console.log(\"Timeslot confirmed event fired!\"); } }} />\n   * ```\n   */\n  @Prop({ attribute: 'event-overrides' }) readonly eventOverrides: SchedulerEventOverride = {};\n\n  /**\n   * The loading state. This is used to set the loading state for the Nylas Scheduler when fetching data.\n   */\n  @Prop() readonly isLoading?: boolean;\n\n  /**\n   * Theme config, used to automatically generate a theme with color palette and\n   * CSS variables to customize the look and feel of the Nylas Scheduler.\n   */\n  @Prop() readonly themeConfig?: ThemeConfig;\n\n  /**\n   * This prop will allow to override the default localization strings for each language.\n   * Nylas scheduling page currently support the following language codes: en, es, fr, de, sv, zh, ja, nl.\n   */\n  @Prop() readonly localization?: Partial<Record<LANGUAGE_CODE, Locale>>;\n\n  /*\n   * Displays notifications for errors by default. When enabled (`true`), errors\n   * automatically appear as notifications. Disabling this feature (`false`) allows\n   * the parent application to capture and manage errors by listening to the\n   * `nylasSchedulerError` event, providing flexibility in error handling.\n   */\n  @Prop() readonly showNotification?: boolean = true;\n\n  /**\n   * Automatically register components that have the `@RegisterComponent` decorator.\n   * If this is set to false, you will need to manually register components using the\n   * `registerComponent` method.\n   * @default true\n   */\n  @State() automaticComponentRegistration: boolean = true;\n\n  /**\n   * The selected date label for the Nylas Scheduler.\n   * This is used to set the initial date label for the Nylas Scheduler.\n   */\n  @State() selectedDateLabel: string = new Date().toLocaleDateString(undefined, { dateStyle: 'full' }) || `${i18next.t('noDateSelected')}`;\n\n  /**\n   * The config id extracted from the rescheduleBookingRef or cancelBookingRef or organizerConfirmationBookingRef.\n   */\n  @State() refConfigId?: string;\n\n  /**\n   * The selected language for the Nylas Scheduler.\n   */\n  @State() language: string = navigator.language;\n\n  /**\n   * This event is fired when the provider is initialized.\n   * It can be used to set the initial state of the provider,\n   * or to prevent the provider from firing some default behavior.\n   */\n  @Event({ cancelable: true }) init!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  /**\n   * This event is fired when the scheduler component enters componentWillLoad lifecycle.\n   */\n  @Event() schedulerWillLoad!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  /**\n   * This event is fired when the scheduler component enters componentDidLoad lifecycle.\n   */\n  @Event() schedulerDidLoad!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  @Event({\n    eventName: 'nylasSchedulerError',\n  })\n  nylasSchedulerError!: EventEmitter<{ notification: Notification; host: HTMLElement }>;\n\n  @Event({\n    eventName: 'configSettingsLoaded',\n  })\n  configSettingsLoaded!: EventEmitter<{ settings: NylasSchedulerResponse<UISettingsResponse> }>;\n\n  /**\n   * This event is triggered if either the rescheduleBookingRef or cancelBookingRef or organizerConfirmationBookingRef prop\n   * is supplied and the component has been attached to the DOM. It emits the configurationId\n   * and bookingId derived from the rescheduleBookingRef or cancelBookingRef or organizerConfirmationBookingRef. Subscribe to this\n   * event to obtain the extracted configurationId, which is necessary to generate the sessionID\n   * for configurations that are not public.\n   */\n  @Event() bookingRefExtracted!: EventEmitter<{ configurationId: string; bookingId: string; salt?: string }>;\n\n  /**\n   * This event is triggered on successful booking request. It emits the event data.\n   */\n  @Event() bookedEventInfo!: EventEmitter<NylasSchedulerResponse<NylasEvent>>;\n\n  /**\n   * This function is called when the component is connected to the DOM.\n   * At this point in the component lifecycle, the base provider has not yet\n   * been initialized. So avoid using the base provider in this method or stores\n   * in this method.\n   */\n  connectedCallback() {\n    debug(`[nylas-scheduler] connectedCallback`);\n  }\n\n  async componentWillLoad() {\n    debug(`[nylas-scheduler] Component will load`);\n\n    // Emit the schedulerWillLoad event to allow the parent application to set the initial\n    // state of the provider or to prevent the provider from firing some default behavior.\n    const schedulerWillLoadEvent = this.schedulerWillLoad.emit(this.host);\n    if ('schedulerWillLoad' in this.eventOverrides) {\n      await this.eventOverrides.schedulerWillLoad(schedulerWillLoadEvent, this.nylasSchedulerConnector);\n      if (schedulerWillLoadEvent.defaultPrevented) {\n        return;\n      }\n    }\n\n    this.stores = {\n      scheduler: CreateNylasSchedulerStore({\n        bookingInfo: this.bookingInfo,\n        nylasBranding: this.nylasBranding,\n        ...this.defaultSchedulerState,\n      }),\n    };\n\n    this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);\n\n    // Set the configId to the reschedule configId if rescheduleBookingRef is provided or\n    // Set the configId to the cancel configId if cancelBookingRef is provided\n    this.refConfigId = this.configurationId;\n    let bookingRefExtractedEvent;\n    if (this.rescheduleBookingRef) {\n      const [rescheduleConfigId, rescheduleBookingId, _] = compactStringToUUIDs(this.rescheduleBookingRef);\n      this.refConfigId = rescheduleConfigId;\n      this.stores.scheduler.set('rescheduleBookingId', rescheduleBookingId);\n      bookingRefExtractedEvent = this.bookingRefExtracted.emit({ configurationId: rescheduleConfigId, bookingId: rescheduleBookingId });\n    } else if (this.cancelBookingRef) {\n      const [cancelConfigId, cancelBookingId, _] = compactStringToUUIDs(this.cancelBookingRef);\n      this.refConfigId = cancelConfigId;\n      this.stores.scheduler.set('cancelBookingId', cancelBookingId);\n      bookingRefExtractedEvent = this.bookingRefExtracted.emit({ configurationId: cancelConfigId, bookingId: cancelBookingId });\n    } else if (this.organizerConfirmationBookingRef) {\n      const [organizerConfirmationConfigId, organizerConfirmationBookingId, salt] = compactStringToUUIDs(this.organizerConfirmationBookingRef);\n      this.refConfigId = organizerConfirmationConfigId;\n      this.stores.scheduler.set('organizerConfirmationBookingId', organizerConfirmationBookingId);\n      this.stores.scheduler.set('organizerConfirmationSalt', salt);\n      bookingRefExtractedEvent = this.bookingRefExtracted.emit({ configurationId: organizerConfirmationConfigId, bookingId: organizerConfirmationBookingId, salt: salt });\n    }\n\n    if ('bookingRefExtracted' in this.eventOverrides) {\n      await this.eventOverrides.bookingRefExtracted(bookingRefExtractedEvent, this.nylasSchedulerConnector);\n      if (bookingRefExtractedEvent.defaultPrevented) {\n        return;\n      }\n    }\n\n    if (!this.checkIfSessionIdOrConfigIdExists()) {\n      return;\n    }\n\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    this.nylasSchedulerConnector = new NylasSchedulerConnector({\n      schedulerAPIURL: this.schedulerApiUrl,\n      sessionId: this.sessionId,\n      configId: this.refConfigId,\n      slug: this.slug,\n      clientId: this.clientId,\n      nylasSchedulerStore,\n    });\n\n    const initEvent = this.init.emit(this.host);\n    if ('init' in this.eventOverrides) {\n      await this.eventOverrides.init(initEvent, this.nylasSchedulerConnector);\n      if (initEvent.defaultPrevented) {\n        return;\n      }\n    }\n\n    this.baseProvider?.componentWillLoad(this.nylasSchedulerConnector);\n    // Override theme\n    this.applyThemeConfig(this.themeConfig);\n  }\n\n  async componentDidLoad() {\n    this.baseProvider?.componentDidLoad();\n\n    const schedulerDidLoadEvent = this.schedulerDidLoad.emit(this.host);\n    if ('schedulerDidLoad' in this.eventOverrides) {\n      await this.eventOverrides.schedulerDidLoad(schedulerDidLoadEvent, this.nylasSchedulerConnector);\n      if (schedulerDidLoadEvent.defaultPrevented) {\n        return;\n      }\n    }\n\n    // If sessionId is not provided, do not fetch availability\n    if (!this.checkIfSessionIdOrConfigIdExists()) {\n      return;\n    }\n    this.localizationChanged(this.localization);\n    const settingsResponse = await this.nylasSchedulerConnector?.scheduler.getUISettings();\n    if (!settingsResponse || 'error' in settingsResponse) {\n      this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(settingsResponse?.error) }, host: this.host });\n      return;\n    } else {\n      if ('data' in settingsResponse && settingsResponse.data?.appearance) {\n        console.info(\n          'Appearance settings have been returned from the configuration used byt his scheduling page; please remember to grab them from the configSettingsLoaded event and apply them as desired.',\n        );\n      }\n      const configSettingsLoadedEvent = this.configSettingsLoaded.emit({ settings: settingsResponse });\n      if ('configSettingsLoaded' in this.eventOverrides) {\n        await this.eventOverrides.configSettingsLoaded(configSettingsLoadedEvent, this.nylasSchedulerConnector);\n        if (configSettingsLoadedEvent.defaultPrevented) {\n          return;\n        }\n      }\n    }\n\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    const availableDaysInFuture = nylasSchedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;\n    const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot');\n\n    if (selectedTimeslot && selectedTimeslot?.start_time) {\n      if (!this.isTimeslotValid(selectedTimeslot)) {\n        return;\n      }\n\n      // If the selected timeslot is already set, do not fetch availability\n      if (nylasSchedulerStore?.get('showBookingForm')) {\n        nylasSchedulerStore?.set('selectedDate', selectedTimeslot.start_time);\n        return;\n      }\n    }\n\n    const selectedDate = nylasSchedulerStore?.get('selectedDate');\n    const availability = nylasSchedulerStore?.get('availability');\n    let result;\n\n    if (availability && availability.length > 0) {\n      return;\n    }\n\n    if (!selectedDate) {\n      const today = new Date();\n      const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(today, availableDaysInFuture || 30);\n      if (today.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n        result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n      }\n    } else {\n      const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(selectedDate, availableDaysInFuture || 30);\n      if (selectedDate.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n        result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n      }\n    }\n\n    if (!result || 'error' in result) {\n      this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(result?.error) }, host: this.host });\n    }\n\n    if (!selectedDate) {\n      let _selectedDate = new Date();\n      const firstAvailableDate = nylasSchedulerStore?.get('availability').find((timeslot: any) => new Date(timeslot.start_time) > new Date());\n      if (firstAvailableDate) {\n        _selectedDate = firstAvailableDate.start_time;\n      }\n      nylasSchedulerStore?.set('selectedDate', _selectedDate);\n    }\n  }\n\n  componentDisconnected() {\n    this.baseProvider?.componentDisconnected();\n  }\n\n  @Watch('bookingInfo')\n  bookingInfoChanged(newVal?: NylasSchedulerBookingData) {\n    this.stores?.scheduler.set('bookingInfo', newVal);\n  }\n\n  @Watch('rescheduleBookingRef')\n  rescheduleBookingRefChanged(newVal?: string) {\n    if (newVal) {\n      const [configId, bookingId] = compactStringToUUIDs(newVal);\n      this.stores?.scheduler.set('rescheduleBookingId', bookingId);\n      this.refConfigId = configId;\n      this.nylasSchedulerConnector?.scheduler.setConfigId(configId);\n    }\n  }\n\n  @Watch('cancelBookingRef')\n  cancelBookingRefChanged(newVal?: string) {\n    if (newVal) {\n      const [configId, bookingId] = compactStringToUUIDs(newVal);\n      this.stores?.scheduler.set('cancelBookingId', bookingId);\n      this.refConfigId = configId;\n      this.nylasSchedulerConnector?.scheduler.setConfigId(configId);\n    }\n  }\n\n  @Watch('organizerConfirmationBookingRef')\n  organizerConfirmationBookingRefChanged(newVal?: string) {\n    if (newVal) {\n      const [configId, bookingId] = compactStringToUUIDs(newVal);\n      this.stores?.scheduler.set('organizerConfirmationBookingId', bookingId);\n      this.refConfigId = configId;\n      this.nylasSchedulerConnector?.scheduler.setConfigId(configId);\n    }\n  }\n\n  @Watch('localization')\n  localizationChanged(newVal?: Partial<Record<LANGUAGE_CODE, Locale>>) {\n    if (!newVal) {\n      return;\n    }\n\n    Object.keys(newVal).forEach(lang => {\n      if (!(lang in LANGUAGE_CODE)) {\n        return;\n      }\n      i18next.addResourceBundle(\n        lang,\n        'translation',\n        newVal[lang],\n        false, // Merge with existing translations\n        true, // Replace the existing translations with the same key\n      );\n      this.language = this.language;\n    });\n  }\n\n  @Watch('themeConfig')\n  themeConfigChanged(newVal?: ThemeConfig) {\n    this.applyThemeConfig(newVal);\n  }\n\n  @Listen('languageChanged')\n  languageChanged(event: CustomEvent<string>) {\n    const newLanguage = event.detail;\n    this.language = newLanguage;\n    i18next.changeLanguage(newLanguage);\n  }\n\n  /**\n   * This is a custom event handler that is used to register a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to register\n   * @returns Promise<void>\n   */\n  @Listen('registerComponent')\n  async registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.registerComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to unregister a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to unregister\n   * @returns Promise<void>\n   */\n  @Listen('unregisterComponent')\n  async unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.unregisterComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to refetch the availability when the month is changed.\n   */\n  @Listen('monthChanged')\n  async monthChangedHandler(event: CustomEvent<Date>) {\n    const date = event.detail;\n    const availableDaysInFuture = this.nylasSchedulerConnector?.schedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;\n    const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(date, availableDaysInFuture || 30);\n\n    if (startTime < endTimeForAvailableDaysInFuture && date.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n      const result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n\n      if (!result || 'error' in result) {\n        this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(result?.error) }, host: this.host });\n      }\n      const selectableDates = this.stores?.scheduler.get('selectableDates');\n      if (selectableDates && selectableDates.length > 0) {\n        this.stores?.scheduler.set('selectedDate', selectableDates[0]);\n      }\n    }\n  }\n\n  mapToBookingData(bookingInfo: NylasSchedulerBookingData): any {\n    const timeslot = this.stores?.scheduler.get('selectedTimeslot');\n    const language = this.stores?.scheduler.get('selectedLanguage');\n    const timezone = this.stores?.scheduler.get('selectedTimezone');\n    const startTime = timeslot?.start_time ? new Date(timeslot?.start_time).getTime() / 1000 : '';\n    const endTime = timeslot?.end_time ? new Date(timeslot?.end_time).getTime() / 1000 : '';\n    return {\n      additional_guests: bookingInfo.guests,\n      guest: bookingInfo.primaryParticipant,\n      additional_fields: bookingInfo.additionalFields,\n      start_time: startTime,\n      end_time: endTime,\n      email_language: language,\n      timezone: timezone,\n    };\n  }\n\n  /**\n   * This is a custom event handler to book an event.\n   */\n  @Listen('detailsConfirmed')\n  async bookButtonClickedHandler(event: CustomEvent<NylasSchedulerBookingData>) {\n    const bookingData = event.detail;\n    const mappedBookingData = this.mapToBookingData(bookingData);\n    const storeRescheduleId = this.nylasSchedulerConnector?.schedulerStore?.get('rescheduleBookingId');\n    const rescheduleBookingId = storeRescheduleId;\n    if (rescheduleBookingId) {\n      const result = await this.nylasSchedulerConnector?.scheduler.rescheduleBooking(rescheduleBookingId, bookingData);\n      if (!result || 'error' in result) {\n        this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(result?.error) }, host: this.host });\n      }\n      const resultData = (result as NylasSuccessResponse<NylasEvent>)?.data;\n      const bookedEventInfoEvent = this.bookedEventInfo.emit({ ...result, data: { ...resultData, ...mappedBookingData } });\n      if ('bookedEventInfo' in this.eventOverrides) {\n        await this.eventOverrides.bookedEventInfo(bookedEventInfoEvent, this.nylasSchedulerConnector);\n      }\n      return;\n    }\n    const result = await this.nylasSchedulerConnector?.scheduler.bookTimeslot(bookingData);\n    if (!result || 'error' in result) {\n      this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(result?.error) }, host: this.host });\n    }\n    const resultData = (result as NylasSuccessResponse<NylasEvent>)?.data;\n    const bookedEventInfoEvent = this.bookedEventInfo.emit({ ...result, data: { ...resultData, ...mappedBookingData } });\n    if ('bookedEventInfo' in this.eventOverrides) {\n      await this.eventOverrides.bookedEventInfo(bookedEventInfoEvent, this.nylasSchedulerConnector);\n    }\n  }\n\n  /**\n   * This is a custom event handler to update the selected date label.\n   */\n  @Listen('dateSelected')\n  dateSelectedHandler(event: CustomEvent<Date>) {\n    const date = event.detail;\n    this.selectedDateLabel = date ? date.toLocaleDateString(undefined, { dateStyle: 'full' }) : `${i18next.t('noDateSelected')}`;\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * cancel booking button is clicked on the cancel booking form.\n   */\n  @Listen('cancelBookedEventError')\n  cancelBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(event.detail.error) }, host: this.host });\n  }\n\n  @Listen('cancelBookedEventValidationError')\n  cancelBookedEventValidationErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(event.detail.error) }, host: this.host });\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * reschedule button is clicked on the booked event card.\n   */\n  @Listen('rescheduleBookedEventError')\n  rescheduleBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(event.detail.error) }, host: this.host });\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * manual confirmation button is clicked on the manual confirmation card.\n   */\n  @Listen('confirmBookingError')\n  confirmBookingErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(event.detail.error) }, host: this.host });\n  }\n\n  /**\n   * This method is used to retrieve the NylasScheduler instance\n   * @returns The NylasScheduler instance\n   */\n  @Method()\n  async getNylasSchedulerStore(): Promise<NylasSchedulerStoreType | undefined> {\n    return this.baseProvider?.getStore('scheduler');\n  }\n\n  /**\n   * This method is used to retrieve the NylasConnector instance\n   * @returns The NylasConnector instance\n   */\n  @Method()\n  async getNylasSchedulerConnector() {\n    return this.nylasSchedulerConnector;\n  }\n\n  @Method()\n  async getRef() {\n    return this.host;\n  }\n\n  private getErrorObject(error: NylasSchedulerErrorResponse['error']): Notification {\n    return {\n      title: error?.title || genericError.title,\n      category: error?.category || genericError.category,\n      type: NotificationType.Error,\n      description: error?.message || '',\n      id: new Date().getTime().toString(),\n      ttl: 'none',\n    };\n  }\n  private checkIfSessionIdOrConfigIdExists(): boolean {\n    if (!this.sessionId && !this.refConfigId && !(this.slug && this.clientId)) {\n      let description = '';\n\n      if (!this.sessionId) {\n        description += i18next.t('sessionIdRequiredErrorMessage');\n      }\n\n      if (!this.sessionId && !this.refConfigId && !(this.slug && this.clientId)) {\n        description = i18next.t('sessionIdRequiredErrorMessage') + ' ' + i18next.t('publicConfigErrorMessage');\n      }\n\n      this.nylasSchedulerError.emit({\n        notification: {\n          title: i18next.t('schedulingComponentErrorTitle'),\n          category: ErrorCategory.Component,\n          type: NotificationType.Error,\n          description: description,\n          id: new Date().getTime().toString(),\n          ttl: 'none',\n        },\n        host: this.host,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private isTimeslotValid(timeslot: Timeslot): boolean {\n    const selectedDate = new Date(timeslot.start_time);\n    if (selectedDate < new Date()) {\n      this.nylasSchedulerError.emit({\n        notification: {\n          title: i18next.t('invalidTimeslotErrorTitle'),\n          category: ErrorCategory.Component,\n          type: NotificationType.Error,\n          description: i18next.t('invalidTimeslotErrorMessage'),\n          id: new Date().getTime().toString(),\n          ttl: 'none',\n        },\n        host: this.host,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private validateAvailableDaysInFuture(\n    startDate: Date,\n    availableDaysInFuture: number,\n  ): {\n    startTime: number;\n    endTime: number;\n    endTimeForAvailableDaysInFuture: number;\n  } {\n    const today = new Date();\n    const startTime = new Date(startDate.getFullYear(), startDate.getMonth(), 1).getTime() / 1000;\n    const endTimeForCurrentMonth = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 1).getTime() / 1000;\n    const endTimeForAvailableDaysInFuture = Math.floor(addDaysToCurrentDate(today, availableDaysInFuture).getTime() / 1000);\n    const endTime = Math.min(endTimeForAvailableDaysInFuture, endTimeForCurrentMonth);\n    const startTimeWithOffset = startTime < today.getTime() / 1000 ? Math.floor(today.getTime() / 1000) : startTime;\n    return { startTime: startTimeWithOffset, endTime, endTimeForAvailableDaysInFuture };\n  }\n\n  private applyThemeConfig(themeConfig?: ThemeConfig) {\n    if (themeConfig) {\n      for (const [key, value] of Object.entries(themeConfig)) {\n        this.host.style.setProperty(`${key}`, value);\n      }\n    }\n  }\n\n  /**\n   * @slot timeslot-picker-cta-label - This slot is used to pass a custom label to the timeslot picker CTA. The default label is \"Next\".\n   * @slot custom-booking-form - This slot is used to pass a custom booking form to the Nylas Scheduling component.\n   * @deprecated  Deprecated in favor of using the additional fields defined in the config settings.\n   */\n  render() {\n    const showDefaultScheduler = this.mode === 'app';\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    const eventInfo = nylasSchedulerStore?.get('eventInfo');\n    const showBookingForm = nylasSchedulerStore?.get('showBookingForm');\n    const cancelledEventInfo = nylasSchedulerStore?.get('cancelledEventInfo');\n    const cancelBookingId = nylasSchedulerStore?.get('cancelBookingId');\n    const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot') as Timeslot;\n    const rescheduleBookingId = nylasSchedulerStore?.get('rescheduleBookingId');\n    const organizerConfirmationBookingId = nylasSchedulerStore?.get('organizerConfirmationBookingId');\n    const rejectBookingId = nylasSchedulerStore?.get('rejectBookingId');\n    const confirmedEventInfo = nylasSchedulerStore?.get('confirmedEventInfo');\n    const nylasBranding = nylasSchedulerStore?.get('nylasBranding') || this.nylasBranding;\n    const selectedDate = nylasSchedulerStore?.get('selectedDate');\n    const redirectUrl = nylasSchedulerStore?.get('configSettings')?.scheduler?.confirmation_redirect_url;\n    this.selectedDateLabel =\n      selectedDate && this.language\n        ? capitalizeFirstLetter(selectedDate.toLocaleDateString(LANGUAGE_CODE_MAP[this.language], { dateStyle: 'full' }))\n        : `${i18next.t('noDateSelected')}`;\n\n    if (showDefaultScheduler && (cancelBookingId || rejectBookingId) && !cancelledEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancel-flow-page\" part=\"cancel-flow-page\">\n              <nylas-cancel-booking-form\n                selectedTimeslot={selectedTimeslot}\n                cancelBookingId={cancelBookingId}\n                rejectBookingId={rejectBookingId}\n                exportparts=\"ncbf, ncbf__icon, ncbf__title, ncbf__description, ncbf__reason-textarea, ncbf__button-cta, ncbf__button-outline, ncbf__card\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Manual confirmation page is shown when the event is manually confirmed\n    if (showDefaultScheduler && organizerConfirmationBookingId) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"manual-confirmation-page\" part=\"manual-confirmation-page\">\n              <nylas-organizer-confirmation-card\n                organizerConfirmationBookingId={organizerConfirmationBookingId}\n                exportparts=\"nmcc, nmcc__title, nmcc__description, nmcc__button-cta, nmcc__button-outline\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Cancelled event card is shown when the event is cancelled\n    if (showDefaultScheduler && cancelledEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancelled-event-page\" part=\"cancelled-event-page\">\n              <nylas-cancelled-event-card\n                cancelledEventInfo={cancelledEventInfo}\n                exportparts=\"ncec, ncec__icon, ncec__title, ncec__description, ncec__button-outline, ncec__card\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Confirmed event card is shown when the event is confirmed\n    if (showDefaultScheduler && confirmedEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancelled-event-page\" part=\"confirmed-event-page\">\n              <nylas-confirmed-event-card\n                confirmedEventInfo={confirmedEventInfo}\n                exportparts=\"ncec, ncec__icon, ncec__title, ncec__description, ncec__button-outline, ncec__card\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Redirected to custom URL when the event is booked and redirect URL is provided\n    if (showDefaultScheduler && eventInfo && redirectUrl) {\n      window.location.assign(redirectUrl);\n      return;\n    }\n\n    // Booked event card is shown when the event is booked or booking is sent\n    if (showDefaultScheduler && eventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"booked-event-page\" part=\"booked-event-page\">\n              <nylas-booked-event-card\n                selectedTimeslot={selectedTimeslot}\n                eventInfo={eventInfo}\n                exportparts=\"nbec, nbec__title, nbec__card, nbec__description, nbec__button-outline, nbec__cancel-cta, nbec__reschedule-cta\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Date and time picker is shown when the event is not booked and no additional data is shown\n    if (showDefaultScheduler && (!eventInfo || !!rescheduleBookingId) && !showBookingForm) {\n      const timeslotPickerCTALabel = this.host.querySelector('[slot=\"timeslot-picker-cta-label\"]');\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            {rescheduleBookingId && <MessageBanner>{`${i18next.t('rescheduleTitle')}`}</MessageBanner>}\n            <div class=\"select-date-page\" part=\"select-date-page\">\n              <div class=\"left-panel\">\n                <nylas-date-picker exportparts=\"ndp, ndp__title, ndp__month-header, ndp__month-button, ndp__day, ndp__date, ndp__date--disabled, ndp__date--selected, ndp__date--current-day, ndp__date--current-month\"></nylas-date-picker>\n                <nylas-locale-switch exportparts=\"nls, nls__timezone, nls__timezone-dropdown, nls__timezone-drop-button, nls__timezone-drop-button-selected-label, nls__timezone-drop-content, nls__timezone-drop-label, nls__language, nls__language-dropdown, nls__language-drop-button, nls__language-drop-content, nls__language-drop-label\"></nylas-locale-switch>\n              </div>\n              <div class={`right-panel ${rescheduleBookingId ? 'reschedule' : ''}`}>\n                <h2>\n                  <calendar-icon></calendar-icon>\n                  <span id=\"selectedDate\">{this.selectedDateLabel}</span>\n                </h2>\n                <nylas-timeslot-picker exportparts=\"ntp, ntp__timeslot, ntp__timeslot--selected, ntp__button-primary\">\n                  {timeslotPickerCTALabel && (\n                    <span slot=\"timeslot-picker-cta-label\">\n                      <slot name=\"timeslot-picker-cta-label\"></slot>\n                    </span>\n                  )}\n                </nylas-timeslot-picker>\n              </div>\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Additional data is shown when the time is selected, event is not booked and additional data is shown\n    if (showDefaultScheduler && !eventInfo && showBookingForm) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            {rescheduleBookingId && <MessageBanner>{`${i18next.t('rescheduleTitle')}`}</MessageBanner>}\n            <div class=\"additional-data-page\" part=\"additional-data-page\">\n              <div class=\"left-panel\">\n                <div class=\"wrapper\">\n                  <nylas-selected-event-card exportparts=\"nsec, nsec__card, nsec__icon, nsec__date, nsec__time, nsec__timezone\"></nylas-selected-event-card>\n                </div>\n              </div>\n              <div class={`right-panel ${rescheduleBookingId ? 'reschedule' : ''}`}>\n                <nylas-booking-form exportparts=\"nbf, nbf__input-textfield, nbf__button-ghost, nbf__button-outline, nbf__button-primary, nbf__input-wrapper, nbf__checkbox-component, nbf__radio-button-group, nbf__textarea-component, nbf__dropdown, nbf__dropdown-button, nbf__dropdown-content\"></nylas-booking-form>\n              </div>\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    return (\n      <Host>\n        <slot />\n      </Host>\n    );\n  }\n}\n"]}