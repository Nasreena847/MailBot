var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { h, Host } from "@stencil/core";
import { capitalizeFirstLetter, debug } from "../../../utils/utils";
import { LANGUAGE_CODE_MAP, TIMEZONE_MAP } from "../../../common/constants";
import i18next from "../../../utils/i18n";
export class NylasBookedEventCard {
    constructor() {
        this.handleCancelBookingButtonClicked = () => {
            const startTime = new Date(this.selectedTimeslot.start_time);
            const minCancellationNotice = this.configSettings?.scheduler?.min_cancellation_notice;
            const dateTillCancellation = startTime.getTime() - minCancellationNotice * 60 * 1000;
            if (dateTillCancellation < new Date().getTime()) {
                this.cancelBookedEventValidationError.emit({
                    error: {
                        title: 'Cancellation Error',
                        message: `You cannot cancel the booking within ${minCancellationNotice} minutes of the event.`,
                    },
                });
            }
            else {
                this.cancelBookingButtonClicked.emit({ bookingId: this.eventInfo.booking_id });
            }
        };
        this.handleRescheduleButtonClicked = () => {
            const errorHandler = (error) => {
                this.rescheduleBookedEventError.emit(error);
            };
            this.rescheduleButtonClicked.emit({ bookingId: this.eventInfo.booking_id, errorHandler });
        };
        this.getPaticipantType = (type) => {
            switch (type) {
                case 'host':
                    return 'Host';
                case 'you':
                    return 'You';
                default:
                    return '';
            }
        };
        this.eventInfo = undefined;
        this.rescheduleBookingId = undefined;
        this.bookingInfo = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedTimeslot = undefined;
        this.configSettings = undefined;
        this.isLoading = undefined;
        this.selectedLanguage = navigator.language;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-booked-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-booked-event-card] Component did load`);
        if (!this.eventInfo) {
            console.warn('[nylas-booked-event-card] "eventInfo" prop missing. Please provide the event info to display the event details in the booked event card component.');
        }
        if (!this.bookingInfo) {
            console.warn('[nylas-booked-event-card] "bookingInfo" prop missing. Please provide the booking info to display the guest details in the booked event card component.');
        }
    }
    render() {
        const bookingType = this.configSettings?.booking_type;
        const isManualConfirmation = bookingType && bookingType !== 'booking';
        return (h(Host, { key: '6780a2a0b1c59efc4311278e85e6800f72ab6a98', part: "nbec" }, h("div", { key: 'eed7c01aaaca8c92a65beccac1242efe1194f4a3', class: "nylas-booked-event-card" }, h("div", { key: 'f20609db6794c30012f299017b01bf63752b6b7f', class: "booked-event-timezone" }, h("globe-icon", { key: 'e2f277abf894b2c34e32f4cec4309e81a1b6e19b' }), TIMEZONE_MAP[this.selectedTimezone]), h("div", { key: '84c8bcdc7f247eade07d502cd480430cfb2894fd', class: "event-card-wrapper", part: "nbec__card" }, h("div", { key: '58835f4e2b261dff59e212573a2391cac9217cb6', class: "calendar-icon" }, h("calendar-check-icon", { key: '53e406d85941c03c7d0c7c5e86e071f948fe85bd' })), h("div", { key: '0e16b5cabfe5afcea5fd15fefbf88ed2558c5492', class: "booked-event-header" }, h("h2", { key: '8ad08c13c5860cf47b217cc9c6d82dddb0940894', slot: "card-title", part: "nbec__title" }, !!this.rescheduleBookingId && !this.isLoading
            ? `${i18next.t('bookingRescheduled')}`
            : isManualConfirmation && !this.isLoading
                ? `${i18next.t('bookingSent')}`
                : `${i18next.t('bookingConfirmed')}`, "!"), h("div", { key: '07a056ef47e7d3c173c7ad67acedc5b94748d28f', class: "card-description", part: "nbec__description" }, isManualConfirmation ? i18next.t('bookingSentDescription') : h("span", null, i18next.t('bookingConfirmedDescription')))), h("div", { key: '4d4f43295cef324b63b3d5fa6f3476dcf3163d25', class: "booking-date-time" }, h("checkmark-circle-icon", { key: '2c717204ed669e40898c8b23dd408e3c62608e8f' }), h("h3", { key: '1a2ec41f82e740d9bdbac8fe1a818454e402db2f' }, i18next.t('bookingDateAndTimeHeader')), h("p", { key: '1451ecae33ccfbe9f0bc4b682d90a64313f1120c' }, this.selectedTimeslot?.start_time
            ? capitalizeFirstLetter(new Date(this.selectedTimeslot?.start_time).toLocaleDateString(LANGUAGE_CODE_MAP[this.selectedLanguage], { dateStyle: 'full' }))
            : '-', ' ', h("br", { key: 'df6922d0097f6d3aa7b17dee26a7903e89c9258c' }), new Date(this.selectedTimeslot?.start_time).toLocaleTimeString(undefined, { timeStyle: 'short' }), " -", ' ', new Date(this.selectedTimeslot?.end_time).toLocaleTimeString(undefined, { timeStyle: 'short' }))), h("div", { key: '6e4264737dc50225feeec5374a6bec91de77a0ea', class: "booking-participants" }), !isManualConfirmation && (h("div", { class: "button-container" }, h("div", { class: {
                'footer': true,
                'no-footer': (this.configSettings?.scheduler?.hide_cancellation_options && this.configSettings?.scheduler?.hide_rescheduling_options) ||
                    this.configSettings?.booking_type === 'organizer-confirmation',
                'no-template-cols': this.configSettings?.scheduler?.hide_cancellation_options || this.configSettings?.scheduler?.hide_rescheduling_options,
            } }, !this.configSettings?.scheduler?.hide_cancellation_options && (h("button-component", { variant: 'destructive', onClick: this.handleCancelBookingButtonClicked, part: "nbec__button-outline nbec__cancel-cta" }, `${i18next.t('cancelBookingButton')}`)), !this.configSettings?.scheduler?.hide_rescheduling_options && (h("button-component", { variant: 'basic', onClick: this.handleRescheduleButtonClicked, part: "nbec__button-outline nbec__reschedule-cta" }, `${i18next.t('rescheduleBookingButton')}`)))))))));
    }
    static get is() { return "nylas-booked-event-card"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-booked-event-card.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-booked-event-card.css"]
        };
    }
    static get properties() {
        return {
            "eventInfo": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "NylasEvent",
                    "resolved": "{ booking_id: string; organizer: { email: string; name: string; is_organizer?: boolean | undefined; }; title: string; description: string; status: string; }",
                    "references": {
                        "NylasEvent": {
                            "location": "import",
                            "path": "@/common/types",
                            "id": "src/common/types.ts::NylasEvent"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The booked event."
                }
            },
            "rescheduleBookingId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Booking flow type."
                },
                "attribute": "reschedule-booking-id",
                "reflect": false
            },
            "bookingInfo": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "NylasSchedulerBookingData",
                    "resolved": "any",
                    "references": {
                        "NylasSchedulerBookingData": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::unknown"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The booking info used to book / reschedule the event."
                },
                "attribute": "booking-info",
                "reflect": false
            },
            "selectedTimezone": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected timezone."
                },
                "attribute": "selected-timezone",
                "reflect": false,
                "defaultValue": "Intl.DateTimeFormat().resolvedOptions().timeZone"
            },
            "selectedTimeslot": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Timeslot",
                    "resolved": "{ start_time: Date; end_time: Date; emails: string[]; }",
                    "references": {
                        "Timeslot": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Timeslot"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected timeslot."
                }
            },
            "configSettings": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "ConfigSettings",
                    "resolved": "any",
                    "references": {
                        "ConfigSettings": {
                            "location": "import",
                            "path": "../../..",
                            "id": "src/index.ts::unknown"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The config settings for the scheduler."
                },
                "attribute": "config-settings",
                "reflect": false
            },
            "isLoading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The loading state prop. Used to display loading state when fetching availability."
                },
                "attribute": "is-loading",
                "reflect": false
            },
            "selectedLanguage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The selected language."
                },
                "attribute": "selected-language",
                "reflect": false,
                "defaultValue": "navigator.language"
            }
        };
    }
    static get events() {
        return [{
                "method": "cancelBookingButtonClicked",
                "name": "cancelBookingButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Cancel booking button clicked event."
                },
                "complexType": {
                    "original": "{ bookingId: string }",
                    "resolved": "{ bookingId: string; }",
                    "references": {}
                }
            }, {
                "method": "rescheduleButtonClicked",
                "name": "rescheduleButtonClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Reschedule button clicked event."
                },
                "complexType": {
                    "original": "{ bookingId: string; errorHandler?: (error: NylasSchedulerErrorResponse) => void }",
                    "resolved": "{ bookingId: string; errorHandler?: ((error: NylasSchedulerErrorResponse) => void) | undefined; }",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "rescheduleBookedEventError",
                "name": "rescheduleBookedEventError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs while rescheduling the booking."
                },
                "complexType": {
                    "original": "NylasSchedulerErrorResponse",
                    "resolved": "NylasSchedulerErrorResponse",
                    "references": {
                        "NylasSchedulerErrorResponse": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::NylasSchedulerErrorResponse"
                        }
                    }
                }
            }, {
                "method": "cancelBookedEventValidationError",
                "name": "cancelBookedEventValidationError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when an error occurs while cancelling the booking."
                },
                "complexType": {
                    "original": "{\n    error: {\n      title: string;\n      message: string;\n    };\n  }",
                    "resolved": "{ error: { title: string; message: string; }; }",
                    "references": {}
                }
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-booked-event-card',
        stateToProps: new Map([
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.rescheduleBookingId', 'rescheduleBookingId'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.configSettings', 'configSettings'],
        ]),
        eventToProps: {
            cancelBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setCancel(event.detail.bookingId);
            },
            rescheduleButtonClicked: async (event, nylasSchedulerConnector) => {
                const result = await nylasSchedulerConnector.scheduler.setReschedule(event.detail.bookingId);
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
            rescheduleBookedEventError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booked-event-card', 'rescheduleBookedEventError', event.detail);
            },
            cancelBookedEventValidationError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booked-event-card', 'cancelBookedEventValidationError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookedEventCard.prototype, "render", null);
//# sourceMappingURL=nylas-booked-event-card.js.map
