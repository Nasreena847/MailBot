var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import { DEFAULT_FORM_FIELD_TYPES, FIELD_TYPES } from "../../../common/constants";
import Sortable from "sortablejs/modular/sortable.complete.esm.js";
export class NylasBookingFormConfig {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'booking-form-config';
        this.additonalFields = undefined;
        this.formFields = undefined;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    connectedCallback() {
        debug('nylas-booking-form-config', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-booking-form-config', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-booking-form-config', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        const staticFields = [
            {
                type: 'text',
                label: 'Your name',
                key: 'your_name',
                typeLabel: 'Short text',
                readonly: true,
                required: true,
                isOpen: false,
                order: 0,
            },
            {
                type: 'email',
                label: 'Your Email',
                key: 'your_email',
                typeLabel: 'Email',
                readonly: true,
                isOpen: false,
                required: true,
                order: 1,
            },
        ];
        this.formFields = [...staticFields];
    }
    componentDidLoad() {
        debug('nylas-booking-form-config', 'componentDidLoad');
        const additionalFields = Object.entries(this.selectedConfiguration?.scheduler?.additional_fields || {}).map(([id, field]) => ({ ...field, key: id })) ||
            this.additonalFields ||
            [];
        this.formFields = [
            ...this.formFields,
            ...additionalFields
                .sort((a, b) => a.order - b.order)
                .map((f, i) => {
                const { typeLabel } = FIELD_TYPES.find(field => field.type === f.type);
                f.order = i + 2;
                return { ...f, isOpen: false, typeLabel };
            }),
        ];
        const container = this.host.shadowRoot?.getElementById('fields');
        Sortable.create(container, {
            animation: 150,
            swap: true,
            swapClass: 'highlight',
            onEnd: this.swapFields.bind(this),
            filter: '.fixed',
            onMove: evt => !evt.related.classList.contains('fixed'),
        });
    }
    watchHandler(newValue) {
        const additionalFields = newValue;
        const sortedFields = additionalFields
            .filter(f => !f.readonly)
            .sort((a, b) => a.order - b.order)
            .map((f, i) => {
            const field = {
                type: f.type,
                required: f.required,
                label: f.label,
                order: i + 1,
                options: f.options,
                key: f.key,
            };
            return { ...field };
        });
        const addFieldsMap = sortedFields.reduce((acc, field) => {
            acc[field.key] = {
                type: field.type,
                required: field.required,
                order: field.order,
                options: field.options,
                label: field.label,
            };
            return acc;
        }, {});
        this.valueChanged.emit({
            value: addFieldsMap,
            name: this.name,
        });
    }
    nylasFormDropdownChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'add-field') {
            const field = FIELD_TYPES.find(f => f.type === value);
            const maxOrder = Math.max(...this.formFields.map(f => f.order));
            const newField = { ...field, order: maxOrder + 1 };
            const existingFieldWithLabel = this.formFields.filter(f => f.label.startsWith(field.label));
            if (existingFieldWithLabel && existingFieldWithLabel.length > 0) {
                const label = `${field.label} ${existingFieldWithLabel.length + 1}`;
                newField.label = label;
                const key = label.split(' ').join('_');
                newField.key = key;
            }
            this.formFields = [...this.formFields, newField];
        }
    }
    nylasFormInputChangedHandler(event) {
        const { name } = event.detail;
        const [fieldIndex, optionIndex] = name.split('_');
        if (optionIndex) {
            this.fieldOptionChange(parseInt(fieldIndex), parseInt(optionIndex), event);
        }
        else {
            this.fieldLabelChange(parseInt(fieldIndex), event);
        }
    }
    swapFields(event) {
        const { oldIndex, newIndex } = event;
        if (oldIndex !== undefined && newIndex !== undefined && oldIndex !== newIndex) {
            const newArray = [...this.formFields].map(f => {
                if (f.order === oldIndex) {
                    return {
                        ...f,
                        order: newIndex,
                    };
                }
                if (f.order === newIndex) {
                    return {
                        ...f,
                        order: oldIndex,
                    };
                }
                return f;
            });
            this.formFields = newArray;
        }
    }
    fieldToggle(index) {
        this.formFields = this.formFields.map((f, i) => {
            if (index == i) {
                f.isOpen = !f.isOpen;
            }
            return f;
        });
    }
    fieldRemove(index) {
        this.formFields = this.formFields.filter((_, i) => i !== index);
    }
    fieldRequired(index) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === index) {
                field.required = !field.required;
            }
            return field;
        });
    }
    fieldLabelChange(index, event) {
        const target = event.detail;
        this.formFields = this.formFields.map((field, i) => {
            if (i === index) {
                field.label = target.value;
            }
            return field;
        });
    }
    fieldOptionAdd(index) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === index) {
                if (!field.options) {
                    field.options = [];
                }
                field.options = [...field.options, ''];
            }
            return field;
        });
    }
    fieldOptionRemove(fieldIndex, index) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === fieldIndex) {
                if (!field.options) {
                    field.options = [];
                }
                field.options = field.options.filter((_, i) => i !== index);
            }
            return field;
        });
    }
    fieldOptionChange(fieldIndex, index, event) {
        this.formFields = this.formFields.map((field, i) => {
            if (i === fieldIndex) {
                if (!field.options) {
                    field.options = [];
                }
                field.options = field.options.map((o, i) => {
                    if (i === index) {
                        o = event.detail.value;
                    }
                    return o;
                });
            }
            return field;
        });
    }
    render() {
        return (h(Host, { key: '8db177dc9df5c63aaae9e657b81a564d2df2d34e' }, h("div", { key: '3026f554b98ffdb0e14173a49bff44a85ad5cc17', class: "nylas-booking-form-config" }, h("div", { key: '4369640ba9d4411713d5066324fa6f59fb4040da', class: "header", part: "nbfc__header" }, h("div", { key: '1a4bfa5b5ef7532cb36be53bdc1f7d73db365c33', class: "header_text" }, h("h3", { key: 'c689200151903cb8b410c78da9dafc6550d0c51e' }, "Booking form"), h("p", { key: 'a53818d44fb4fce66b4a07d41f4fd1322efb4f5a' }, "Add custom fields to the booking form.")), h("div", { key: '8059ccdaad2ccabd0f33728cd4f93b1f3b8aebdd', class: "header_action" }, h("select-dropdown", { key: '7c11e6c8d82c9b7d585f85e2847d48c70d696e72', name: "add-field", exportparts: "sd_dropdown: nbfc__add_field, sd_dropdown-button: nbfc__add_field-button, sd_dropdown-content: nbfc__add_field-dropdown-content", options: DEFAULT_FORM_FIELD_TYPES, withSearch: false, withChevron: false, dropdownButtonText: "Add new field" }, h("span", { key: '7e099ef91121f954377db3a4a0c517d58df3a1e8', slot: "select-icon" }, h("plus-icon", { key: 'bbdd97931d1826cc4955e1bc695f984f8ee35a20', width: "15", height: "15" }))))), h("div", { key: '417adc5084d74399f9a77f2da83117fe7c0160a3', class: "content" }, h("div", { key: '598bbda9bf5b9d87a8e13fc336c3879b327c58e6', id: "fields", class: "additional_fields", part: "nbfc__additional_fields" }, this.formFields.map((field, i) => {
            return (h("div", { class: `form-field draggable ${field.readonly && 'fixed'}`, part: "nbfc__form_field", key: i }, h("div", { class: "form-field_header", part: "nbfc__form_field-header" }, h("span", { class: "dragable" }, h("dragable-icon", { width: "24", height: "25" })), h("div", { class: "form-field_header_text" }, h("h4", null, field.label), h("p", null, field.typeLabel)), h("div", { class: "form-field_header_actions" }, h("span", { class: `is-required` }, field.required ? 'Required' : 'Optional'), !field.readonly && (h("button", { onClick: () => {
                    this.fieldRemove(i);
                } }, h("close-icon", null))), h("span", { class: `chevron ${field.isOpen ? 'open' : 'closed'}`, onClick: () => {
                    this.fieldToggle(i);
                } }, h("chevron-icon", { width: "24", height: "24" })))), h("div", { class: `form-field_content ${!field.isOpen && 'hidden'}`, part: "nbfc__form_field-content" }, h("div", { class: "inputs" }, h("input-component", { class: 'label-input', name: `${i}`, key: i, label: "Label", required: false, readOnly: field.readonly, defaultValue: field.label }, h("div", { class: "required-input", slot: "additional-input" }, h("input", { type: "checkbox", name: `required_${field.order}`, id: `required_${field.order}`, onClick: () => {
                    this.fieldRequired(i);
                }, checked: field.required, disabled: field.readonly }), h("label", { htmlFor: `required_${field.order}`, "aria-label": "Required" }, "Required")))), field.options != undefined && (h("div", { class: "options-container" }, h("h4", null, "ALL OPTIONS"), h("div", { class: "options" }, field.options.map((o, j) => {
                return (h("div", { class: "option" }, h("input-component", { key: j, name: `${i}_${j}`, label: field.typeLabel + ' option ' + (j + 1), required: true, defaultValue: o }, j > 1 && (h("div", { class: "required-input", slot: "additional-input" }, h("button", { onClick: () => {
                        this.fieldOptionRemove(i, j);
                    } }, h("close-icon", null)))))));
            })), h("button", { onClick: () => {
                    this.fieldOptionAdd(i);
                }, part: "nap__add-time-range" }, h("add-circle-icon", null), " Add an option"))))));
        }))))));
    }
    static get is() { return "nylas-booking-form-config"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-booking-form-config.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-booking-form-config.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected configuration."
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the booking form config."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'booking-form-config'"
            },
            "additonalFields": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AdditionalFields[]",
                    "resolved": "AdditionalFields[] | undefined",
                    "references": {
                        "AdditionalFields": {
                            "location": "global",
                            "id": "global::AdditionalFields"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The additional fields to be displayed on the booking form."
                }
            }
        };
    }
    static get states() {
        return {
            "formFields": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected availability / open hours change."
                },
                "complexType": {
                    "original": "{\n    value: Record<string, AdditionalFields>;\n    name: string;\n  }",
                    "resolved": "{ value: Record<string, AdditionalFields>; name: string; }",
                    "references": {
                        "Record": {
                            "location": "global",
                            "id": "global::Record"
                        },
                        "AdditionalFields": {
                            "location": "global",
                            "id": "global::AdditionalFields"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "formFields",
                "methodName": "watchHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormInputChanged",
                "method": "nylasFormInputChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-booking-form-config',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingFormConfig.prototype, "render", null);
//# sourceMappingURL=nylas-booking-form-config.js.map
