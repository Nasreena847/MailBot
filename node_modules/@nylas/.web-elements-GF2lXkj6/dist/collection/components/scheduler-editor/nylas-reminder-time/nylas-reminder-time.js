var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { REMINDER_MINUTE_OPTIONS, REMINDER_HOUR_OPTIONS, REMINDER_DAY_OPTIONS } from "../../../common/constants";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
function getInitialTimeValue(timeInMinutes) {
    if (!timeInMinutes)
        return 30;
    if (timeInMinutes >= 60 * 24)
        return timeInMinutes / (60 * 24);
    if (timeInMinutes >= 90 || timeInMinutes === 60)
        return timeInMinutes / 60;
    return timeInMinutes;
}
function getInitialTimeIncrement(timeInMinutes) {
    if (!timeInMinutes)
        return 30;
    if (timeInMinutes >= 60 * 24)
        return 60 * 24;
    if (timeInMinutes >= 90 || timeInMinutes === 60)
        return 60;
    return 1;
}
export class NylasReminderTime {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'reminder-time';
        this.eventReminderTimeMinutes = undefined;
        this.reminderTime = getInitialTimeValue(this.eventReminderTimeMinutes);
        this.reminderTimeMinutes = this.eventReminderTimeMinutes ?? 30;
        this.reminderTimeincrement = getInitialTimeIncrement(this.eventReminderTimeMinutes);
        this.reminderTimeMinutesOptions = REMINDER_MINUTE_OPTIONS;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-reminder-time', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    reminderTimeMinutesChangedHandler(newValue, oldValue) {
        debug('nylas-reminder-time', 'reminderTimeMinutesChangedHandler', newValue);
        if (newValue === oldValue) {
            return;
        }
        this.valueChanged.emit({ value: newValue.toString(), name: this.name });
    }
    connectedCallback() {
        debug('nylas-reminder-time', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-reminder-time', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.setReminderTimeMinuteOptions();
    }
    componentDidLoad() {
        debug('nylas-reminder-time', 'componentDidLoad');
    }
    disconnectedCallback() {
        debug('nylas-reminder-time', 'disconnectedCallback');
    }
    setReminderTimeMinuteOptions() {
        if (this.reminderTimeincrement === 1) {
            this.reminderTimeMinutesOptions = REMINDER_MINUTE_OPTIONS;
        }
        else if (this.reminderTimeincrement === 60) {
            this.reminderTimeMinutesOptions = REMINDER_HOUR_OPTIONS;
        }
        else
            this.reminderTimeMinutesOptions = REMINDER_DAY_OPTIONS;
        return this.reminderTimeMinutesOptions;
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        const { value } = event.detail;
        this.reminderTimeincrement = parseInt(value);
        if (this.reminderTimeincrement === 1) {
            this.reminderTime = 60;
        }
        else {
            this.reminderTime = 1;
        }
        this.setReminderTimeMinuteOptions();
        this.reminderTimeMinutes = this.reminderTime * this.reminderTimeincrement;
        this.internals.setFormValue(this.reminderTimeMinutes.toString(), this.name);
    }
    inputOptionChangedHandler(event) {
        debug('nylas-calendar-picker', 'inputOptionChangedHandler', event.detail);
        const { value } = event.detail;
        this.reminderTime = value;
        this.reminderTimeMinutes = this.reminderTime * this.reminderTimeincrement;
        this.internals.setFormValue(this.reminderTimeMinutes.toString(), this.name);
    }
    render() {
        const reminderTimeOptions = [
            { value: 1, label: 'minute' },
            { value: 60, label: 'hour' },
            { value: 60 * 24, label: 'day' },
        ];
        return (h(Host, { key: '95650f7ac9614dca98c8e69c27b4b21467979b6d' }, h("div", { key: '14d23a6f804d63906402639d30550b9cd0ae3138', class: "nylas-reminder-time", part: "nrt" }, h("div", { key: 'a62fe9f7394f5a2bb34beebb29d81bf7aecacb85', class: "nylas-reminder-time__wrapper" }, h("input-dropdown", { key: '031b5fe434b4d354ed0bfdbac6b09b4695e2d6ce', name: 'reminder-time', options: this.reminderTimeMinutesOptions, inputValue: this.reminderTime.toString(), exportparts: "id_dropdown: nrt__input_dropdown, id_dropdown-input: nrt__input_dropdown-input, id_dropdown-content: nrt__input_dropdown-content", defaultInputOption: this.reminderTimeMinutesOptions.find(i => i.value == this.reminderTime) ?? reminderTimeOptions[0] }), h("select-dropdown", { key: 'cd3c38a0fef80875fe5ad9d418aaf53ac2a0f078', name: 'reminder-time-unit', options: reminderTimeOptions, pluralizedLabel: this.reminderTime > 1 ? 's' : '', exportparts: "sd_dropdown: nrt__dropdown, sd_dropdown-button: nrt__dropdown-button, sd_dropdown-content: nrt__dropdown-content", defaultSelectedOption: reminderTimeOptions.find(i => i.value == this.reminderTimeincrement) ?? reminderTimeOptions[0], withSearch: false })))));
    }
    static get is() { return "nylas-reminder-time"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-reminder-time.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-reminder-time.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the reminder time. Default is 'reminder time'."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'reminder-time'"
            },
            "eventReminderTimeMinutes": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The event reminder time in minutes as set in the configuration."
                },
                "attribute": "event-reminder-time-minutes",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "reminderTime": {},
            "reminderTimeMinutes": {},
            "reminderTimeincrement": {},
            "reminderTimeMinutesOptions": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the event reminder time changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "reminderTimeMinutes",
                "methodName": "reminderTimeMinutesChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "inputOptionChanged",
                "method": "inputOptionChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-reminder-time',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasReminderTime.prototype, "render", null);
//# sourceMappingURL=nylas-reminder-time.js.map
