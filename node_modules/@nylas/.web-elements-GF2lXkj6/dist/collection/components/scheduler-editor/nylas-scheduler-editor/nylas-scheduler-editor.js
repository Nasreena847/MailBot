import { NylasBaseProvider } from "../../../common/abstract-provider";
import { NylasIdentityRequestWrapper } from "../../../common/nylas-api-request";
import { NylasSchedulerConfigConnector } from "../../../connector/nylas-scheduler-config-connector/index";
import { CreateNylasSchedulerConfigStore } from "../../../stores/scheduler-config-store";
import { debug } from "../../../utils/utils";
import { NylasSessions } from "@nylas/identity";
import { Host, h } from "@stencil/core";
import { LoginRequired } from "./LoginRequired";
import ExpressFlow from "./ExpressFlow";
export class NylasSchedulerEditor {
    constructor() {
        this.handleSchedulerConfigCloseClicked = (_event) => {
            const event = this.schedulerConfigCloseClicked.emit(this.host);
            if ('schedulerConfigCloseClicked' in this.eventOverrides) {
                this.eventOverrides.schedulerConfigCloseClicked(event, this.nylasSchedulerConfigConnector);
            }
            if (!event.defaultPrevented) {
                localStorage.removeItem('grant');
                localStorage.removeItem('user');
                window.location.reload();
            }
        };
        this.authenticationUrl = async (provider) => {
            if (!this.nylasApiRequest) {
                console.error(`[nylas-scheduler-editor] Nylas API Request is not initialized.`);
                return '';
            }
            const url = await this.nylasApiRequest.authenticationUrl({ provider });
            return url || '';
        };
        this.configurationId = undefined;
        this.nylasApiRequest = undefined;
        this.nylasSessionsConfig = undefined;
        this.defaultAuthArgs = undefined;
        this.eventOverrides = {};
        this.schedulerPreviewLink = '';
        this.defaultSchedulerConfigState = undefined;
        this.mode = 'app';
        this.additionalParticipants = undefined;
        this.hideEditorTabs = [];
        this.conferenceProviders = undefined;
        this.requiresSlug = false;
        this.automaticComponentRegistration = true;
    }
    connectedCallback() {
        debug(`[nylas-scheduler-editor] connectedCallback`);
    }
    async componentWillLoad() {
        debug(`[nylas-scheduler-editor] componentWillLoad`);
        const filteredAdditionalParticipants = this.additionalParticipants?.filter(participant => {
            const filteredCalendars = participant.calendars?.length > 0 ? participant.calendars.filter(calendar => calendar.id && calendar.name) : [];
            if (participant.name && participant.email && filteredCalendars.length > 0) {
                return {
                    name: participant.name,
                    email: participant.email,
                    calendars: filteredCalendars,
                };
            }
        });
        this.stores = {
            schedulerConfig: CreateNylasSchedulerConfigStore({
                ...this.defaultSchedulerConfigState,
                additionalParticipants: filteredAdditionalParticipants,
                conferenceProviders: this.conferenceProviders,
                hideEditorTabs: this.hideEditorTabs,
                requiresSlug: this.requiresSlug,
            }),
        };
        if (!this.nylasApiRequest && this.nylasSessionsConfig) {
            const nylasSession = new NylasSessions(this.nylasSessionsConfig);
            await nylasSession.isLoggedIn();
            nylasSession.onLoginSuccess(async () => {
                const currentUser = await this.nylasSchedulerConfigConnector?.schedulerConfig?.currentUser();
                if (currentUser) {
                    const loggedInEvent = this.loggedIn.emit(this.host);
                    if ('loggedIn' in this.eventOverrides) {
                        await this.eventOverrides.loggedIn(loggedInEvent, this.nylasSchedulerConfigConnector);
                    }
                    if (!loggedInEvent.defaultPrevented) {
                        await this.loggedInHandler(currentUser);
                    }
                }
            });
            nylasSession.onLoginFail(async () => {
                this.stores?.schedulerConfig?.set('currentUser', null);
                const loggedOutEvent = this.loggedOut.emit(this.host);
                if ('loggedOut' in this.eventOverrides) {
                    await this.eventOverrides.loggedOut(loggedOutEvent, this.nylasSchedulerConfigConnector);
                    if (loggedOutEvent.defaultPrevented) {
                        return;
                    }
                }
            });
            this.nylasApiRequest = new NylasIdentityRequestWrapper(nylasSession);
        }
        if (this.nylasApiRequest && this.defaultAuthArgs) {
            this.nylasApiRequest.setDefaultAuthArgs(this.defaultAuthArgs);
        }
        this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);
        const nylasSchedulerConfigStore = this.baseProvider.getStore('schedulerConfig');
        this.nylasSchedulerConfigConnector = new NylasSchedulerConfigConnector({
            nylasApiRequest: this.nylasApiRequest,
            nylasSchedulerConfigStore: nylasSchedulerConfigStore,
        });
        const initEvent = this.init.emit(this.host);
        if ('init' in this.eventOverrides) {
            await this.eventOverrides.init(initEvent, this.nylasSchedulerConfigConnector);
        }
        if (!initEvent.defaultPrevented) {
            const currentUser = await this.nylasSchedulerConfigConnector?.schedulerConfig?.currentUser();
            if (currentUser) {
                const loggedInEvent = this.loggedIn.emit(this.host);
                if ('loggedIn' in this.eventOverrides) {
                    await this.eventOverrides.loggedIn(loggedInEvent, this.nylasSchedulerConfigConnector);
                }
                if (!loggedInEvent.defaultPrevented) {
                    await this.loggedInHandler(currentUser);
                }
            }
            else {
                this.stores?.schedulerConfig?.set('currentUser', null);
                const loggedOutEvent = this.loggedOut.emit(this.host);
                if ('loggedOut' in this.eventOverrides) {
                    await this.eventOverrides.loggedOut(loggedOutEvent, this.nylasSchedulerConfigConnector);
                    if (loggedOutEvent.defaultPrevented) {
                        return;
                    }
                }
            }
        }
        this.stores?.schedulerConfig?.onChange('selectedConfiguration', async (config) => {
            if (config && config.id) {
                this.configurationId = config.id;
            }
        });
        this.baseProvider?.componentWillLoad(this.nylasSchedulerConfigConnector);
    }
    async componentDidLoad() {
        debug(`[nylas-scheduler-editor] componentDidLoad`);
        await this.baseProvider?.componentDidLoad();
    }
    async componentDisconnected() {
        await this.baseProvider?.componentDisconnected();
    }
    async configurationIdChanged(newConfigurationId) {
        if (newConfigurationId) {
            await this.nylasSchedulerConfigConnector?.schedulerConfig?.getConfigurationById(newConfigurationId);
            this.stores?.schedulerConfig?.set('action', 'edit');
        }
        else {
            this.stores?.schedulerConfig?.set('selectedConfiguration', {});
            this.stores?.schedulerConfig?.set('action', null);
        }
    }
    async store() {
        return this.stores?.schedulerConfig;
    }
    async schedulerConnector() {
        return this.nylasSchedulerConfigConnector;
    }
    async registerComponentHandler(event) {
        this.baseProvider?.registerComponent(event.detail);
    }
    async unregisterComponentHandler(event) {
        this.baseProvider?.unregisterComponent(event.detail);
    }
    async loggedInHandler(currentUser) {
        this.stores?.schedulerConfig?.set('currentUser', currentUser);
        if (!this.nylasSchedulerConfigConnector) {
            return;
        }
        await this.nylasSchedulerConfigConnector.schedulerConfig?.getCalendars();
        if (this.configurationId) {
            const data = await this.nylasSchedulerConfigConnector.schedulerConfig?.getConfigurationById(this.configurationId);
            if (data && data[0]?.id) {
                this.stores?.schedulerConfig?.set('action', 'edit');
            }
        }
    }
    render() {
        const hasSlot = this.host.querySelector('[slot="custom-page-style-inputs"]');
        const selectedConfigId = this.stores?.schedulerConfig?.state.selectedConfiguration?.id;
        return (h(Host, { key: 'e3716df4b6320311046af1b529ee494c9b16c782' }, h("div", { key: '1e33292840f2906cfe0f0d4519192851e18d0ce7', class: "scheduler-editor-header", part: "nse__header" }, h("h1", { key: '830100ac6a1f5c369a6e665f4fe2ea458bf5b44f', class: "scheduler-editor-title", part: "nse__title" }, h("calendar-icon", { key: 'b69dafa07a0af6fae4e1f57be7c98221bc8fc237', width: "18", height: "18" }), "Scheduler Editor"), h("button", { key: 'c2e4c17d62f67c8c4011a8f41357481bd17eb883', class: "scheduler-editor-close", title: "logout", onClick: e => this.handleSchedulerConfigCloseClicked(e), part: "nse__close-button" }, h("close-icon", { key: '74eb653f9b8fea4a7c3669f7a707a5ebaa18d8d1', width: "18", height: "18" }))), h("div", { key: '33273e52377ec5b88672ed66db2a43ceab01b583', class: "scheduler-editor-content", part: "nse__content" }, this.stores?.schedulerConfig?.state.currentUser && this.stores.schedulerConfig.state.action === null && (h("div", { class: "list-configurations" }, h("nylas-list-configurations", { exportparts: "nlc__create-new-cta" }))), this.stores?.schedulerConfig?.state.currentUser && this.stores.schedulerConfig.state.action === 'create' && (h("nylas-editor-tabs", { mode: "composable" }, h(ExpressFlow, { currentUser: this.stores?.schedulerConfig?.state.currentUser, calendars: this.stores?.schedulerConfig?.state?.calendars, selectedConfiguration: this.stores?.schedulerConfig?.state?.selectedConfiguration }))), this.stores?.schedulerConfig?.state.currentUser && this.stores.schedulerConfig.state.action === 'edit' && (h("nylas-editor-tabs", { key: selectedConfigId, mode: this.mode }, this.mode === 'composable' && h("slot", null), this.mode === 'app' && hasSlot && (h("div", { style: { display: 'none' }, slot: "custom-page-style-inputs", key: selectedConfigId }, h("slot", { name: "custom-page-style-inputs" }))))), !this.stores?.schedulerConfig?.state.currentUser && (h("slot", { name: "login-required" }, h(LoginRequired, { authenticationUrl: this.authenticationUrl }))))));
    }
    static get is() { return "nylas-scheduler-editor"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-scheduler-editor.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-scheduler-editor.css"]
        };
    }
    static get properties() {
        return {
            "configurationId": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "*\nThe configuration id to use for the scheduler editor.\nIf provided, then the scheduler editor will try and fetch the configuration\nwith the provided id. If found, it will automatically load the editor\nwith the configuration settings for editing."
                },
                "attribute": "configuration-id",
                "reflect": false
            },
            "nylasApiRequest": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "NylasApiRequest",
                    "resolved": "NylasApiRequest | undefined",
                    "references": {
                        "NylasApiRequest": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::NylasApiRequest"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The Nylas Api Request instance.\nUsed to make requests to the Nylas API."
                }
            },
            "nylasSessionsConfig": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Config",
                    "resolved": "Config | undefined",
                    "references": {
                        "Config": {
                            "location": "import",
                            "path": "@nylas/identity",
                            "id": "../nylas-identity/esm/index.d.ts::Config"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The Nylas Sessions configuration.\nUsed to configure the Nylas Sessions instance."
                }
            },
            "defaultAuthArgs": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AuthArgs[]",
                    "resolved": "AuthArgs[] | undefined",
                    "references": {
                        "AuthArgs": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::AuthArgs"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default authentication arguments to use when authenticating a user."
                }
            },
            "eventOverrides": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "SchedulerEditorEventOverride",
                    "resolved": "Partial<{ formSubmitted: (event: CustomEvent<void>, connector?: NylasSchedulerConfigConnectorInterface | undefined) => Promise<void>; schedulerConfigChanged: (event: CustomEvent<SchedulerEventDetail>, connector?: NylasSchedulerConfigConnectorInterface | undefined) => Promise<void>; cancelButtonClick: (event: CustomEvent<void>, connector?: NylasSchedulerConfigConnectorInterface | undefined) => Promise<void>; previewButtonClicked: (event: CustomEvent<HTMLNylasEditorTabsElement>, connector?: NylasSchedulerConfigConnectorInterface | undefined) => Promise<void>; schedulerEditorFormUpdated: (event: CustomEvent<{ value: string; name: string; }>, connector?: NylasSchedulerConfigConnectorInterface | undefined) => Promise<void>; initListConfigurations: (event: CustomEvent<{ host: HTMLNylasListConfigurationsElement; cursor?: string | undefined; }>, connector?: NylasSchedulerConfigConnectorInterface | undefined) => Promise<void>; createButtonClick: (event: CustomEvent<HTMLNylasListConfigurationsElement>, connector?: NylasSchedulerConfigConnectorInterface | undefined) => Promise<void>; editButtonClick: (event: CustomEvent<{ host: HTMLNylasListConfigurationsElement; configuration: Configuration; }>, connector?: NylasSchedulerConfigConnectorInterface | undefined) => Promise<void>; deleteButtonClick: (event: CustomEvent<{ host: HTMLNylasListConfigurationsElement; configuration: Configuration; }>, connector?: NylasSchedulerConfigConnectorInterface | undefined) => Promise<void>; }> & EventOverride<NylasSchedulerConfigConnectorInterface>",
                    "references": {
                        "SchedulerEditorEventOverride": {
                            "location": "import",
                            "path": "@/common/component-types",
                            "id": "src/common/component-types.ts::SchedulerEditorEventOverride"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "This provides a way to override the default event handlers."
                },
                "defaultValue": "{}"
            },
            "schedulerPreviewLink": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The scheduler preview link used when the user clicks the preview button.\nIf `requiresSlug` is true, you can use the placeholder `{slug}` to insert the slug in the link for Nylas hosted scheduling pages.\nAdditionally, you can use the placeholder `{config.id}` to insert the configuration ID anywhere in the link.\nFor example: `https://book.nylas.com/us/<YOUR_NYLAS_APP_CLIENT_ID>/{slug}`.\n`us` denotes the region. Replace it with the appropriate region of your application.\nReplace `<YOUR_NYLAS_APP_CLIENT_ID>` with your Nylas app client ID.\nNote: Nylas hosted scheduling pages are only available for public configurations."
                },
                "attribute": "scheduler-preview-link",
                "reflect": false,
                "defaultValue": "''"
            },
            "defaultSchedulerConfigState": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Partial<NylasSchedulerConfigStoreState>",
                    "resolved": "undefined | { selectedConfiguration?: RecursivePartial<Configuration> | undefined; configurations?: Configuration[] | undefined; calendars?: Calendar[] | undefined; currentUser?: User | null | undefined; action?: \"create\" | \"edit\" | null | undefined; additionalParticipants?: AdditionalParticipant[] | undefined; listConfigurationsNextCursor?: string | null | undefined; hideEditorTabs?: string[] | undefined; conferenceProviders?: Record<\"google\" | \"microsoft\" | \"zoom\", string> | undefined; eventReminders?: EventReminder[] | undefined; requiresSlug?: boolean | undefined; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "NylasSchedulerConfigStoreState": {
                            "location": "import",
                            "path": "@/stores/scheduler-config-store",
                            "id": "src/stores/scheduler-config-store.ts::NylasSchedulerConfigStoreState"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default scheduler config store state.\nUsed to set the initial state of the scheduler config store.\nThis state can be used to pass defaults to newly created configurations."
                }
            },
            "mode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'app' | 'composable'",
                    "resolved": "\"app\" | \"composable\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "This is used to set the mode for the scheduler config.\nThe mode can be 'app' or 'composable'.\nThe default mode is 'app'."
                },
                "attribute": "mode",
                "reflect": false,
                "defaultValue": "'app'"
            },
            "additionalParticipants": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AdditionalParticipant[]",
                    "resolved": "AdditionalParticipant[] | undefined",
                    "references": {
                        "AdditionalParticipant": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::AdditionalParticipant"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "This prop is used to populate the additional participants and\ntheir availability in the scheduler editor."
                }
            },
            "hideEditorTabs": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "string[]",
                    "resolved": "string[] | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "This optional prop is used to hide tabs in the editor. Available tabs are:\neventInfo, availability, participants, bookingOptions, bookingForm"
                },
                "defaultValue": "[]"
            },
            "conferenceProviders": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Record<string, string>",
                    "resolved": "undefined | { [x: string]: string; }",
                    "references": {
                        "Record": {
                            "location": "global",
                            "id": "global::Record"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "This prop will be used to populate the conference provider options in the editor.\nThe key is the provider name ('zoom') and the value is the grant id.\nWe currently support same provider ('google', 'microsoft') for all participants and 'zoom' for cross-provider conferencing."
                }
            },
            "requiresSlug": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indicates if a slug is required for the configuration.\nWhen set to true, the user must enter a slug when creating or editing a configuration.\nThe slug is used for hosted pages. If using Nylas hosted scheduling pages, the `schedulerPreviewLink` prop can be set to redirect to a public configuration as follows:\n`https://book.nylas.com/us/<YOUR_NYLAS_APP_CLIENT_ID>/{slug}`.\n`us` denotes the region. Replace it with the appropriate region of your application.\nReplace `<YOUR_NYLAS_APP_CLIENT_ID>` with your Nylas app client ID. The `{slug}` placeholder is replaced with the appropriate slug when the scheduler preview button is clicked.\nNote: Nylas hosted scheduling pages are only available for public configurations."
                },
                "attribute": "requires-slug",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "automaticComponentRegistration": {}
        };
    }
    static get events() {
        return [{
                "method": "init",
                "name": "init",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the provider is initialized.\nBy default, this event handles determining if the user is logged in or not.\nIn addition, it fetches the provided configuration if a valid configuration id is provided."
                },
                "complexType": {
                    "original": "HTMLNylasSchedulerEditorElement",
                    "resolved": "HTMLNylasSchedulerEditorElement",
                    "references": {
                        "HTMLNylasSchedulerEditorElement": {
                            "location": "global",
                            "id": "global::HTMLNylasSchedulerEditorElement"
                        }
                    }
                }
            }, {
                "method": "loggedIn",
                "name": "loggedIn",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the the NylasAuth isAuthenticated state changes\nto true."
                },
                "complexType": {
                    "original": "HTMLNylasSchedulerEditorElement",
                    "resolved": "HTMLNylasSchedulerEditorElement",
                    "references": {
                        "HTMLNylasSchedulerEditorElement": {
                            "location": "global",
                            "id": "global::HTMLNylasSchedulerEditorElement"
                        }
                    }
                }
            }, {
                "method": "loggedOut",
                "name": "loggedOut",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the the NylasAuth isAuthenticated state changes\nto false."
                },
                "complexType": {
                    "original": "HTMLNylasSchedulerEditorElement",
                    "resolved": "HTMLNylasSchedulerEditorElement",
                    "references": {
                        "HTMLNylasSchedulerEditorElement": {
                            "location": "global",
                            "id": "global::HTMLNylasSchedulerEditorElement"
                        }
                    }
                }
            }, {
                "method": "schedulerConfigCloseClicked",
                "name": "schedulerConfigCloseClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the close button on scheduler config is clicked."
                },
                "complexType": {
                    "original": "HTMLNylasSchedulerEditorElement",
                    "resolved": "HTMLNylasSchedulerEditorElement",
                    "references": {
                        "HTMLNylasSchedulerEditorElement": {
                            "location": "global",
                            "id": "global::HTMLNylasSchedulerEditorElement"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "store": {
                "complexType": {
                    "signature": "() => Promise<NylasSchedulerConfigStoreType | undefined>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "NylasSchedulerConfigStoreType": {
                            "location": "import",
                            "path": "@/stores/scheduler-config-store",
                            "id": "src/stores/scheduler-config-store.ts::NylasSchedulerConfigStoreType"
                        }
                    },
                    "return": "Promise<CreateNylasSchedulerConfigStoreReturnType | undefined>"
                },
                "docs": {
                    "text": "This method is used to get the NylasSchedulerConfigStore instance.\nYou can use this instance to update or get the state of the store.",
                    "tags": [{
                            "name": "returns",
                            "text": "Promise<NylasSchedulerConfigStoreType | undefined>"
                        }]
                }
            },
            "schedulerConnector": {
                "complexType": {
                    "signature": "() => Promise<NylasSchedulerConfigConnector | undefined>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "NylasSchedulerConfigConnector": {
                            "location": "import",
                            "path": "@/connector/nylas-scheduler-config-connector",
                            "id": "src/connector/nylas-scheduler-config-connector/index.ts::NylasSchedulerConfigConnector"
                        }
                    },
                    "return": "Promise<NylasSchedulerConfigConnector | undefined>"
                },
                "docs": {
                    "text": "This method is used to get the NylasSchedulerConfigConnector instance.\nYou can use this instance to make requests to the Nylas API.",
                    "tags": [{
                            "name": "returns",
                            "text": "Promise<NylasSchedulerConfigConnector | undefined>"
                        }]
                }
            }
        };
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "configurationId",
                "methodName": "configurationIdChanged"
            }];
    }
    static get listeners() {
        return [{
                "name": "registerComponent",
                "method": "registerComponentHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "unregisterComponent",
                "method": "unregisterComponentHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=nylas-scheduler-editor.js.map
