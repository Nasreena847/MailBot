{"version":3,"file":"nylas-page-name.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-page-name/test/nylas-page-name.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAE,cAAc,EAAE,MAAM,wDAAwD,CAAC;AACxF,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAElC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,qCAAqC;SAC5C,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC;YAC3C,QAAQ,EAAE,GAAG,EAAE;gBACb,OAAO,CACL;oBACE,uBAAiB,IAAI,EAAC,WAAW,GAAG,CACpB,CACnB,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;QACpC,MAAM,cAAc,GAAG,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,aAAa,CAAC,iBAAiB,CAA8B,CAAC;QAC7G,MAAM,KAAK,GAAG,cAAc,EAAE,UAAU,EAAE,aAAa,CAAC,OAAO,CAAqB,CAAC;QAErF,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAE7B,MAAM,aAAa,GAAG,CAAC,OAAyB,EAAE,SAAiB,EAAE,KAAa,EAAE,EAAE;YACpF,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE;gBACjC,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YACH,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;YAC7E,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;YACtB,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC;QACF,aAAa,CAAC,KAAK,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;QAC7C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasPageName } from '../nylas-page-name';\nimport { InputComponent } from '../../../design-system/input-component/input-component';\nimport { h } from '@stencil/core';\n\ndescribe('nylas-page-name', () => {\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [NylasPageName],\n      html: '<nylas-page-name></nylas-page-name>',\n    });\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should allow typing \"&\" in the input', async () => {\n    const page = await newSpecPage({\n      components: [NylasPageName, InputComponent],\n      template: () => {\n        return (\n          <nylas-page-name>\n            <input-component name=\"page-name\" />\n          </nylas-page-name>\n        );\n      },\n    });\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot();\n    const inputComponent = page?.root?.shadowRoot?.querySelector('input-component') as HTMLInputComponentElement;\n    const input = inputComponent?.shadowRoot?.querySelector('input') as HTMLInputElement;\n\n    expect(input).not.toBeNull();\n    // Dispatch input event on the input element\n    const dispatchEvent = (element: HTMLInputElement, eventType: string, value: string) => {\n      const event = new Event(eventType, {\n        bubbles: true,\n        cancelable: true,\n      });\n      Object.defineProperty(event, 'target', { value: element, enumerable: true });\n      element.value = value;\n      element.dispatchEvent(event);\n    };\n    dispatchEvent(input, 'input', 'Test & Test');\n    expect(input.value).toBe('Test & Test');\n  });\n});\n"]}