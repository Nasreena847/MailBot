var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasPageName {
    constructor() {
        this.selectedConfiguration = undefined;
        this.pageName = undefined;
        this.showToggle = true;
        this.isOpen = true;
        this.name = 'page-name';
        this.currentPageName = undefined;
    }
    connectedCallback() {
        debug('nylas-page-name', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-page-name', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-page-name', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-page-name', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.currentPageName = this.pageName ?? '';
        }
    }
    componentWillUpdate() {
        debug('nylas-page-name', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-page-name', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-page-name', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-page-name', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-page-name', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        this.currentPageName = newValue?.name ?? this.pageName ?? '';
    }
    async nylasFormInputChangeHandler(event) {
        const { name, value } = event.detail;
        if (name === 'page-name') {
            this.currentPageName = value;
            this.internals.setFormValue(JSON.stringify(value), this.name);
            this.valueChanged.emit({ value: JSON.stringify(value), name: this.name });
        }
    }
    toggleDrawer() {
        this.isOpen = !this.isOpen;
    }
    render() {
        const isComponentReady = typeof this.currentPageName !== 'undefined';
        return (h(Host, { key: 'ecc02efdb8a8bdbbb3f22b73bcc6da7f6d8cf51e' }, h("div", { key: '68e438d12f257af2dd7ffa2bf618341c40886c1c', class: "nylas-page-name", part: "nces" }, h("div", { key: '79bce81e542edd4c3c18d36166ba0415b4350d74', class: "header", part: "nces__header" }, h("div", { key: '469c49d9f187e91eac36a72f060b5b5ca2bd81f4' }, h("h3", { key: '1e0f14a2e77c379a2ecc50ff78ac74da50c05beb' }, "Page name"), h("p", { key: '22c5b83c8fd35ec234493d0d2b714acebd3f65d6' }, "Set the Scheduling Page name.", h("tooltip-component", { key: '4ddb31291ff706c4cabfe44ffdbcf03c9bbe6a64' }, h("info-icon", { key: '8cef9609071d45a31e9f1af183b806ab836ee126', slot: "tooltip-icon" }), h("span", { key: '751a6cfa087a26b7a787523e25b492955daff8c4', slot: "tooltip-content" }, "By default, Scheduling Pages use your user name as the Page name. The Page name is displayed in the top-left corner of the calendar view.")))), this.showToggle && (h("div", { class: "drawer-toggle", part: "nces__drawer-toggle--container" }, h("span", { class: `chevron ${this.isOpen ? 'open' : 'closed'} `, onClick: () => this.toggleDrawer() }, h("chevron-icon", { width: "24", height: "24" }))))), this.isOpen && (h("div", { class: "nylas-page-name__body", part: "nces__body" }, h("div", { class: "nylas-page-name__section" }, h("div", { class: "nylas-page-name__row" }, h("div", { class: "input-container" }, h("div", { class: "nylas-page-name__input-wrapper" }, isComponentReady && (h("input-component", { name: "page-name", id: "page-name", type: "text", required: false, exportparts: "ic_input: npn__input-textfield", defaultValue: this.currentPageName ?? '' })))))))))));
    }
    static get is() { return "nylas-page-name"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-page-name.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-page-name.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "pageName": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default page name"
                },
                "attribute": "page-name",
                "reflect": false
            },
            "showToggle": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Show toggle button that allows users to expand or collapse the card"
                },
                "attribute": "show-toggle",
                "reflect": false,
                "defaultValue": "true"
            },
            "isOpen": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Is the page name container card expanded"
                },
                "attribute": "is-open",
                "reflect": false,
                "defaultValue": "true"
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the component"
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'page-name'"
            }
        };
    }
    static get states() {
        return {
            "currentPageName": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the page name value changes"
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormInputChanged",
                "method": "nylasFormInputChangeHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-page-name',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasPageName.prototype, "render", null);
//# sourceMappingURL=nylas-page-name.js.map
