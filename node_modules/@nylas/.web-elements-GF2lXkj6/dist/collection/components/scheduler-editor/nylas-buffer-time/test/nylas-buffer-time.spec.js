import { newSpecPage } from "@stencil/core/testing";
import { NylasBufferTime } from "../nylas-buffer-time";
import { h } from "@stencil/core";
import { SelectDropdown } from "../../../design-system/select-dropdown/select-dropdown";
import { selectedConfiguration } from "../../../../utils/test-utils";
describe('nylas-buffer-time', () => {
    let nylasBufferTime;
    let page;
    const config = JSON.parse(JSON.stringify(selectedConfiguration));
    beforeEach(async () => {
        page = await newSpecPage({
            components: [NylasBufferTime, SelectDropdown],
            template: () => {
                return (h("nylas-buffer-time", { name: "buffer-time", selectedConfiguration: config }, h("select-dropdown", { name: "buffer-time" })));
            },
        });
        nylasBufferTime = page.rootInstance;
        await page.waitForChanges();
    });
    it('renders', async () => {
        expect(page.root).toMatchSnapshot();
    });
    it('renders default buffer time', async () => {
        const beforeDropdown = page.root.shadowRoot.querySelector('.nylas-buffer-time select-dropdown#before-buffer-time');
        const beforeButton = beforeDropdown.shadowRoot.querySelector('button');
        expect(beforeButton.textContent).toBe('0');
        const afterDropdown = page.root.shadowRoot.querySelector('.nylas-buffer-time select-dropdown#after-buffer-time');
        const afterButton = afterDropdown.shadowRoot.querySelector('button');
        expect(afterButton.textContent).toBe('0');
    });
    it('selects buffer time', async () => {
        const spyEvent = jest.fn();
        nylasBufferTime.valueChanged = {
            emit: spyEvent,
        };
        const mockEvent = new CustomEvent('nylasFormDropdownChanged', {
            detail: { value: '30', name: 'before-buffer-time' },
            bubbles: true,
            composed: true,
        });
        nylasBufferTime.nylasFormDropdownChangedHandler(mockEvent);
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('renders the before and after buffer time based on the buffer prop', async () => {
        const newConfig = JSON.parse(JSON.stringify(selectedConfiguration));
        newConfig.availability.availability_rules.buffer = { before: 30, after: 15 };
        page = await newSpecPage({
            components: [NylasBufferTime, SelectDropdown],
            template: () => {
                return (h("nylas-buffer-time", { name: "buffer-time", selectedConfiguration: newConfig }, h("select-dropdown", { name: "buffer-time" })));
            },
        });
        nylasBufferTime = page.rootInstance;
        await page.waitForChanges();
        const beforeDropdown = page.root.shadowRoot.querySelector('.nylas-buffer-time select-dropdown#before-buffer-time');
        const beforeButton = beforeDropdown.shadowRoot.querySelector('button');
        expect(beforeButton.textContent).toBe('30');
        const afterDropdown = page.root.shadowRoot.querySelector('.nylas-buffer-time select-dropdown#after-buffer-time');
        const afterButton = afterDropdown.shadowRoot.querySelector('button');
        expect(afterButton.textContent).toBe('15');
    });
});
//# sourceMappingURL=nylas-buffer-time.spec.js.map
