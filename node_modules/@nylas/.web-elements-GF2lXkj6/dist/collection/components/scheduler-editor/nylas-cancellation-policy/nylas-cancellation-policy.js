var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, sanitize } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasCancellationPolicy {
    constructor() {
        this.selectedConfiguration = undefined;
        this.cancellationPolicy = undefined;
        this.name = 'cancelation-policy';
        this.message = undefined;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-cancellation-policy', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        this.message = newValue?.scheduler?.cancellation_policy || this.cancellationPolicy || '';
    }
    connectedCallback() {
        debug('nylas-cancellation-policy', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-cancellation-policy', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-cancellation-policy', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.message = this.cancellationPolicy || '';
        }
    }
    disconnectedCallback() {
        debug('nylas-cancellation-policy', 'disconnectedCallback');
    }
    handleChange(event) {
        const value = sanitize(event.target.value);
        this.message = value;
        this.internals.setFormValue(value, this.name);
        this.valueChanged.emit({ value: value, name: this.name });
    }
    render() {
        return (h(Host, { key: '3a6dfd352ec770b8103541bf2145147c84832402' }, h("div", { key: '1cfa42ee08f5182fe9e1405ac6c8c56cea1c070e', class: "nylas-cancellation-policy", part: "ncpolicy" }, h("label", { key: 'a9867af2834b0a6d417a08c58695b38850d19796', htmlFor: this.name }, "Cancellation policy message", h("span", { key: 'c9a6e487bd1cfd0d594aefb7820fc5a29f10c1e5', class: "label-icon" }, h("tooltip-component", { key: '653b93c98e586c52ffa0c34d7031370e24836f60' }, h("info-icon", { key: '5164bfd6ae87d969e9022edf78a7e9860d8f1aac', slot: "tooltip-icon" }), h("span", { key: '3cd23badfe5525228486767147a5db993ce37737', slot: "tooltip-content" }, "Attendees receive this message if trying to cancel the event. Attendees are asked to provide a reason for cancellation.")))), h("textarea", { key: '85b6eee5d41437810195739c364a7b1195da928a', id: this.name, part: "ncpolicy__textarea", name: this.name, value: this.message, maxlength: "250", onInput: e => this.handleChange(e) }))));
    }
    static get is() { return "nylas-cancellation-policy"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-cancellation-policy.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-cancellation-policy.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "cancellationPolicy": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The cancellation policy stored in the configuration"
                },
                "attribute": "cancellation-policy",
                "reflect": false
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the cancellation policy input."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'cancelation-policy'"
            }
        };
    }
    static get states() {
        return {
            "message": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the cancellation policy message changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-cancellation-policy',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCancellationPolicy.prototype, "render", null);
//# sourceMappingURL=nylas-cancellation-policy.js.map
