var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasAdditionalParticipants {
    constructor() {
        this.selectedConfiguration = undefined;
        this.currentUser = undefined;
        this.name = 'participants';
        this.eventParticipants = undefined;
        this.participantOptions = undefined;
        this.participants = this.eventParticipants ?? [];
        this.participantErrors = {};
        this.includeOrganizerAsParticipant = true;
        this.isRoundRobinConfig = this.selectedConfiguration?.availability?.availability_rules?.availability_method !== 'collective';
        this.error = '';
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-additional-participants', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-additional-participants', 'selectedConfigurationChangedHandler', newValue);
        this.isRoundRobinConfig = newValue?.availability?.availability_rules?.availability_method !== 'collective';
        this.participants = newValue?.participants || [];
        this.updateFormValue();
    }
    connectedCallback() {
        debug('nylas-additional-participants', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-additional-participants', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-additional-participants', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        this.isRoundRobinConfig = this.selectedConfiguration?.availability?.availability_rules?.availability_method !== 'collective';
        this.includeOrganizerAsParticipant = this.isRoundRobinConfig && this.participants.find(p => p.email === this.currentUser?.email) ? true : false;
        const findCurrentUserInParticipants = this.participants.find(p => p.email === this.currentUser?.email);
        if (this.isRoundRobinConfig && !findCurrentUserInParticipants && this.currentUser?.email) {
            this.participants = [
                {
                    name: this.currentUser?.name,
                    email: this.currentUser?.email,
                    is_organizer: true,
                    availability: {
                        calendar_ids: ['primary'],
                    },
                    booking: {
                        calendar_id: 'primary',
                    },
                },
                ...this.participants,
            ];
        }
        this.updateFormValue();
    }
    disconnectedCallback() {
        debug('nylas-additional-participants', 'disconnectedCallback');
    }
    onInputOptionChanged(event) {
        debug('nylas-additional-participants', 'onInputOptionChanged');
        const EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
        const index = event.detail.name;
        const participant = this.participantOptions?.find(participant => participant.email === event.detail.value);
        if (!participant && this.isRoundRobinConfig) {
            this.internals.setValidity({ customError: true }, 'For round robin configuration, participant should be selected from the dropdown.');
            this.participantErrors[index] = 'For round robin page, participant should be selected from the dropdown.';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else if (!participant && !EMAIL_REGEX.test(event.detail.value)) {
            this.internals.setValidity({ customError: true }, 'Please enter a valid email address');
            this.participantErrors[index] = 'Please enter a valid email address';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else {
            this.participantErrors[index] = '';
            this.participants[index].is_valid = true;
            this.internals.setValidity({});
        }
        this.participants[index].email = event.detail.value;
        this.participants[index].availability = participant ? { calendar_ids: ['primary'] } : undefined;
        this.participants[index].booking = participant && this.isRoundRobinConfig ? { calendar_id: 'primary' } : undefined;
        this.participants[index].name = participant?.name || event.detail.value;
        this.participants = [...this.participants];
        this.updateFormValue();
    }
    addParticipant() {
        debug('nylas-additional-participants', 'addParticipant');
        this.participants = [...this.participants, { name: '', email: '', is_organizer: false }];
        this.updateFormValue();
    }
    removeParticipant(index) {
        debug('nylas-additional-participants', 'removeParticipant');
        this.participants = this.participants.filter((_, i) => i !== index);
        this.updateFormValue();
    }
    validate(email, index) {
        debug('nylas-additional-participants', 'validate');
        const regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        const valid = regex.test(String(email).toLowerCase());
        this.participants[index].is_valid = valid;
        this.updateFormValue();
    }
    updateFormValue() {
        debug('nylas-additional-participants', 'updateFormValue');
        const participants = this.isRoundRobinConfig ? (this.includeOrganizerAsParticipant ? this.participants : this.participants.filter(p => !p.is_organizer)) : this.participants;
        if (participants.length === 0) {
            this.internals.setValidity({ customError: true }, 'Please add at least one participant');
            this.error = 'Please add at least one participant';
        }
        else {
            this.internals.setValidity({});
            this.error = '';
            this.internals.setFormValue(JSON.stringify(participants), this.name);
            this.valueChanged.emit({ value: JSON.stringify(participants), name: this.name });
        }
    }
    getArrayDifference(array1, array2) {
        const filtered = array1.filter(participant1 => !array2.some(participant2 => participant1.email === participant2.email));
        return filtered.map(participant => {
            return { value: participant.email, label: participant.email };
        });
    }
    render() {
        return (h(Host, { key: 'a2bbfba14ad90e33195b589eb5eeb42d618ad5b9' }, h("nylas-form-card", { key: '4bcf48db9a06f4b9de378cb166deaa6cdea5daf3' }, h("h3", { key: 'a0bb800ed80de34002ccc11f793e6e121224d59b', slot: "header-title", class: "nylas-additional-participants__title", part: "nap__title" }, "Participants"), h("p", { key: '96dd051bf51945429463c1a972cf3ac19ccec4a5', slot: "header-subtitle", class: "nylas-additional-participants__subtitle", part: "nap__subtitle" }, "Add people in your team or organization to join the event."), h("div", { key: 'edcac76acc4d528af421b9c7b79535ee73491309', slot: "content", class: "nylas-additional-participants__content" }, h("div", { key: 'b58c930590957d693487f84538ef8168ad1d7116' }, this.participants.map((participant, index) => {
            return (h("div", { class: 'nylas-additional-participants__input_group', part: "nap__input_group" }, !participant.is_organizer && h("label", null, `Participant ${index}`), h("div", { part: "nap__input_wrapper", class: {
                    'nylas-additional-participants__input_wrapper': true,
                    'nylas-additional-participants__input_wrapper_organizer': participant?.is_organizer === true,
                    'nylas-additional-participants__input_wrapper_invalid': participant.is_valid === false,
                    'error': participant.is_valid === false,
                } }, h("div", { class: { 'nylas-additional-participants__input': true, 'organizer': participant?.is_organizer === true }, part: "nap__input" }, participant.is_organizer ? (h("input-component", { class: 'label-input', name: `${index}`, key: index, label: "Organizer", required: false, readOnly: participant.is_organizer, defaultValue: participant.email }, this.isRoundRobinConfig && (h("div", { class: "required-input", slot: "additional-input" }, h("input", { type: "checkbox", name: `organizer_participant`, id: `organizer_participant`, onClick: () => {
                    this.includeOrganizerAsParticipant = !this.includeOrganizerAsParticipant;
                    this.updateFormValue();
                }, checked: this.includeOrganizerAsParticipant }), h("label", { htmlFor: `organizer_participant`, "aria-label": "Include as participant" }, "Participant", h("tooltip-component", { id: "organizer_participant_tooltip" }, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, h("strong", null, "Include Organizer:"), " The organizer (you) will be included in the round-robin rotation. ", h("br", null), h("strong", null, "Exclude Organizer:"), " The organizer (you) will not be included in the round-robin rotation."))))))) : (h("input-dropdown", { id: `${index}`, name: `${index}`, filterable: true, inputValue: participant.email, options: this.getArrayDifference(this.participantOptions || [], this.participants) })), !participant.is_organizer && (h("button", { onClick: () => this.removeParticipant(index), part: "nap__remove-participant" }, h("close-icon", null))))), !participant.is_valid && (h("p", { class: "nylas-additional-participants__error", part: "nap__error" }, this.participantErrors[index]))));
        }), h("p", { key: '1da630e1017918c0a32c53a4e0b2056772b34137', class: "nylas-additional-participants__error", part: "nap__error" }, this.error)), h("button", { key: '25cef209be2f07043e268e9d7dc6d70dcdaa305e', class: "nylas-additional-participants__add", part: "nap__add-participant", onClick: () => this.addParticipant() }, h("add-circle-icon", { key: 'bd62c68f4566e87110d1f64e723a83163c352ec3' }), " ", h("span", { key: '1a9d6bd9bbbb1a90bd634210d8faff896aeba290' }, "Add ", this.participants.length > 1 ? 'another' : 'a', " participant"))))));
    }
    static get is() { return "nylas-additional-participants"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-additional-participants.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-additional-participants.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "currentUser": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "User",
                    "resolved": "undefined | { id: string; email: string; name?: string | undefined; provider?: string | undefined; }",
                    "references": {
                        "User": {
                            "location": "import",
                            "path": "@/common/nylas-api-request",
                            "id": "src/common/nylas-api-request.ts::User"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The logged in user"
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'participants'"
            },
            "eventParticipants": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Participant[]",
                    "resolved": "Participant[] | undefined",
                    "references": {
                        "Participant": {
                            "location": "global",
                            "id": "global::Participant"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "participantOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AdditionalParticipant[]",
                    "resolved": "AdditionalParticipant[] | undefined",
                    "references": {
                        "AdditionalParticipant": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::AdditionalParticipant"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            }
        };
    }
    static get states() {
        return {
            "participants": {},
            "participantErrors": {},
            "includeOrganizerAsParticipant": {},
            "isRoundRobinConfig": {},
            "error": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected participants change."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "inputOptionChanged",
                "method": "onInputOptionChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-additional-participants',
        stateToProps: new Map([
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.currentUser', 'currentUser'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasAdditionalParticipants.prototype, "render", null);
//# sourceMappingURL=nylas-additional-participants.js.map
