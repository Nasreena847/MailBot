{"version":3,"file":"nylas-calendar-picker.js","sourceRoot":"","sources":["../../../../src/components/scheduler-editor/nylas-calendar-picker/nylas-calendar-picker.tsx"],"names":[],"mappings":"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","sourcesContent":["import { RegisterComponent } from '@/common/register-component';\nimport { NylasSchedulerConfigConnector } from '@/connector/nylas-scheduler-config-connector';\nimport { debug } from '@/utils/utils';\nimport { Calendar } from '@nylas/core';\nimport { AttachInternals, Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasSchedulerEditor } from '../nylas-scheduler-editor/nylas-scheduler-editor';\nimport { User } from '@/common/nylas-api-request';\n\n/**\n * The `nylas-calendar-picker` component is a form input for selecting calendars to check availability.\n *\n * @part ncp - The calendar picker container\n * @part ncp__dropdown - The dropdown container\n * @part ncp__dropdown-button - The dropdown button\n * @part ncp__dropdown-content - The dropdown content\n */\n@Component({\n  tag: 'nylas-calendar-picker',\n  styleUrl: 'nylas-calendar-picker.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class NylasCalendarPicker {\n  @Element() host!: HTMLNylasCalendarPickerElement;\n  /**\n   * The calendars to choose from.\n   */\n  @Prop() calendars?: Calendar[];\n  /**\n   * The logged in user.\n   */\n  @Prop() currentUser?: User;\n  /**\n   * The name of the calendar picker.\n   */\n  @Prop() name: string = 'calendar';\n  /**\n   * The default selected calendars.\n   */\n  @Prop() defaultSelectedCalendars: string[] = [];\n  /**\n   * The element internals.\n   */\n  @AttachInternals() internals!: ElementInternals;\n\n  /**\n   * The selected calendars.\n   */\n  @State() selectedCalendars: string[] = [];\n\n  /**\n   * The error message to display.\n   */\n  @State() error: string = '';\n\n  /**\n   * This event is fired when the selected calendars change.\n   */\n  @Event() valueChanged!: EventEmitter<{\n    value: string[];\n    name: string;\n    valueChangedHandler?: (event: CustomEvent<{ value: string[]; name: string }>) => void;\n  }>;\n\n  /**\n   * When a name prop is passed, stencil does not automatically set the name attribute on the host element.\n   * Since this component is form-associated, the name attribute is required for form submission.\n   * This is a workaround to ensure that the name attribute is set on the host element.\n   */\n  @Watch('name')\n  elementNameChangedHandler(newValue: string) {\n    debug('nylas-calendar-picker', 'elementNameChangedHandler', newValue);\n    this.host.setAttribute('name', newValue);\n  }\n\n  // Lifecycle methods\n  connectedCallback() {\n    debug('nylas-calendar-picker', 'connectedCallback');\n  }\n\n  disconnectedCallback() {\n    debug('nylas-calendar-picker', 'disconnectedCallback');\n  }\n\n  componentWillLoad() {\n    debug('nylas-calendar-picker', 'componentWillLoad');\n    // See comment in the @Watch('name') decorator for more information.\n    this.host.setAttribute('name', this.name);\n  }\n\n  componentDidLoad() {\n    debug('nylas-calendar-picker', 'componentDidLoad');\n    // TODO: Remove this when the internals in tests are fixed.\n    if (typeof this.internals.setFormValue === 'function') {\n      this.internals.setFormValue(this.defaultSelectedCalendars.toString(), 'calendar');\n      this.valueChanged.emit({ value: this.defaultSelectedCalendars, name: this.name });\n    }\n  }\n\n  componentWillUpdate() {\n    debug('nylas-calendar-picker', 'componentWillUpdate');\n  }\n\n  componentDidUpdate() {\n    debug('nylas-calendar-picker', 'componentDidUpdate');\n  }\n\n  componentWillRender() {\n    debug('nylas-calendar-picker', 'componentWillRender');\n  }\n\n  componentDidRender() {\n    debug('nylas-calendar-picker', 'componentDidRender');\n  }\n\n  @Listen('selectedOptionsChanged')\n  selectedOptionsChangedHandler(event: CustomEvent<{ value: string[]; name: string }>) {\n    debug('nylas-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);\n    // Pass as handler so that if event.defaultPrevented by parent app, this will be skipped.\n    const valueChangedHandler = (event: CustomEvent<{ value: string[]; name: string }>) => {\n      const { value } = event.detail;\n      this.selectedCalendars = [...value];\n      if (this.selectedCalendars.length === 0) {\n        this.error = `Select at least one calendar.`;\n        this.internals.setValidity({ customError: true }, `Select at least one calendar.`);\n      } else {\n        this.error = '';\n        this.internals.setValidity({});\n      }\n      this.internals.setFormValue(value.toString(), this.name);\n    };\n    this.valueChanged.emit({ ...event.detail, name: this.name, valueChangedHandler });\n  }\n\n  @RegisterComponent<NylasCalendarPicker, NylasSchedulerConfigConnector, Exclude<NylasSchedulerEditor['stores'], undefined>>({\n    name: 'nylas-calendar-picker',\n    stateToProps: new Map([['schedulerConfig.currentUser', 'currentUser']]),\n    eventToProps: {\n      valueChanged: async (\n        event: CustomEvent<{ value: string[]; name: string; valueChangedHandler?: (event: CustomEvent<{ value: string[]; name: string }>) => void }>,\n        _nylasSchedulerConfigConnector: NylasSchedulerConfigConnector,\n      ) => {\n        const { valueChangedHandler } = event.detail;\n        // If a handler is passed, call it.\n        if (valueChangedHandler) {\n          valueChangedHandler(event);\n        }\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    const calendarOptions =\n      this.calendars?.map(calendar => {\n        return {\n          value: calendar.id,\n          label: calendar.name,\n          selected:\n            this.defaultSelectedCalendars?.includes(calendar.id) ||\n            (this.defaultSelectedCalendars?.includes('primary') || this.defaultSelectedCalendars?.length === 0\n              ? calendar.id === this.currentUser?.email || calendar.id === this.name.split('participant-')[1]\n              : false),\n        };\n      }) ?? [];\n\n    return (\n      <Host>\n        <div class=\"nylas-calendar-picker\" part=\"ncp\">\n          {calendarOptions.length > 0 ? (\n            <div class=\"nylas-calendar-picker__dropdown\">\n              <multi-select-dropdown\n                name={this.name}\n                options={calendarOptions}\n                error={this.error}\n                exportparts=\"msd_dropdown: ncp__dropdown, msd_dropdown-button: ncp__dropdown-button, msd_dropdown-content: ncp__dropdown-content\"\n              ></multi-select-dropdown>\n            </div>\n          ) : (\n            <div class=\"nylas-calendar-picker__loading\">\n              <span class=\"label\">\n                Select calendars that will be checked for availability <info-icon />\n              </span>\n              <div class=\"loading-button\">\n                <span>Loading...</span>\n              </div>\n            </div>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}