var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasReminderEmails {
    constructor() {
        this.eventReminders = [];
        this.participants = [];
        this.name = 'reminder-overrides';
        this.reminders = this.eventReminders ?? [];
        this.reminderErrors = {};
        this.editingReminderIndex = null;
    }
    connectedCallback() {
        debug('nylas-reminder-emails', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-reminder-emails', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-reminder-emails', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-reminder-emails', 'componentDidLoad');
        this.updateRemindersFormValue();
    }
    componentWillUpdate() {
        debug('nylas-reminder-emails', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-reminder-emails', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-reminder-emails', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-reminder-emails', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-reminder-emails', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    handleValueChanged(event) {
        debug('nylas-reminder-emails', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (name.startsWith('reminder-time-')) {
            const [_, reminderIndex] = name.split(/(\d+)/);
            const updatedReminders = [...this.reminders];
            updatedReminders[reminderIndex].reminder_minutes = parseInt(value);
            this.internals.setFormValue(JSON.stringify(updatedReminders), `reminder-overrides`);
            this.valueChanged.emit({ value: JSON.stringify(updatedReminders), name: `reminder-overrides` });
        }
    }
    addReminder() {
        debug('nylas-reminder-emails', 'addReminder');
        this.reminders = [
            ...this.reminders,
            {
                reminder_method: 'email',
                reminder_minutes: 30,
            },
        ];
        this.editingReminderIndex = this.reminders.length - 1;
        this.updateRemindersFormValue();
    }
    deleteReminder(index) {
        this.reminders.splice(index, 1);
        this.editingReminderIndex = null;
        this.updateRemindersFormValue();
    }
    updateRemindersFormValue() {
        debug('nylas-reminder-emails', 'updateRemindersFormValue');
        this.internals.setFormValue(JSON.stringify(this.reminders), 'reminder-overrides');
        this.valueChanged.emit({ value: JSON.stringify(this.reminders), name: 'reminder-overrides' });
    }
    formatReminderTime(reminderTime) {
        switch (true) {
            case reminderTime > 24 * 60:
                return `${reminderTime / 60 / 24} days`;
            case reminderTime === 24 * 60:
                return '1 day';
            case reminderTime > 90 || reminderTime === 60:
                return `${reminderTime / 60} hours`;
            default:
                return `${reminderTime} minute${reminderTime > 1 ? 's' : ''} `;
        }
    }
    render() {
        const organizerName = this.participants.find(p => p.is_organizer)?.name;
        return (h(Host, { key: 'ab55690228cfba67a2efeec1e9d899ac254e6830' }, h("div", { key: '5f73b959d33a1b9e8bb2d498d4275c52e0db68a9', class: "cards-container" }, this.reminders.map((reminder, index) => {
            return (h("div", { class: "nylas-reminder-email", part: "nre" }, h("div", { class: "header", part: "nre__header" }, h("div", null, h("h3", null, "Upcoming meeting", organizerName ? ` with ${organizerName} ` : ''), h("p", null, "Reminder before event")), this.editingReminderIndex !== index ? (h("button-component", { variant: 'basic', key: `edit-${index} `, clickHandler: event => {
                    event.preventDefault();
                    this.editingReminderIndex = index;
                } }, h("edit-icon", { width: "16", height: "16" }), "Edit")) : (h("button-component", { variant: 'basic', class: "delete-btn", key: `delete -${index} `, clickHandler: event => {
                    event.preventDefault();
                    this.deleteReminder(index);
                } }, h("trash-icon", { width: "16", height: "16" })))), this.editingReminderIndex === index ? (h("div", { class: "nylas-reminder-email__body", part: "nre__body" }, h("div", { class: "nylas-reminder-email__section" }, h("div", { class: "nylas-reminder-email__row" }, h("label", null, "Send confirmation email when", h("span", { class: "label-icon" }, h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, "You and your guests will receive a confirmation immediately after your booking is set up.")))), h("nylas-reminder-time", { name: `reminder-time-${index}`, eventReminderTimeMinutes: reminder.reminder_minutes, exportparts: "nrt, nrt__input_dropdown: nre__reminder-input_dropdown,\n                          nrt__input_dropdown-input: nre__reminder-input_dropdown-input,\n                          nrt__input_dropdown-content: nre__reminder-input_dropdown-content,\n                          " }))))) : (h("div", { class: "nylas-reminder-email__summary", part: "nre__summary" }, h("p", null, h("span", { class: "summary-icon" }, h("person-clipboard-icon", null)), "All host & guests"), h("p", null, h("span", { class: "summary-icon" }, h("clock-icon", null)), this.formatReminderTime(reminder.reminder_minutes), " before the event")))));
        })), h("button-component", { key: 'ddae28a87961fba5adb5d277f481eed232fda9e7', class: "create-reminder", variant: 'basic', clickHandler: event => {
                event.preventDefault();
                this.addReminder();
            } }, h("plus-icon", { key: 'f04020b8af5545c51af40108cf32aaba5c67ea4c', width: "16", height: "16" }), "New reminder")));
    }
    static get is() { return "nylas-reminder-emails"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-reminder-emails.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-reminder-emails.css"]
        };
    }
    static get properties() {
        return {
            "eventReminders": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "EventReminder[]",
                    "resolved": "EventReminder[]",
                    "references": {
                        "EventReminder": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::EventReminder"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The list of event reminders to display."
                },
                "defaultValue": "[]"
            },
            "participants": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Participant[]",
                    "resolved": "Participant[]",
                    "references": {
                        "Participant": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Participant"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "List of participants"
                },
                "defaultValue": "[]"
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the component"
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'reminder-overrides'"
            }
        };
    }
    static get states() {
        return {
            "reminders": {},
            "reminderErrors": {},
            "editingReminderIndex": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the email reminders change."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "valueChanged",
                "method": "handleValueChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-reminder-emails',
        stateToProps: new Map([['schedulerConfig.eventReminders', 'reminders']]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasReminderEmails.prototype, "render", null);
//# sourceMappingURL=nylas-reminder-emails.js.map
