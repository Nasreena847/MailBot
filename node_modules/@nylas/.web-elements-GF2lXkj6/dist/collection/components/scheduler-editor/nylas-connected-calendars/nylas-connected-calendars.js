var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasConnectedCalendars {
    constructor() {
        this.name = 'connected-calendars';
        this.selectedConfiguration = undefined;
        this.participants = this.selectedConfiguration?.participants || [];
        this.calendars = undefined;
        this.participantOptions = undefined;
        this.selectedCalendars = this.setParticipants(this.participants);
        this.participantCalendars = {};
        this.participantDefaultSelectedCalendars = {};
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-connected-calendars', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    calendarsChangedHandler(newValue) {
        debug('nylas-connected-calendars', 'calendarsChangedHandler', newValue);
        this.selectedCalendars = this.setParticipants(this.participants);
        this.participantCalendars = this.getParticipantCalendarOptions(this.participants, this.participantOptions);
    }
    participantsChangedHandler(newValue) {
        debug('nylas-connected-calendars', 'participantsChangedHandler', newValue);
        this.selectedCalendars = this.setParticipants(newValue);
        this.participantCalendars = this.getParticipantCalendarOptions(newValue, this.participantOptions);
    }
    participantOptionsChangedHandler(newValue) {
        debug('nylas-calendar-picker', 'participantOptionsChangedHandler', newValue);
        this.selectedCalendars = this.setParticipants(this.participants);
        this.participantCalendars = this.getParticipantCalendarOptions(this.participants, newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-calendar-picker', 'selectedConfigurationChangedHandler', newValue);
        const participants = newValue?.participants || this.participants;
        if (participants && participants.length > 0) {
            this.selectedCalendars = this.setParticipants(participants);
            this.participantCalendars = this.getParticipantCalendarOptions(participants, this.participantOptions);
        }
    }
    getParticipantCalendarOptions(addedParticipants, availableParticipantOptions) {
        const organizer = addedParticipants?.find(participant => participant.is_organizer);
        const isRoundRobinConfig = this.selectedConfiguration?.availability?.availability_rules?.availability_method !== 'collective';
        const participantCalendars = {};
        if (availableParticipantOptions) {
            const participants = addedParticipants?.filter(participant => availableParticipantOptions.some(availableParticipant => availableParticipant.email === participant.email));
            const remainingParticipants = addedParticipants?.filter(participant => !availableParticipantOptions.some(availableParticipant => availableParticipant.email === participant.email));
            participants?.forEach(participant => {
                const participantOption = availableParticipantOptions?.find(participantOption => participantOption.email === participant.email);
                if (!participantOption)
                    return;
                this.participantDefaultSelectedCalendars[participant.email] = participant.availability?.calendar_ids || [];
                const calendars = participantOption.calendars ?? [];
                participant.availability?.calendar_ids?.forEach(calendarId => {
                    if (!calendars?.some(calendar => calendar.id === calendarId) && calendarId !== 'primary') {
                        calendars.push({ id: calendarId, name: calendarId });
                    }
                });
                participantCalendars[participant.email] = calendars;
            });
            if (isRoundRobinConfig) {
                remainingParticipants?.forEach(participant => {
                    if (participant?.availability?.calendar_ids && participant?.availability?.calendar_ids?.length > 0 && !participant.is_organizer) {
                        participantCalendars[participant.email] = this.calendars ?? [{ id: 'primary', name: participant.email }];
                        this.participantDefaultSelectedCalendars[participant.email] = participant.availability?.calendar_ids || [];
                    }
                });
            }
        }
        if (organizer) {
            participantCalendars[organizer.email] = this.calendars ?? [{ id: 'primary', name: organizer.email }];
            this.participantDefaultSelectedCalendars[organizer.email] = organizer.availability?.calendar_ids || [];
        }
        return participantCalendars;
    }
    connectedCallback() {
        debug('nylas-connected-calendars', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-connected-calendars', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-connected-calendars', 'componentWillLoad');
    }
    componentDidLoad() {
        debug('nylas-connected-calendars', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedCalendars = this.setParticipants(this.selectedConfiguration?.participants);
            this.participantCalendars = this.getParticipantCalendarOptions(this.selectedConfiguration?.participants, this.participantOptions);
        }
    }
    handleValueChanged(event) {
        debug('[nylas-editor-tabs]', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (!name.startsWith('participant-')) {
            return;
        }
        if (!this.connectedCalendarsFormRef.checkValidity()) {
            this.internals.setValidity({ customError: true }, 'Please select at least one calendar for each participant.');
            return;
        }
        else {
            this.internals.setValidity({});
        }
        const key = name.split('participant-')[1];
        if (!this.selectedCalendars[key])
            return;
        this.selectedCalendars[key]['calendars'] = value;
        this.selectedCalendars = { ...this.selectedCalendars };
        const participantsCalendars = {};
        Object.keys(this.selectedCalendars).forEach(key => {
            participantsCalendars[key] = this.selectedCalendars[key].calendars;
        });
        this.internals.setFormValue(JSON.stringify(participantsCalendars), this.name);
        this.valueChanged.emit({ value: JSON.stringify(participantsCalendars), name: this.name });
    }
    setParticipants(participants) {
        const selectedParticipants = {};
        participants?.forEach(participant => {
            if (participant?.availability?.calendar_ids && participant?.availability?.calendar_ids?.length > 0) {
                const isOpen = participant.is_organizer ? true : false;
                selectedParticipants[participant.email] = {
                    isOpen: isOpen,
                    name: participant.name || participant.email,
                    availability: participant.availability,
                };
            }
        });
        return selectedParticipants;
    }
    render() {
        return (h(Host, { key: '93c9e0b22219deb57d1eb08f1ffa3057c1f11e2d' }, h("div", { key: 'fbd05348502ca5f1bf16cdcabe57486afed5ff08', class: "nylas-connected-calendars", part: "npca" }, h("div", { key: 'c83d17fa00cca611b100cb17f327af5a4841fec6', class: "header", part: "npca__header" }, h("h3", { key: '563228be14edc1cfd8c9cb2c4da74f7384b6824c' }, "Connected Calendars"), h("p", { key: 'f9349bbbd8769616744fc125b22f0d50ff340c48' }, "Select the calendars to use for checking your availability.", h("tooltip-component", { key: 'b119f309472799d0d7b882cdcf079e0e5fad63ce' }, h("info-icon", { key: 'f065051277ec70042dcebc59b0baaf0b7c8a7fc3', slot: "tooltip-icon" }), h("span", { key: '3dcad6fcad23ba112d4167fee874a41363ed79ea', slot: "tooltip-content" }, "Check availability across one or more calendars. If you select multiple calendars for a participant, the participant must be available across all of their calendars to be considered available.")))), h("div", { key: 'd313e98a65f0dc8a5c8ad12d3d2a301263fe6121', class: "content", part: "npca__content" }, h("form", { key: '0e71e357eefb86c6d60e932793a779e7f4d48ead', ref: el => (this.connectedCalendarsFormRef = el) }, Object.keys(this.participantCalendars).map((key, index) => {
            const participant = this.selectedCalendars[key];
            const participantCalendars = this.participantCalendars[key];
            if (!participant || !participant.name)
                return;
            return (h("div", { class: "participant-container", part: "npca__participant-container", key: `participant-conatiner-${index}` }, h("div", { class: "participant-title", part: "npca__participant-title" }, h("p", null, participant.name, "'s connected calendars"), h("div", { class: "participant-toggle", part: "npca__participant-toggle--container" }, h("span", { class: `chevron ${participant.isOpen ? 'open' : 'closed'}`, onClick: () => {
                    this.selectedCalendars[key].isOpen = !participant.isOpen;
                    this.selectedCalendars = { ...this.selectedCalendars };
                } }, h("chevron-icon", { width: "24", height: "24" })))), participant.isOpen && (h("nylas-calendar-picker", { key: key, name: `participant-${key}`, calendars: participantCalendars, defaultSelectedCalendars: this.participantDefaultSelectedCalendars[key] }))));
        }))))));
    }
    static get is() { return "nylas-connected-calendars"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-connected-calendars.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-connected-calendars.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the participants custom availability."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'connected-calendars'"
            },
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "participants": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Participant[]",
                    "resolved": "Participant[]",
                    "references": {
                        "Participant": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Participant"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The participants selected in the add participants section."
                },
                "defaultValue": "this.selectedConfiguration?.participants || []"
            },
            "calendars": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Calendar[]",
                    "resolved": "Calendar[] | undefined",
                    "references": {
                        "Calendar": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Calendar"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The calendars to choose from for the organizer / logged in user."
                }
            },
            "participantOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AdditionalParticipant[]",
                    "resolved": "AdditionalParticipant[] | undefined",
                    "references": {
                        "AdditionalParticipant": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::AdditionalParticipant"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The participant options passed in the additionalParticipants prop\nfrom the nylas-scheduler-editor component."
                }
            }
        };
    }
    static get states() {
        return {
            "selectedCalendars": {},
            "participantCalendars": {},
            "participantDefaultSelectedCalendars": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the participants custom availability changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "calendars",
                "methodName": "calendarsChangedHandler"
            }, {
                "propName": "participants",
                "methodName": "participantsChangedHandler"
            }, {
                "propName": "participantOptions",
                "methodName": "participantOptionsChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "valueChanged",
                "method": "handleValueChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-connected-calendars',
        stateToProps: new Map([
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
            ['schedulerConfig.calendars', 'calendars'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasConnectedCalendars.prototype, "render", null);
//# sourceMappingURL=nylas-connected-calendars.js.map
