{"version":3,"file":"nylas-event-location.spec.js","sourceRoot":"","sources":["../../../../../src/components/scheduler-editor/nylas-event-location/test/nylas-event-location.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { NylasEventLocation } from '../nylas-event-location';\nimport { h } from '@stencil/core';\nimport { SelectDropdown } from '../../../design-system/select-dropdown/select-dropdown';\nimport { Configuration } from '@nylas/core';\n\ndescribe('nylas-event-location', () => {\n  let nylasEventLocation: NylasEventLocation;\n  let page: any;\n  beforeEach(async () => {\n    const config = {\n      event_booking: {\n        location: '',\n        conferencing: {},\n      },\n    } as Configuration;\n    page = await newSpecPage({\n      components: [NylasEventLocation, SelectDropdown],\n      template: () => {\n        return (\n          <nylas-event-location name=\"location\" selectedConfiguration={config}>\n            <select-dropdown name=\"location\" defaultSelectedOption={{ value: 'none', label: 'None' }}></select-dropdown>\n          </nylas-event-location>\n        );\n      },\n    });\n    nylasEventLocation = page.rootInstance as NylasEventLocation;\n  });\n\n  it('renders', async () => {\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('renders location', async () => {\n    await page.waitForChanges();\n    const dropdown = page.root.shadowRoot.querySelector('.location-input select-dropdown');\n    const button = dropdown.shadowRoot.querySelector('button');\n    expect(button.textContent).toBe('None');\n  });\n\n  it('selects location', async () => {\n    const spyEvent = jest.fn();\n    nylasEventLocation.valueChanged = {\n      emit: spyEvent,\n    };\n    const mockEvent = new CustomEvent('nylasFormDropdownChanged', {\n      detail: { value: 'custom', name: 'location' },\n      bubbles: true,\n      composed: true,\n    });\n    nylasEventLocation.nylasFormDropdownChangedHandler(mockEvent);\n    await page.waitForChanges();\n    const input = page.root.shadowRoot.querySelector('.location-input input');\n    input.value = 'New York';\n    nylasEventLocation.handleChange({ target: input });\n    await page.waitForChanges();\n    expect(spyEvent).toHaveBeenCalled();\n  });\n\n  it('emits valueChanged when location type changed to none', async () => {\n    const spyEvent = jest.fn();\n    nylasEventLocation.valueChanged = {\n      emit: spyEvent,\n    };\n    const mockEvent = new CustomEvent('nylasFormDropdownChanged', {\n      detail: { value: 'none', name: 'location' },\n      bubbles: true,\n      composed: true,\n    });\n    nylasEventLocation.nylasFormDropdownChangedHandler(mockEvent);\n    expect(spyEvent).toHaveBeenCalled();\n  });\n});\n"]}