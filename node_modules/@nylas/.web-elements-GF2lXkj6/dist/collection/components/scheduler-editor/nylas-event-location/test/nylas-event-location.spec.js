import { newSpecPage } from "@stencil/core/testing";
import { NylasEventLocation } from "../nylas-event-location";
import { h } from "@stencil/core";
import { SelectDropdown } from "../../../design-system/select-dropdown/select-dropdown";
describe('nylas-event-location', () => {
    let nylasEventLocation;
    let page;
    beforeEach(async () => {
        const config = {
            event_booking: {
                location: '',
                conferencing: {},
            },
        };
        page = await newSpecPage({
            components: [NylasEventLocation, SelectDropdown],
            template: () => {
                return (h("nylas-event-location", { name: "location", selectedConfiguration: config }, h("select-dropdown", { name: "location", defaultSelectedOption: { value: 'none', label: 'None' } })));
            },
        });
        nylasEventLocation = page.rootInstance;
    });
    it('renders', async () => {
        expect(page.root).toMatchSnapshot();
    });
    it('renders location', async () => {
        await page.waitForChanges();
        const dropdown = page.root.shadowRoot.querySelector('.location-input select-dropdown');
        const button = dropdown.shadowRoot.querySelector('button');
        expect(button.textContent).toBe('None');
    });
    it('selects location', async () => {
        const spyEvent = jest.fn();
        nylasEventLocation.valueChanged = {
            emit: spyEvent,
        };
        const mockEvent = new CustomEvent('nylasFormDropdownChanged', {
            detail: { value: 'custom', name: 'location' },
            bubbles: true,
            composed: true,
        });
        nylasEventLocation.nylasFormDropdownChangedHandler(mockEvent);
        await page.waitForChanges();
        const input = page.root.shadowRoot.querySelector('.location-input input');
        input.value = 'New York';
        nylasEventLocation.handleChange({ target: input });
        await page.waitForChanges();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('emits valueChanged when location type changed to none', async () => {
        const spyEvent = jest.fn();
        nylasEventLocation.valueChanged = {
            emit: spyEvent,
        };
        const mockEvent = new CustomEvent('nylasFormDropdownChanged', {
            detail: { value: 'none', name: 'location' },
            bubbles: true,
            composed: true,
        });
        nylasEventLocation.nylasFormDropdownChangedHandler(mockEvent);
        expect(spyEvent).toHaveBeenCalled();
    });
});
//# sourceMappingURL=nylas-event-location.spec.js.map
