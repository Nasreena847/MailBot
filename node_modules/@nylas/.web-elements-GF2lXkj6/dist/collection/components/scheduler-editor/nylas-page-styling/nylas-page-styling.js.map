{"version":3,"file":"nylas-page-styling.js","sourceRoot":"","sources":["../../../../src/components/scheduler-editor/nylas-page-styling/nylas-page-styling.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAEhE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAChD,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAsC9H,MAAM,OAAO,gBAAgB;;;;sBAaD,IAAI;oBAIP,cAAc;;gCAaO,IAAI;;IAiBhD,iBAAiB;QACf,KAAK,CAAC,oBAAoB,EAAE,mBAAmB,CAAC,CAAC;IACnD,CAAC;IAED,oBAAoB;QAClB,KAAK,CAAC,oBAAoB,EAAE,sBAAsB,CAAC,CAAC;IACtD,CAAC;IAED,iBAAiB;QACf,KAAK,CAAC,oBAAoB,EAAE,mBAAmB,CAAC,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,gBAAgB;QACd,KAAK,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,CAAC;QAChD,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC/B,IAAI,CAAC,mCAAmC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;IAED,mBAAmB;QACjB,KAAK,CAAC,oBAAoB,EAAE,qBAAqB,CAAC,CAAC;IACrD,CAAC;IAED,kBAAkB;QAChB,KAAK,CAAC,oBAAoB,EAAE,oBAAoB,CAAC,CAAC;IACpD,CAAC;IAED,mBAAmB;QACjB,KAAK,CAAC,oBAAoB,EAAE,qBAAqB,CAAC,CAAC;IACrD,CAAC;IAED,kBAAkB;QAChB,KAAK,CAAC,oBAAoB,EAAE,oBAAoB,CAAC,CAAC;IACpD,CAAC;IAQD,yBAAyB,CAAC,QAAgB;QACxC,KAAK,CAAC,oBAAoB,EAAE,2BAA2B,EAAE,QAAQ,CAAC,CAAC;QACnE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED,8BAA8B,CAAC,QAAwB;QACrD,KAAK,CAAC,oBAAoB,EAAE,gCAAgC,EAAE,QAAQ,CAAC,CAAC;QAExE,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAE1C,SAAS,wBAAwB,CAAC,OAAoB;YAEpD,IAAI,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;gBACzD,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;gBACzC,IAAI,UAAU,IAAI,GAAG,IAAI,GAAG,IAAI,UAAU,IAAI,UAAU,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE,CAAC;oBAE5E,MAAM,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;oBAE7D,OAAO,CAAC,YAAY,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;oBAElD,IAAI,aAAa,KAAK,UAAU,EAAE,CAAC;wBACjC,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;oBACnD,CAAC;yBAAM,IAAI,aAAa,KAAK,aAAa,EAAE,CAAC;wBAC3C,OAAO,CAAC,YAAY,CAAC,wBAAwB,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;oBAClE,CAAC;yBAAM,IAAI,aAAa,KAAK,cAAc,EAAE,CAAC;wBAC5C,OAAO,CAAC,YAAY,CAAC,wBAAwB,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;oBAClE,CAAC;yBAAM,IAAI,aAAa,KAAK,iBAAiB,EAAE,CAAC;wBAC/C,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;wBAChD,MAAM,cAAc,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,MAAyB,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,KAAK,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;wBAClI,OAAO,CAAC,YAAY,CAAC,yBAAyB,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;oBAClF,CAAC;yBAAM,IAAI,aAAa,KAAK,WAAW,EAAE,CAAC;wBACzC,OAAO,CAAC,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;oBACrD,CAAC;yBAAM,CAAC;wBAEN,OAAO,CAAC,YAAY,CAAC,eAAe,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;oBACzD,CAAC;gBACH,CAAC;YACH,CAAC;YAGD,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACjC,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC;oBACzC,wBAAwB,CAAC,KAAoB,CAAC,CAAC;gBACjD,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAGD,IAAI,QAAQ,EAAE,CAAC;YACb,wBAAwB,CAAC,QAAuB,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED,iBAAiB,CAAC,OAAoB;QAEpC,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAgB,CAAC;QAC9D,MAAM,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC7D,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAGzC,IAAK,OAAe,CAAC,OAAO,EAAE,CAAC;YAC7B,MAAM,OAAO,GAAI,OAAe,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YACzD,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YACtD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;gBAChC,IAAI,CAAC;oBACH,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACzC,aAAqB,CAAC,OAAO,GAAG,aAAa,CAAC;oBAC/C,IAAI,aAAa,KAAK,iBAAiB,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;wBAChF,MAAM,cAAc,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,MAAyB,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;wBACtH,aAAqB,CAAC,YAAY,CAAC,yBAAyB,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;oBACjG,CAAC;gBACH,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC;iBAAM,CAAC;gBACL,aAAqB,CAAC,OAAO,GAAI,OAAe,CAAC,OAAO,CAAC;YAC5D,CAAC;QACH,CAAC;QAED,IAAK,OAAe,CAAC,KAAK,EAAE,CAAC;YAC1B,aAAqB,CAAC,KAAK,GAAI,OAAe,CAAC,KAAK,CAAC;QACxD,CAAC;QAGD,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACjC,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC;gBAEzC,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAoB,CAAC,CAAC;gBACjE,aAAa,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YACzC,CAAC;iBAAM,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC;gBAE7C,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACnD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,mCAAmC,CAAC,QAAuB;QACzD,KAAK,CAAC,oBAAoB,EAAE,qCAAqC,EAAE,QAAQ,CAAC,CAAC;QAC7E,IAAI,CAAC,iBAAiB,GAAG,QAAQ,EAAE,UAAU,IAAI,EAAE,CAAC;QAEpD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QAChE,MAAM,WAAW,GAAG,MAAM,EAAE,UAAU,EAAE,aAAa,CAAC,uCAAuC,CAAoB,CAAC;QAClH,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO;QACT,CAAC;QAED,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAGjD,MAAM,eAAe,GAAG,WAAW,EAAE,gBAAgB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAEzE,eAAe,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE;YACjC,MAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAsB,CAAC,CAAC;YAGrE,IAAI,CAAC,8BAA8B,CAAC,aAAa,CAAC,CAAC;YAEnD,UAAU,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAGH,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,qBAAqB,CAAC,CAAC;QAC/E,MAAM,aAAa,GAAG,WAAW,EAAE,aAAa,CAAC,uCAAuC,CAAC,CAAC;QAE1F,IAAI,aAAa,EAAE,CAAC;YAElB,aAAa,CAAC,SAAS,GAAG,EAAE,CAAC;YAC7B,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACpC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC;QACrC,CAAC;IACH,CAAC;IAED,sBAAsB,CAAC,IAAY;QACjC,MAAM,WAAW,GAAG,QAAQ,EAAE,aAAa,CAAC,4CAA4C,IAAI,IAAI,CAAC,CAAC;QAClG,OAAO,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IACpC,CAAC;IAGD,KAAK,CAAC,2BAA2B,CAAC,KAAkE;QAClG,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;QACrC,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC;QAEhC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;YACvC,OAAO;QACT,CAAC;QACD,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,qBAAqB;gBACxB,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,KAAK,EAAE,CAAC;gBACnF,MAAM;YACR,KAAK,mBAAmB;gBACtB,IAAI,IAAI,KAAK,iBAAiB,EAAE,CAAC;oBAC/B,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC3C,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC;gBACnF,CAAC;gBACD,MAAM;YACR;gBACE,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC;gBACtE,MAAM;QACV,CAAC;QACD,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAGD,+BAA+B,CAAC,KAAmD;QACjF,KAAK,CAAC,oBAAoB,EAAE,iCAAiC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC7E,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;QAErC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;YACvC,OAAO;QACT,CAAC;QACD,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACvE,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC;QACxE,CAAC;QACD,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAGD,mBAAmB,CAAC,KAAmD;QACrE,KAAK,CAAC,oBAAoB,EAAE,qBAAqB,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACjE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;QAErC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;YACvC,OAAO;QACT,CAAC;QACD,IAAI,IAAI,KAAK,kBAAkB,EAAE,CAAC;YAChC,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC;QAClF,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC;QACxE,CAAC;QACD,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAGD,sBAAsB,CAAC,KAAqE;QAC1F,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;YACvC,OAAO;QACT,CAAC;QACD,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC;QACxE,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAGD,mBAAmB,CAAC,KAAgF;QAClG,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;YACvC,OAAO;QACT,CAAC;QACD,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC;QACtE,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAED,2BAA2B;QACzB,KAAK,CAAC,oBAAoB,EAAE,6BAA6B,CAAC,CAAC;QAC3D,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/E,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAC7F,CAAC;IAED,uBAAuB;QACrB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;IAC7B,CAAC;IAmBD,MAAM;QACJ,OAAO,CACL,EAAC,IAAI;YACH,4DAAK,IAAI,EAAC,KAAK,EAAC,KAAK,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBACvF,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CACvB,WAAK,KAAK,EAAC,QAAQ,EAAC,IAAI,EAAC,aAAa;oBACpC;wBACE,+CAAuC,CACnC;oBACN,WAAK,KAAK,EAAC,eAAe,EAAC,IAAI,EAAC,+BAA+B;wBAC7D,YAAM,KAAK,EAAE,WAAW,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,uBAAuB,EAAE;4BACvG,oBAAc,KAAK,EAAC,IAAI,EAAC,MAAM,EAAC,IAAI,GAAG,CAClC,CACH,CACF,CACP,CAAC,CAAC,CAAC,IAAI;gBAER,4DAAK,EAAE,EAAC,0BAA0B,EAAC,KAAK,EAAC,0BAA0B,EAAC,IAAI,EAAC,WAAW;oBAClF,4DAAK,KAAK,EAAE,EAAE,6BAA6B,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE;wBACvF,4DAAK,KAAK,EAAC,yBAAyB;4BAClC,4DAAK,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,GAAQ,CACxD,CACF,CACF,CACF,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AA5BC;IAjBC,iBAAiB,CAAsG;QACtH,IAAI,EAAE,oBAAoB;QAC1B,YAAY,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,uCAAuC,EAAE,uBAAuB,CAAC,CAAC,CAAC;QAC3F,YAAY,EAAE;YACZ,YAAY,EAAE,KAAK,EACjB,KAAiI,EACjI,8BAA6D,EAC7D,EAAE;gBACF,MAAM,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;gBAEtC,IAAI,YAAY,EAAE,CAAC;oBACjB,YAAY,CAAC,KAAK,CAAC,CAAC;gBACtB,CAAC;YACH,CAAC;SACF;QACD,iBAAiB,EAAE,IAAI;KACxB,CAAC;;;;8CA4BD","sourcesContent":["import { RegisterComponent } from '@/common/register-component';\nimport { NylasSchedulerConfigConnector } from '@/connector/nylas-scheduler-config-connector';\nimport { debug, sanitize } from '@/utils/utils';\nimport { AttachInternals, Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasSchedulerEditor } from '../nylas-scheduler-editor/nylas-scheduler-editor';\nimport { Appearance, Configuration } from '@nylas/core';\n\n/**\n * The `nylas-page-styling` component is a UI component that allows users to customize the styling of the scheduling page.\n * To use this component, pass a slot `custom-page-style-inputs` to the `nylas-scheduler-editor` component with the input\n * fields you want to display. The component will automatically update the appearance object when the input fields are changed.\n * Ensure that the input fields have the `name` attribute set to the key in the appearance object.\n *\n * If you want to style the Nylas hosted scheduler page, you can use this component to customize the appearance of the page.\n * The fields that can be customized in the Nylas hosted scheduler page are:\n * - Primary color: (name: color)\n * - Company logo: (name: company_logo_url)\n * - Submit button label: (name: submit_button_label)\n * - Thank you message: (name: thank_you_message)\n *\n * @slot custom-page-style-inputs - This slot is used to pass a custom page style form to the Nylas Scheduler Editor component.\n * @part nps - The nylas-page-styling container\n * @part nps__header - The header of the page styling section\n * @part nps__drawer-toggle--container - The page styling drawer toggle container\n * @part nps__body - The body of the page styling section\n * @part nps__title-input-textfield - The page styling page title input textfield\n * @part nps__company-name-input-textfield - The page styling company name input textfield\n * @part nps__input-image-url - The page styling company logo input textfield\n * @part nps__color-picker - The page styling color picker\n * @part nps__color-picker-button - The page styling color picker button\n * @part nps__color-picker-button-label - The page styling color input field label *\n * @part nps__color-picker-button-selected-label - The page styling color picker label denoting which color is selected\n * @part nps__submit-button-label-input-textfield - The page styling submut button label input textfield\n * @part nps__message-textarea - The page styling thank you message textarea\n */\n@Component({\n  tag: 'nylas-page-styling',\n  styleUrl: 'nylas-page-styling.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class NylasPageStyling {\n  @Element() host!: HTMLNylasPageStylingElement;\n  /**\n   * The selected configuration.\n   */\n  @Prop() selectedConfiguration?: Configuration;\n  /**\n   * The appearance data to display\n   */\n  @Prop() appearance?: Appearance;\n  /**\n   * Is the page styling card open\n   */\n  @Prop() isOpen: boolean = true;\n  /**\n   * The name of the component\n   */\n  @Prop() name: string = 'page-styling';\n  /**\n   * The element internals.\n   */\n  @AttachInternals() internals!: ElementInternals;\n\n  /**\n   * The confirmation email template state.\n   */\n  @State() currentAppearance!: Appearance;\n  /**\n   * The confirmation email template state.\n   */\n  @State() customInputsSlot: Element | null = null;\n\n  /**\n   * This event is fired when the email reminders change.\n   */\n  @Event() valueChanged!: EventEmitter<{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }>;\n\n  /**\n   * This event is fired when the form is submitted in the parent component.\n   */\n  @Event() bookingFormSubmitted!: EventEmitter<void>;\n\n  // Lifecycle methods\n  connectedCallback() {\n    debug('nylas-page-styling', 'connectedCallback');\n  }\n\n  disconnectedCallback() {\n    debug('nylas-page-styling', 'disconnectedCallback');\n  }\n\n  componentWillLoad() {\n    debug('nylas-page-styling', 'componentWillLoad');\n    // See comment in the @Watch('name') decorator for more information.\n    this.host.setAttribute('name', this.name);\n  }\n\n  componentDidLoad() {\n    debug('nylas-page-styling', 'componentDidLoad');\n    if (this.selectedConfiguration) {\n      this.selectedConfigurationChangedHandler(this.selectedConfiguration);\n    }\n  }\n\n  componentWillUpdate() {\n    debug('nylas-page-styling', 'componentWillUpdate');\n  }\n\n  componentDidUpdate() {\n    debug('nylas-page-styling', 'componentDidUpdate');\n  }\n\n  componentWillRender() {\n    debug('nylas-page-styling', 'componentWillRender');\n  }\n\n  componentDidRender() {\n    debug('nylas-page-styling', 'componentDidRender');\n  }\n\n  /**\n   * When a name prop is passed, stencil does not automatically set the name attribute on the host element.\n   * Since this component is form-associated, the name attribute is required for form submission.\n   * This is a workaround to ensure that the name attribute is set on the host element.\n   */\n  @Watch('name')\n  elementNameChangedHandler(newValue: string) {\n    debug('nylas-page-styling', 'elementNameChangedHandler', newValue);\n    this.host.setAttribute('name', newValue);\n  }\n\n  customInputsSlotChangedHandler(newValue: Element | null) {\n    debug('nylas-page-styling', 'customInputsSlotChangedHandler', newValue);\n\n    const appearance = this.currentAppearance;\n\n    function updateInputDefaultValues(element: HTMLElement) {\n      // Process elements with a 'name' attribute\n      if (element.hasAttribute && element.hasAttribute('name')) {\n        const key = element.getAttribute('name');\n        if (appearance && key && key in appearance && appearance[key] !== undefined) {\n          // Update attributes based on component type\n          const componentType = element.getAttribute('component-type');\n\n          element.setAttribute('data-page-styling', 'true');\n\n          if (componentType === 'checkbox') {\n            element.setAttribute('checked', appearance[key]);\n          } else if (componentType === 'radio-group') {\n            element.setAttribute('default-selected-value', appearance[key]);\n          } else if (componentType === 'color-picker') {\n            element.setAttribute('default-selected-color', appearance[key]);\n          } else if (componentType === 'select-dropdown') {\n            const options = element.getAttribute('options');\n            const selectedOption = options ? JSON.parse(options).find((option: { value: string }) => option.value === appearance[key]) : null;\n            element.setAttribute('default-selected-option', JSON.stringify(selectedOption));\n          } else if (componentType === 'image-url') {\n            element.setAttribute('image-url', appearance[key]);\n          } else {\n            // Default case: set the default value\n            element.setAttribute('default-value', appearance[key]);\n          }\n        }\n      }\n\n      // Recursively process child elements (skip text nodes)\n      element.childNodes.forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n          updateInputDefaultValues(child as HTMLElement); // Cast child to HTMLElement\n        }\n      });\n    }\n\n    // Start the recursive process with the cloned element (newValue)\n    if (newValue) {\n      updateInputDefaultValues(newValue as HTMLElement);\n    }\n  }\n\n  cloneAndCopyProps(element: HTMLElement): HTMLElement {\n    // Clone the current element\n    const clonedElement = element.cloneNode(false) as HTMLElement; // Do a shallow clone first\n    const componentType = element.getAttribute('component-type');\n    const key = element.getAttribute('name');\n\n    // Copy properties like 'options' and 'value' for custom elements\n    if ((element as any).options) {\n      const options = (element as any).getAttribute('options');\n      console.log('page-styling options', element, options);\n      if (typeof options === 'string') {\n        try {\n          const parsedOptions = JSON.parse(options);\n          (clonedElement as any).options = parsedOptions; // Parse the 'options' string\n          if (componentType === 'select-dropdown' && key && key in this.currentAppearance) {\n            const selectedOption = parsedOptions.find((option: { value: string }) => option.value === this.currentAppearance[key]);\n            (clonedElement as any).setAttribute('default-selected-option', JSON.stringify(selectedOption));\n          }\n        } catch (e) {\n          console.error('Error parsing options', e);\n        }\n      } else {\n        (clonedElement as any).options = (element as any).options; // Copy 'options' property\n      }\n    }\n\n    if ((element as any).value) {\n      (clonedElement as any).value = (element as any).value; // Copy 'value' property\n    }\n\n    // Recursively process child elements\n    element.childNodes.forEach(child => {\n      if (child.nodeType === Node.ELEMENT_NODE) {\n        // If the child is an element, recursively clone and process it\n        const clonedChild = this.cloneAndCopyProps(child as HTMLElement);\n        clonedElement.appendChild(clonedChild); // Append the cloned child to the parent clone\n      } else if (child.nodeType === Node.TEXT_NODE) {\n        // For text nodes, just clone and append the text content\n        clonedElement.appendChild(child.cloneNode(true));\n      }\n    });\n\n    return clonedElement; // Return the cloned element with its children\n  }\n\n  selectedConfigurationChangedHandler(newValue: Configuration) {\n    debug('nylas-page-styling', 'selectedConfigurationChangedHandler', newValue);\n    this.currentAppearance = newValue?.appearance || {};\n    // Get the slot element\n    const editor = document.querySelector('nylas-scheduler-editor');\n    const slotElement = editor?.shadowRoot?.querySelector('slot[name=\"custom-page-style-inputs\"]') as HTMLSlotElement;\n    if (!slotElement) {\n      return;\n    }\n\n    const divElement = document.createElement('div');\n\n    // Get the slotted content (the nodes passed into the slot)\n    const slottedElements = slotElement?.assignedElements({ flatten: true });\n    // Clone each of the slotted nodes and append them to the cloned slot\n    slottedElements?.forEach(element => {\n      const clonedElement = this.cloneAndCopyProps(element as HTMLElement); // Clone recursively and copy properties\n\n      // Clone the slotted element (deep clone)\n      this.customInputsSlotChangedHandler(clonedElement);\n      // Append the cloned element to the document fragment\n      divElement.appendChild(clonedElement);\n    });\n\n    // Replace the original content with the new cloned and updated content\n    const bodyElement = this.host.shadowRoot?.querySelector('.nylas-page-styling');\n    const slotContainer = bodyElement?.querySelector('.nylas-page-styling__body .subsection');\n\n    if (slotContainer) {\n      // Remove existing children (if necessary) and append the new content\n      slotContainer.innerHTML = ''; // Clear existing content\n      divElement.childNodes.forEach(child => {\n        slotContainer.appendChild(child); // Append each child of divElement\n      });\n      this.customInputsSlot = divElement;\n    }\n  }\n\n  checkIfElementIsInSlot(name: string): boolean {\n    const findElement = document?.querySelector(`[slot=\"custom-page-style-inputs\"] [name=\"${name}\"]`);\n    return findElement ? true : false;\n  }\n\n  @Listen('nylasFormInputChanged', { target: 'document' })\n  async nylasFormInputChangeHandler(event: CustomEvent<{ value: string; name: string; type?: string }>) {\n    const { name, value } = event.detail;\n    const type = event.detail?.type;\n\n    if (!this.checkIfElementIsInSlot(name)) {\n      return;\n    }\n    switch (name) {\n      case 'submit_button_label':\n        this.currentAppearance = { ...this.currentAppearance, submit_button_label: value };\n        break;\n      case 'thank_you_message':\n        if (type === 'multi_line_text') {\n          const value = sanitize(event.detail.value);\n          this.currentAppearance = { ...this.currentAppearance, thank_you_message: value };\n        }\n        break;\n      default:\n        this.currentAppearance = { ...this.currentAppearance, [name]: value };\n        break;\n    }\n    this.updateConfirmationFormValue();\n  }\n\n  @Listen('nylasFormDropdownChanged', { target: 'document' })\n  nylasFormDropdownChangedHandler(event: CustomEvent<{ value: string; name: string }>) {\n    debug('nylas-page-styling', 'nylasFormDropdownChangedHandler', event.detail);\n    const { value, name } = event.detail;\n\n    if (!this.checkIfElementIsInSlot(name)) {\n      return;\n    }\n    if (name === 'color') {\n      this.currentAppearance = { ...this.currentAppearance, color: value };\n    } else {\n      this.currentAppearance = { ...this.currentAppearance, [name]: value };\n    }\n    this.updateConfirmationFormValue();\n  }\n\n  @Listen('valueChanged', { target: 'document' })\n  valueChangedHandler(event: CustomEvent<{ value: string; name: string }>) {\n    debug('nylas-page-styling', 'valueChangedHandler', event.detail);\n    const { value, name } = event.detail;\n\n    if (!this.checkIfElementIsInSlot(name)) {\n      return;\n    }\n    if (name === 'company_logo_url') {\n      this.currentAppearance = { ...this.currentAppearance, company_logo_url: value };\n    } else {\n      this.currentAppearance = { ...this.currentAppearance, [name]: value };\n    }\n    this.updateConfirmationFormValue();\n  }\n\n  @Listen('nylasFormCheckboxToggled', { target: 'document' })\n  checkboxToggledHandler(event: CustomEvent<{ checked: boolean; name: string; label: string }>) {\n    const { checked, name } = event.detail;\n    if (!this.checkIfElementIsInSlot(name)) {\n      return;\n    }\n    this.currentAppearance = { ...this.currentAppearance, [name]: checked };\n    this.updateConfirmationFormValue();\n  }\n\n  @Listen('nylasFormRadioChanged', { target: 'document' })\n  radioChangedHandler(event: CustomEvent<{ value: string; name: string; label: string; type: string }>) {\n    const { value, name } = event.detail;\n    if (!this.checkIfElementIsInSlot(name)) {\n      return;\n    }\n    this.currentAppearance = { ...this.currentAppearance, [name]: value };\n    this.updateConfirmationFormValue();\n  }\n\n  updateConfirmationFormValue() {\n    debug('nylas-page-styling', 'updateConfirmationFormValue');\n    this.internals.setFormValue(JSON.stringify(this.currentAppearance), this.name);\n    this.valueChanged.emit({ value: JSON.stringify(this.currentAppearance), name: this.name });\n  }\n\n  toggleConfirmationEmail() {\n    this.isOpen = !this.isOpen;\n  }\n\n  @RegisterComponent<NylasPageStyling, NylasSchedulerConfigConnector, Exclude<NylasSchedulerEditor['stores'], undefined>>({\n    name: 'nylas-page-styling',\n    stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),\n    eventToProps: {\n      valueChanged: async (\n        event: CustomEvent<{ value: string; name: string; valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void }>,\n        _nylasSchedulerConfigConnector: NylasSchedulerConfigConnector,\n      ) => {\n        const { valueChanged } = event.detail;\n        // If a handler is passed, call it.\n        if (valueChanged) {\n          valueChanged(event);\n        }\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    return (\n      <Host>\n        <div part=\"nps\" class={{ 'nylas-page-styling': true, 'no-border': !this.customInputsSlot }}>\n          {this.customInputsSlot ? (\n            <div class=\"header\" part=\"nps__header\">\n              <div>\n                <h3>Page styling and customization</h3>\n              </div>\n              <div class=\"drawer-toggle\" part=\"nps__drawer-toggle--container\">\n                <span class={`chevron ${this.isOpen ? 'open' : 'closed'} `} onClick={() => this.toggleConfirmationEmail()}>\n                  <chevron-icon width=\"24\" height=\"24\" />\n                </span>\n              </div>\n            </div>\n          ) : null}\n\n          <div id=\"nylas-page-styling__body\" class=\"nylas-page-styling__body\" part=\"nps__body\">\n            <div class={{ 'nylas-page-styling__section': true, 'no-padding': !this.customInputsSlot }}>\n              <div class=\"nylas-page-styling__row\">\n                <div class={{ subsection: true, hide: !this.isOpen }}></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}