var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, parsePreviewLink } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasListConfigurations {
    constructor() {
        this.configurations = [];
        this.schedulerPreviewLink = '';
        this.listConfigurationsNextCursor = undefined;
        this.state = 'loading';
        this.error = '';
        this.currentCursor = null;
        this.previousCursors = [];
        this.disableNextPageButton = false;
    }
    listConfigurationsNextCursorChangedHandler(newVal, oldVal) {
        if (!newVal || newVal === oldVal) {
            if (newVal === null) {
                this.disableNextPageButton = true;
            }
            return;
        }
        this.disableNextPageButton = false;
        this.currentCursor = newVal;
    }
    connectedCallback() {
        debug('[nylas-list-configurations]', 'connectedCallback');
    }
    componentWillLoad() {
        debug('[nylas-list-configurations]', 'componentWillLoad');
        if (this.configurations && this.configurations.length > 0) {
            this.state = 'loaded';
        }
    }
    componentDidLoad() {
        debug('[nylas-list-configurations]', 'componentDidLoad');
        this.initListConfigurations.emit({
            host: this.host,
        });
    }
    disconnectedCallback() {
        debug('[nylas-list-configurations]', 'disconnectedCallback');
    }
    async handleNylasFormDropdownChanged(event) {
        debug('[nylas-list-configurations]', 'handleNylasFormDropdownChanged', event.detail);
        const { value } = event.detail;
        const [action, index] = value.split('-');
        event.preventDefault();
        switch (action) {
            case 'delete':
                this.deleteButtonClick.emit({ host: this.host, configuration: this.configurations[index] });
                break;
            case 'preview':
                window.open(parsePreviewLink(this.schedulerPreviewLink, this.configurations[index]), '_blank');
                break;
            case 'copy':
                await navigator.clipboard.writeText(parsePreviewLink(this.schedulerPreviewLink, this.configurations[index]));
                break;
            default:
                break;
        }
    }
    async getState() {
        return this.state;
    }
    async setState(state) {
        this.state = state;
    }
    async setError(error) {
        this.error = error;
    }
    getDurationString(duration) {
        const hours = Math.floor(duration / 60);
        const minutes = duration % 60;
        return `${hours ? hours : ''} ${hours ? `${hours > 1 ? 'hours' : 'hour'}` : ''} ${minutes ? minutes : ''} ${minutes ? `${minutes > 1 ? 'mins' : 'min'}` : ''}`;
    }
    getActionLabelHTML(action) {
        const actionStyle = {
            display: 'inline-flex',
            alignItems: 'center',
            gap: '0.5rem',
        };
        const dangerStyle = {
            color: 'var(--nylas-error)',
        };
        switch (action) {
            case 'preview':
                return (h("span", { style: actionStyle }, h("eye-icon", { width: "16", height: "16" }), "Preview"));
            case 'copy':
                return (h("span", { style: actionStyle }, h("copy-icon", { width: "16", height: "16" }), "Copy"));
            case 'delete':
                return (h("span", { style: { ...actionStyle, ...dangerStyle } }, h("delete-icon", { width: "15", height: "17" }), "Delete"));
            default:
                return '';
        }
    }
    previousPageClickedHandler() {
        if (this.previousCursors.length === 0)
            return;
        this.currentCursor = this.previousCursors.pop() || null;
        const prevCursor = this.previousCursors[this.previousCursors.length - 1] || undefined;
        this.initListConfigurations.emit({
            host: this.host,
            cursor: prevCursor,
        });
    }
    nextPageClickedHandler() {
        if (!this.currentCursor)
            return;
        this.previousCursors = [...this.previousCursors, this.currentCursor];
        this.initListConfigurations.emit({
            host: this.host,
            cursor: this.currentCursor,
        });
    }
    render() {
        return (h(Host, null, h("div", { class: "header" }, h("div", { class: "description" }, h("h2", null, "All Scheduling Pages"), h("p", null, "Create and manage your Scheduling Pages.")), this.configurations && this.configurations.length > 0 && (h("div", { class: "actions" }, h("button-component", { part: "nlc__create-new-cta", clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, "Create new")))), h("div", { class: "configurations" }, h("div", { class: "table-container" }, h("table", { class: {
                'no-configurations': this.state !== 'loading' && (!this.configurations || this.configurations.length === 0),
            } }, h("tr", { class: {
                hide: this.state === 'loading' || (this.configurations && this.configurations.length === 0),
            } }, h("th", null, "Page title"), h("th", null, "Duration"), h("th", null)), this.state === 'loading' && (h("tr", { class: "no-configurations" }, h("td", { colSpan: 3 }, h("div", null, h("h3", null, "Loading..."), h("p", null, "Please wait while we fetch the scheduling pages"))))), this.state !== 'loading' && (!this.configurations || this.configurations.length === 0) && (h("tr", { class: "no-configurations" }, h("td", { colSpan: 3 }, h("div", null, h("calendar-icon", { width: "48", height: "48" }), h("h3", null, "No scheduling pages found"), h("p", null, "Get started with creating your first scheduling page"), h("button-component", { part: "nlc__create-new-cta", clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, "Create new"))))), this.state !== 'loading' &&
            this.configurations.map((config, i) => {
                return (h("tr", { key: config.id }, h("td", null, h("div", { class: "title" }, h("div", { class: "config-event-title", title: config.event_booking.title }, config.event_booking.title), h("div", { class: 'config-event-description' }, config.event_booking.description))), h("td", null, h("div", { class: "duration" }, this.getDurationString(config.availability.duration_minutes))), h("td", null, h("div", { class: "actions" }, h("button-component", { variant: 'basic', key: `edit-${i}`, clickHandler: event => {
                        event.preventDefault();
                        this.editButtonClick.emit({ host: this.host, configuration: config });
                    } }, h("edit-icon", { width: "16", height: "16" }), "Edit"), h("select-dropdown", { name: "actions", options: [
                        { value: `preview-${i}`, label: 'Preview', labelHTML: this.getActionLabelHTML('preview') },
                        { value: `copy-${i}`, label: 'Copy link', labelHTML: this.getActionLabelHTML('copy') },
                        { value: `delete-${i}`, label: 'Delete', labelHTML: this.getActionLabelHTML('delete') },
                    ], defaultSelectedOption: { value: '', label: '' }, dropdownButtonText: "...", withSearch: false, withChevron: false, exportparts: "sd_dropdown: actions__dropdown, sd_dropdown-button: actions__dropdown-button, sd_dropdown-content: actions__dropdown-content" })))));
            }))), h("div", { class: "pagination" }, h("button", { class: "arrow left", onClick: () => this.previousPageClickedHandler(), disabled: this.previousCursors.length <= 0 }, h("chevron-icon", null)), h("button", { class: "arrow right", onClick: () => this.nextPageClickedHandler(), disabled: this.disableNextPageButton }, h("chevron-icon", null)))), this.state === 'error' && (h("div", { class: "error-container" }, h("p", { class: 'error' }, this.error)))));
    }
    static get is() { return "nylas-list-configurations"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-list-configurations.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-list-configurations.css"]
        };
    }
    static get properties() {
        return {
            "configurations": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration[]",
                    "resolved": "Configuration[]",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The list of configurations to display."
                },
                "defaultValue": "[]"
            },
            "schedulerPreviewLink": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The scheduler preview link to use when the user clicks on the preview button.\nYou can use a placeholder `{config.id}` to replace the configuration id anywhere in the link."
                },
                "attribute": "scheduler-preview-link",
                "reflect": false,
                "defaultValue": "''"
            },
            "listConfigurationsNextCursor": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "null | string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The next cursor for list configurations, if any."
                },
                "attribute": "list-configurations-next-cursor",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "state": {},
            "error": {},
            "currentCursor": {},
            "previousCursors": {},
            "disableNextPageButton": {}
        };
    }
    static get events() {
        return [{
                "method": "initListConfigurations",
                "name": "initListConfigurations",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the component is initialized."
                },
                "complexType": {
                    "original": "{\n    host: HTMLNylasListConfigurationsElement;\n    cursor?: string;\n  }",
                    "resolved": "{ host: HTMLNylasListConfigurationsElement; cursor?: string | undefined; }",
                    "references": {
                        "HTMLNylasListConfigurationsElement": {
                            "location": "global",
                            "id": "global::HTMLNylasListConfigurationsElement"
                        }
                    }
                }
            }, {
                "method": "createButtonClick",
                "name": "createButtonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the user clicks the create event button."
                },
                "complexType": {
                    "original": "HTMLNylasListConfigurationsElement",
                    "resolved": "HTMLNylasListConfigurationsElement",
                    "references": {
                        "HTMLNylasListConfigurationsElement": {
                            "location": "global",
                            "id": "global::HTMLNylasListConfigurationsElement"
                        }
                    }
                }
            }, {
                "method": "editButtonClick",
                "name": "editButtonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the user clicks the edit event button."
                },
                "complexType": {
                    "original": "{\n    host: HTMLNylasListConfigurationsElement;\n    configuration: Configuration;\n  }",
                    "resolved": "{ host: HTMLNylasListConfigurationsElement; configuration: Configuration; }",
                    "references": {
                        "HTMLNylasListConfigurationsElement": {
                            "location": "global",
                            "id": "global::HTMLNylasListConfigurationsElement"
                        },
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                }
            }, {
                "method": "deleteButtonClick",
                "name": "deleteButtonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the user clicks the delete event button."
                },
                "complexType": {
                    "original": "{\n    host: HTMLNylasListConfigurationsElement;\n    configuration: Configuration;\n  }",
                    "resolved": "{ host: HTMLNylasListConfigurationsElement; configuration: Configuration; }",
                    "references": {
                        "HTMLNylasListConfigurationsElement": {
                            "location": "global",
                            "id": "global::HTMLNylasListConfigurationsElement"
                        },
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "getState": {
                "complexType": {
                    "signature": "() => Promise<\"loading\" | \"error\" | \"loaded\">",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<\"loading\" | \"error\" | \"loaded\">"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "setState": {
                "complexType": {
                    "signature": "(state: 'loading' | 'loaded' | 'error') => Promise<void>",
                    "parameters": [{
                            "name": "state",
                            "type": "\"loading\" | \"error\" | \"loaded\"",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "setError": {
                "complexType": {
                    "signature": "(error: string) => Promise<void>",
                    "parameters": [{
                            "name": "error",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "listConfigurationsNextCursor",
                "methodName": "listConfigurationsNextCursorChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "handleNylasFormDropdownChanged",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
__decorate([
    RegisterComponent({
        name: 'nylas-list-configurations',
        stateToProps: new Map([
            ['schedulerConfig.configurations', 'configurations'],
            ['schedulerConfig.listConfigurationsNextCursor', 'listConfigurationsNextCursor'],
        ]),
        localPropsToProp: new Map([['schedulerPreviewLink', 'schedulerPreviewLink']]),
        eventToProps: {
            initListConfigurations: async (event, connector) => {
                const { host, cursor } = event.detail;
                await host.setState('loading');
                const [data, error] = await connector.schedulerConfig.getConfigurations(cursor);
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                    return;
                }
                await host.setState('loaded');
            },
            createButtonClick: async (_, connector) => {
                connector.schedulerConfigStore.resetSelectedConfiguration();
                connector.schedulerConfigStore.state.action = 'create';
            },
            deleteButtonClick: async (event, connector) => {
                const { host, configuration } = event.detail;
                const [data, error] = await connector.schedulerConfig.deleteConfiguration(configuration.id);
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                }
            },
            editButtonClick: async (event, connector) => {
                const { configuration } = event.detail;
                connector.schedulerConfigStore.state.selectedConfiguration = configuration;
                connector.schedulerConfigStore.state.action = 'edit';
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasListConfigurations.prototype, "render", null);
//# sourceMappingURL=nylas-list-configurations.js.map
