var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasSchedulingMethod {
    constructor() {
        this.name = 'availability-method';
        this.selectedConfiguration = undefined;
        this.participantOptions = undefined;
        this.readOnly = false;
        this.selectedBookingType = '';
    }
    connectedCallback() {
        debug('nylas-scheduling-method', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-scheduling-method', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-scheduling-method', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-scheduling-method', 'componentDidLoad');
        const bookingtType = this.selectedConfiguration?.availability?.availability_rules?.availability_method?.toString();
        if (bookingtType && typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(bookingtType, 'booking-calendar');
        }
        this.selectedBookingType = bookingtType || 'collective';
        this.valueChanged.emit({ value: this.selectedBookingType, name: this.name });
    }
    componentWillUpdate() {
        debug('nylas-scheduling-method', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-scheduling-method', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-scheduling-method', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-scheduling-method', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-scheduling-method', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-scheduling-method', 'nylasFormDropdownChangedHandler', event.detail);
        const valueChanged = (event) => {
            const { value } = event.detail;
            if (value) {
                this.selectedBookingType = value;
                this.internals.setFormValue(value, this.name);
            }
        };
        this.valueChanged.emit({ value: event.detail.value, name: this.name, valueChanged });
    }
    render() {
        const bookingTypeOptions = [
            { label: 'Standard booking', value: 'collective' },
            { label: 'Round-robin max fairness', value: 'max-fairness' },
            { label: 'Round-robin max availability', value: 'max-availability' },
        ];
        const defaultBookingType = this.selectedConfiguration?.availability?.availability_rules?.availability_method?.toString();
        const hasAdditionalParticipants = this.participantOptions &&
            this.participantOptions?.length > 0 &&
            !!this.participantOptions[0].email &&
            !!this.participantOptions[0].name &&
            !!this.participantOptions[0].calendars &&
            this.participantOptions[0].calendars.length > 0;
        if ((defaultBookingType || !hasAdditionalParticipants) && !this.readOnly) {
            return null;
        }
        return (h(Host, null, h("div", { class: "nylas-scheduling-method", part: "nsm" }, h("div", { class: "header", part: "nsm__header" }, h("h3", null, "Scheduling method")), h("div", { class: "nylas-scheduling-method__dropdown" }, h("span", { class: "nylas-scheduling-method__dropdown-label" }, "Select a scheduling method for the event.", h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, h("strong", null, "Standard Booking"), h("br", null), "- Allows 1:1 bookings, or n:1 bookings with additional participants.", h("br", null), h("br", null), h("strong", null, "Round-Robin Maximize Fairness"), h("br", null), "- Rotates through the list of participants you select, displaying the participant with the fewest recent bookings.", h("br", null), h("br", null), h("strong", null, "Round-Robin Maximize Availability"), h("br", null), "- Rotates through the list of participants you select, prioritizing participants with the fewest recent bookings, but making as many time-slots available as possible.", h("br", null)))), this.readOnly ? (h("input-component", { name: "availability-method-read-only", type: "text", exportparts: "ic__label: nsm__input-label, ic__input: nsm__input, ic__input_wrapper: nsm__input_wrapper", readOnly: true, defaultValue: bookingTypeOptions.find(cal => cal.value == defaultBookingType)?.label ?? bookingTypeOptions[0].label })) : (h("select-dropdown", { name: this.name, options: bookingTypeOptions, withSearch: false, exportparts: "sd_dropdown: nsm__dropdown, sd_dropdown-button: nsm__dropdown-button, sd_dropdown-content: nsm__dropdown-content", defaultSelectedOption: bookingTypeOptions.find(cal => cal.value == defaultBookingType) ?? bookingTypeOptions[0] }))))));
    }
    static get is() { return "nylas-scheduling-method"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-scheduling-method.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-scheduling-method.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the booking type picker."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'availability-method'"
            },
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "participantOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "AdditionalParticipant[]",
                    "resolved": "AdditionalParticipant[] | undefined",
                    "references": {
                        "AdditionalParticipant": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::AdditionalParticipant"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The participant options passed in the additionalParticipants prop\nfrom the nylas-scheduler-editor component."
                }
            },
            "readOnly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "This prop is used to display the component in a disabled state / read-only mode."
                },
                "attribute": "read-only",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "selectedBookingType": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected booking calendar changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-scheduling-method',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasSchedulingMethod.prototype, "render", null);
//# sourceMappingURL=nylas-scheduling-method.js.map
