{"version":3,"file":"nylas-scheduling-method.js","sourceRoot":"","sources":["../../../../src/components/scheduler-editor/nylas-scheduling-method/nylas-scheduling-method.tsx"],"names":[],"mappings":"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","sourcesContent":["import { RegisterComponent } from '@/common/register-component';\nimport { NylasSchedulerConfigConnector } from '@/connector/nylas-scheduler-config-connector';\nimport { debug } from '@/utils/utils';\nimport { AdditionalParticipant, Configuration } from '@nylas/core';\nimport { AttachInternals, Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasSchedulerEditor } from '../nylas-scheduler-editor/nylas-scheduler-editor';\n\n/**\n * The `nylas-scheduling-method` component is a UI component that displays the booking calendar picker.\n * @part nsm - The booking calendar picker container\n * @part nsm__header - The header of the booking calendar picker\n * @part nsm__input-label - The input label of the booking calendar picker\n * @part nsm__dropdown - The dropdown container\n * @part nsm__dropdown-button - The dropdown button\n * @part nsm__dropdown-content - The dropdown content\n */\n@Component({\n  tag: 'nylas-scheduling-method',\n  styleUrl: 'nylas-scheduling-method.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class NylasSchedulingMethod {\n  @Element() host!: HTMLNylasSchedulingMethodElement;\n\n  /**\n   * The name of the booking type picker.\n   */\n  @Prop() name: string = 'availability-method';\n  /**\n   * The selected config\n   */\n  @Prop() selectedConfiguration?: Configuration;\n  /**\n   * The participant options passed in the additionalParticipants prop\n   * from the nylas-scheduler-editor component.\n   */\n  @Prop() participantOptions?: AdditionalParticipant[];\n  /**\n   * This prop is used to display the component in a disabled state / read-only mode.\n   */\n  @Prop() readOnly: boolean = false;\n\n  /**\n   * The element internals.\n   */\n  @AttachInternals() internals!: ElementInternals;\n\n  /**\n   * The selected booking type.\n   */\n  @State() selectedBookingType: string = '';\n\n  /**\n   * This event is fired when the selected booking calendar changes.\n   */\n  @Event() valueChanged!: EventEmitter<{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }>;\n\n  // Lifecycle methods\n  connectedCallback() {\n    debug('nylas-scheduling-method', 'connectedCallback');\n  }\n\n  disconnectedCallback() {\n    debug('nylas-scheduling-method', 'disconnectedCallback');\n  }\n\n  componentWillLoad() {\n    debug('nylas-scheduling-method', 'componentWillLoad');\n    // See comment in the @Watch('name') decorator for more information.\n    this.host.setAttribute('name', this.name);\n  }\n\n  componentDidLoad() {\n    debug('nylas-scheduling-method', 'componentDidLoad');\n    const bookingtType = this.selectedConfiguration?.availability?.availability_rules?.availability_method?.toString();\n\n    // TODO: Remove this when the internals in tests are fixed.\n    if (bookingtType && typeof this.internals.setFormValue === 'function') {\n      this.internals.setFormValue(bookingtType, 'booking-calendar');\n    }\n    this.selectedBookingType = bookingtType || 'collective';\n    this.valueChanged.emit({ value: this.selectedBookingType, name: this.name });\n  }\n\n  componentWillUpdate() {\n    debug('nylas-scheduling-method', 'componentWillUpdate');\n  }\n\n  componentDidUpdate() {\n    debug('nylas-scheduling-method', 'componentDidUpdate');\n  }\n\n  componentWillRender() {\n    debug('nylas-scheduling-method', 'componentWillRender');\n  }\n\n  componentDidRender() {\n    debug('nylas-scheduling-method', 'componentDidRender');\n  }\n\n  /**\n   * When a name prop is passed, stencil does not automatically set the name attribute on the host element.\n   * Since this component is form-associated, the name attribute is required for form submission.\n   * This is a workaround to ensure that the name attribute is set on the host element.\n   */\n  @Watch('name')\n  elementNameChangedHandler(newValue: string) {\n    debug('nylas-scheduling-method', 'elementNameChangedHandler', newValue);\n    this.host.setAttribute('name', newValue);\n  }\n\n  @Listen('nylasFormDropdownChanged')\n  nylasFormDropdownChangedHandler(event: CustomEvent<{ value: string; name: string }>) {\n    debug('nylas-scheduling-method', 'nylasFormDropdownChangedHandler', event.detail);\n    // Pass as handler so that if event.defaultPrevented by parent app, this will be skipped.\n    const valueChanged = (event: CustomEvent<{ value: string; name: string }>) => {\n      const { value } = event.detail;\n      if (value) {\n        this.selectedBookingType = value;\n        this.internals.setFormValue(value, this.name);\n      }\n    };\n    this.valueChanged.emit({ value: event.detail.value, name: this.name, valueChanged });\n  }\n\n  @RegisterComponent<NylasSchedulingMethod, NylasSchedulerConfigConnector, Exclude<NylasSchedulerEditor['stores'], undefined>>({\n    name: 'nylas-scheduling-method',\n    stateToProps: new Map([\n      ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],\n      ['schedulerConfig.additionalParticipants', 'participantOptions'],\n    ]),\n    eventToProps: {\n      valueChanged: async (\n        event: CustomEvent<{ value: string; name: string; valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void }>,\n        _nylasSchedulerConfigConnector: NylasSchedulerConfigConnector,\n      ) => {\n        const { valueChanged } = event.detail;\n        // If a handler is passed, call it.\n        if (valueChanged) {\n          valueChanged(event);\n        }\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    const bookingTypeOptions = [\n      { label: 'Standard booking', value: 'collective' },\n      { label: 'Round-robin max fairness', value: 'max-fairness' },\n      { label: 'Round-robin max availability', value: 'max-availability' },\n    ];\n    const defaultBookingType = this.selectedConfiguration?.availability?.availability_rules?.availability_method?.toString();\n    const hasAdditionalParticipants =\n      this.participantOptions &&\n      this.participantOptions?.length > 0 &&\n      !!this.participantOptions[0].email &&\n      !!this.participantOptions[0].name &&\n      !!this.participantOptions[0].calendars &&\n      this.participantOptions[0].calendars.length > 0;\n\n    // If a default availability method is set in the configuration (developer settings), do not show the booking type picker.\n    // Or, if a default availability method is not set and there are no additional participants, do not show the booking type picker.\n    if ((defaultBookingType || !hasAdditionalParticipants) && !this.readOnly) {\n      return null;\n    }\n\n    return (\n      <Host>\n        <div class=\"nylas-scheduling-method\" part=\"nsm\">\n          <div class=\"header\" part=\"nsm__header\">\n            <h3>Scheduling method</h3>\n          </div>\n          <div class=\"nylas-scheduling-method__dropdown\">\n            <span class=\"nylas-scheduling-method__dropdown-label\">\n              Select a scheduling method for the event.\n              <tooltip-component>\n                <info-icon slot=\"tooltip-icon\" />\n                <span slot=\"tooltip-content\">\n                  <strong>Standard Booking</strong>\n                  <br />\n                  - Allows 1:1 bookings, or n:1 bookings with additional participants.\n                  <br />\n                  <br />\n                  <strong>Round-Robin Maximize Fairness</strong>\n                  <br />\n                  - Rotates through the list of participants you select, displaying the participant with the fewest recent bookings.\n                  <br />\n                  <br />\n                  <strong>Round-Robin Maximize Availability</strong>\n                  <br />\n                  - Rotates through the list of participants you select, prioritizing participants with the fewest recent bookings, but making as many time-slots available as\n                  possible.\n                  <br />\n                </span>\n              </tooltip-component>\n            </span>\n            {this.readOnly ? (\n              <input-component\n                name=\"availability-method-read-only\"\n                type=\"text\"\n                exportparts=\"ic__label: nsm__input-label, ic__input: nsm__input, ic__input_wrapper: nsm__input_wrapper\"\n                readOnly\n                defaultValue={bookingTypeOptions.find(cal => cal.value == defaultBookingType)?.label ?? bookingTypeOptions[0].label}\n              />\n            ) : (\n              <select-dropdown\n                name={this.name}\n                options={bookingTypeOptions}\n                withSearch={false}\n                exportparts=\"sd_dropdown: nsm__dropdown, sd_dropdown-button: nsm__dropdown-button, sd_dropdown-content: nsm__dropdown-content\"\n                defaultSelectedOption={bookingTypeOptions.find(cal => cal.value == defaultBookingType) ?? bookingTypeOptions[0]}\n              />\n            )}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}