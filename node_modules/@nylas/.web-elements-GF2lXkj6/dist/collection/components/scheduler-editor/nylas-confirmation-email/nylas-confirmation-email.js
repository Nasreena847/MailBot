var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug, sanitize } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasConfirmationEmail {
    constructor() {
        this.selectedConfiguration = undefined;
        this.confirmationEmailTemplate = {};
        this.isOpen = false;
        this.participants = [];
        this.name = 'confirmation-email-template';
        this.confirmationEmail = undefined;
        this.isConfirmationEmailOpen = this.isOpen;
        this.participantsState = this.participants;
    }
    connectedCallback() {
        debug('nylas-confirmation-email', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-confirmation-email', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-confirmation-email', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-confirmation-email', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.confirmationEmail = this.confirmationEmailTemplate;
            this.isConfirmationEmailOpen = this.isOpen;
            this.participantsState = this.participants;
        }
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-confirmation-email', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-confirmation-email', 'selectedConfigurationChangedHandler', newValue);
        this.confirmationEmail = newValue?.scheduler?.email_template || this.confirmationEmailTemplate;
        this.isConfirmationEmailOpen = !newValue?.event_booking?.reminders?.overrides?.length;
        this.participantsState = newValue?.participants || this.participants;
    }
    async nylasFormInputChangeHandler(event) {
        const { name, value } = event.detail;
        const type = event.detail?.type;
        if (name === 'confirmation-email-title') {
            this.confirmationEmail = { ...this.confirmationEmail, booking_confirmed: { ...(this.confirmationEmail?.booking_confirmed || {}), title: value } };
            this.internals.setFormValue(JSON.stringify(this.confirmationEmail), this.name);
            this.valueChanged.emit({ value: JSON.stringify(this.confirmationEmail), name: this.name });
        }
        else if (name === 'confirmation-email-body' && type === 'multi_line_text') {
            this.handleEmailBodyChange(event);
        }
    }
    valueChangedHandler(event) {
        debug('nylas-confirmation-email', 'valueChangedHandler', event.detail);
        const { value, name } = event.detail;
        if (name === 'confirmation-email-logo') {
            this.confirmationEmail = { ...this.confirmationEmail, logo: value };
            this.internals.setFormValue(JSON.stringify(this.confirmationEmail), this.name);
            this.valueChanged.emit({ value: JSON.stringify(this.confirmationEmail), name: this.name });
        }
    }
    updateConfirmationFormValue() {
        debug('nylas-confirmation-email', 'updateConfirmationFormValue');
        this.internals.setFormValue(JSON.stringify(this.confirmationEmail), this.name);
        this.valueChanged.emit({ value: JSON.stringify(this.confirmationEmail), name: this.name });
    }
    toggleConfirmationEmail() {
        this.isConfirmationEmailOpen = !this.isConfirmationEmailOpen;
    }
    handleEmailBodyChange(event) {
        const value = sanitize(event.detail.value);
        this.confirmationEmail = { ...this.confirmationEmail, booking_confirmed: { ...(this.confirmationEmail?.booking_confirmed || {}), body: value } };
        this.internals.setFormValue(JSON.stringify(this.confirmationEmail), this.name);
        this.valueChanged.emit({ value: JSON.stringify(this.confirmationEmail), name: this.name });
    }
    render() {
        const organizerName = this.participantsState.find(p => p.is_organizer)?.name;
        return (h(Host, { key: '45c17e9e7aee29bb1c2f434c547bacc8eb119347' }, h("div", { key: '47ea049446b8367af0b37d53a800df7f8f52e1f9', class: "nylas-confirmation-email", part: "nce" }, h("div", { key: '3d8af814db748d28f89fb2e4e6bf4cecb07484cc', class: "header", part: "nce__header" }, h("div", { key: '76c89e5f36c21588a3b081c0515eecda50a6779d' }, h("h3", { key: '241c08c263ac3ebfd50edf55f4bfcf9c7a7e7792' }, this.confirmationEmail?.booking_confirmed?.title ?? `Booking confirmed with ${organizerName ? ` ${organizerName}` : ''}`), h("p", { key: '999546d36a35d90b1dc4ccee069dbdf0bf58e433' }, "Booking confirmation email")), this.isConfirmationEmailOpen ? (h("div", { class: "confirmation-email-toggle", part: "nce__confirmation-email-toggle--container" }, h("span", { class: `chevron ${this.isConfirmationEmailOpen ? 'open' : 'closed'} `, onClick: () => this.toggleConfirmationEmail() }, h("chevron-icon", { width: "24", height: "24" })))) : (h("button-component", { variant: 'basic', clickHandler: event => {
                event.preventDefault();
                this.toggleConfirmationEmail();
            } }, h("edit-icon", { width: "16", height: "16" }), "Edit"))), this.isConfirmationEmailOpen ? (h("div", { class: "nylas-confirmation-email__body", part: "nce__body" }, h("div", { class: "nylas-confirmation-email__section" }, h("div", { class: "nylas-confirmation-email__row" }, h("label", null, "Send confirmation email", h("span", { class: "label-icon" }, h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, "You and your guests will receive a confirmation email immediately upon booking.")))), h("span", { class: "selected-value" }, "Immediately upon booking")), h("div", { class: "nylas-confirmation-email__row" }, h("div", { class: "subsection" }, h("div", { class: "input-container" }, h("label", null, "Company logo URL", h("span", { class: "label-icon" }, h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, "This logo appears in the booking confirmation email. The URL must be publicly accessible. The image will be scaled down to a max size of 200px x 100px.")))), this.confirmationEmail && (h("input-image-url", { name: "confirmation-email-logo", exportparts: "iiu__logo-input-textfield: nce__input-image-url", imageUrl: this.confirmationEmail?.logo ?? '' }))))), h("div", { class: "nylas-confirmation-email__row full-width-col" }, h("div", { class: "subsection" }, h("h3", null, "Email message"), h("div", { class: "input-container" }, h("label", { htmlFor: "title" }, "Custom email title", h("span", { class: "label-icon" }, h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, "An email title is a headline within the body of the email. This doesn't change the subject line.")))), h("input-component", { name: "confirmation-email-title", maxLength: 60, placeholder: `Booking confirmed ${organizerName ? `with ${organizerName}` : ''}`, defaultValue: this.confirmationEmail?.booking_confirmed?.title ?? '' })), h("div", { class: "input-container" }, h("textarea-component", { label: "Additional info", name: "confirmation-email-body", id: "confirmation-email-body", placeholder: "Default body", tooltip: "Scheduler adds the content of the box to the email body.", maxLength: 500, defaultValue: this.confirmationEmail?.booking_confirmed?.body ?? '' }))))))) : (h("div", { class: "nylas-confirmation-email__summary", part: "nce__summary" }, h("p", null, h("span", { class: "summary-icon" }, h("person-clipboard-icon", null)), "All host & guests"), h("p", null, h("span", { class: "summary-icon" }, h("clock-icon", null)), "Immediately on booking"))))));
    }
    static get is() { return "nylas-confirmation-email"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-confirmation-email.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-confirmation-email.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "confirmationEmailTemplate": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "EmailTemplate",
                    "resolved": "EmailTemplate",
                    "references": {
                        "EmailTemplate": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::EmailTemplate"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The confirmation email template data to display"
                },
                "defaultValue": "{} as EmailTemplate"
            },
            "isOpen": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Is the confirmation email card open"
                },
                "attribute": "is-open",
                "reflect": false,
                "defaultValue": "false"
            },
            "participants": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Participant[]",
                    "resolved": "Participant[]",
                    "references": {
                        "Participant": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Participant"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "List of participants"
                },
                "defaultValue": "[]"
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the component"
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'confirmation-email-template'"
            }
        };
    }
    static get states() {
        return {
            "confirmationEmail": {},
            "isConfirmationEmailOpen": {},
            "participantsState": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the email reminders change."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormInputChanged",
                "method": "nylasFormInputChangeHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "valueChanged",
                "method": "valueChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-confirmation-email',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasConfirmationEmail.prototype, "render", null);
//# sourceMappingURL=nylas-confirmation-email.js.map
