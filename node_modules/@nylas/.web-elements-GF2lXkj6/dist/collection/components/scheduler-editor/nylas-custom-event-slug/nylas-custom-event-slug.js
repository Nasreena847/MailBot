var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasCustomEventSlug {
    constructor() {
        this.selectedConfiguration = undefined;
        this.defaultUrlSlug = undefined;
        this.isOpen = true;
        this.slugErrorMessage = '';
        this.name = 'custom-event-slug';
        this.requiresSlug = false;
        this.urlSlug = undefined;
        this.focus = false;
        this.copied = false;
    }
    connectedCallback() {
        debug('nylas-custom-event-slug', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-custom-event-slug', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-custom-event-slug', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-custom-event-slug', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.urlSlug = this.defaultUrlSlug || '';
        }
    }
    componentWillUpdate() {
        debug('nylas-custom-event-slug', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-custom-event-slug', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-custom-event-slug', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-custom-event-slug', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-custom-event-slug', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);
        this.urlSlug = newValue?.slug || this.defaultUrlSlug || '';
    }
    async nylasFormInputChangeHandler(event) {
        const { name, value } = event.detail;
        this.internals.setValidity({});
        if (name === 'event-slug') {
            this.urlSlug = value;
            this.internals.setFormValue(JSON.stringify(value), this.name);
            this.valueChanged.emit({ value: JSON.stringify(value), name: this.name });
        }
    }
    async nylasFormInputFocusHandler() {
        this.focus = true;
    }
    async nylasFormInputBlurHandler() {
        this.slugErrorMessage = '';
        this.internals.setValidity({});
        this.focus = false;
        if (this.requiresSlug && this.urlSlug === '') {
            this.internals.setValidity({ customError: true }, 'Slug is required');
            this.slugErrorMessage = 'Slug cannot be blank';
            return;
        }
        if (!/^[A-Za-z0-9-]*$/.test(this.urlSlug)) {
            this.internals.setValidity({ customError: true }, 'Invalid slug: Only letters, numbers, and hyphens are allowed.');
            this.slugErrorMessage = 'Invalid slug: Only letters, numbers, and hyphens are allowed.';
        }
    }
    formSubmittedHandler(event) {
        debug('nylas-event-title', 'formSubmittedHandler', event);
        this.nylasFormInputBlurHandler();
    }
    toggleDrawer() {
        this.isOpen = !this.isOpen;
    }
    async copyToClipboard() {
        try {
            await navigator.clipboard.writeText(`${this.urlSlug}`);
            this.copied = true;
            setTimeout(() => {
                this.copied = false;
            }, 1000);
        }
        catch (err) {
            console.error('Failed to copy: ', err);
        }
    }
    render() {
        if (!this.requiresSlug)
            return null;
        const isComponentReady = typeof this.urlSlug !== 'undefined';
        return (h(Host, null, h("div", { class: "nylas-custom-event-slug", part: "nces" }, h("div", { class: "header", part: "nces__header" }, h("div", null, h("h3", null, "Custom event slug"), h("p", null, "Create a custom URL slug for this event")), h("div", { class: "drawer-toggle", part: "nces__drawer-toggle--container" }, h("span", { class: `chevron ${this.isOpen ? 'open' : 'closed'} `, onClick: () => this.toggleDrawer() }, h("chevron-icon", { width: "24", height: "24" })))), this.isOpen && (h("div", { class: "nylas-custom-event-slug__body", part: "nces__body" }, h("div", { class: "nylas-custom-event-slug__section" }, h("div", { class: "nylas-custom-event-slug__row" }, h("div", { class: "input-container" }, h("label", null, "Event URL slug", h("span", { class: "label-icon" }, h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, "Provide a custom slug for your URL to help uniquely identify your event (letters, numbers, and hyphens only)")))), h("div", { class: { 'nylas-custom-event-slug__input-wrapper': true, 'focus': this.focus, 'error': !!this.slugErrorMessage } }, h("div", { slot: "prefix", class: "prefix" }, "/"), isComponentReady && (h("input-component", { name: "event-slug", id: "event-slug", type: "text", required: false, placeholder: "my-link-name", exportparts: "ic_input: nces__input-textfield", defaultValue: this.urlSlug })), h("div", { slot: "icon", class: { icon: true, disabled: !this.urlSlug }, onClick: () => !this.copied && !!this.urlSlug && this.copyToClipboard() }, this.copied ? (h("div", { class: "copied" }, h("checkmark-icon", { width: "12", height: "18" }), " Copied!")) : (h("copy-icon", { width: "12", height: "18" })))), this.slugErrorMessage && h("span", { class: "error-message" }, this.slugErrorMessage)))))))));
    }
    static get is() { return "nylas-custom-event-slug"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-custom-event-slug.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-custom-event-slug.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "defaultUrlSlug": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The default custom event slug"
                },
                "attribute": "default-url-slug",
                "reflect": false
            },
            "isOpen": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Is the custom event slug card expanded"
                },
                "attribute": "is-open",
                "reflect": false,
                "defaultValue": "true"
            },
            "slugErrorMessage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Slug error message"
                },
                "attribute": "slug-error-message",
                "reflect": false,
                "defaultValue": "''"
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the component"
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'custom-event-slug'"
            },
            "requiresSlug": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indicates if a slug is required for the configuration.\nWhen set to true, the user must enter a slug when creating or editing a configuration.\nThe slug is used for hosted pages that are public."
                },
                "attribute": "requires-slug",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "urlSlug": {},
            "focus": {},
            "copied": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the slug value changes"
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormInputChanged",
                "method": "nylasFormInputChangeHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormInputFocused",
                "method": "nylasFormInputFocusHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormInputBlurred",
                "method": "nylasFormInputBlurHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "formSubmitted",
                "method": "formSubmittedHandler",
                "target": "window",
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-custom-event-slug',
        stateToProps: new Map([
            ['schedulerConfig.requiresSlug', 'requiresSlug'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasCustomEventSlug.prototype, "render", null);
//# sourceMappingURL=nylas-custom-event-slug.js.map
