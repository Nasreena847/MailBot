{"version":3,"file":"nylas-custom-event-slug.js","sourceRoot":"","sources":["../../../../src/components/scheduler-editor/nylas-custom-event-slug/nylas-custom-event-slug.tsx"],"names":[],"mappings":"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","sourcesContent":["import { RegisterComponent } from '@/common/register-component';\nimport { NylasSchedulerConfigConnector } from '@/connector/nylas-scheduler-config-connector';\nimport { debug } from '@/utils/utils';\nimport { AttachInternals, Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasSchedulerEditor } from '../nylas-scheduler-editor/nylas-scheduler-editor';\nimport { Configuration } from '@nylas/core';\n\n/**\n * The `nylas-custom-event-slug` component is a UI component that allows users to add a custom URL slug for their event link.\n *\n * @part nces - The nylas-custom-event-slug container\n * @part nces__body - The body of the event communication section\n * @part nces__header - The header of the event communication section\n * @part nces__drawer-toggle--container - The card's drawer toggle container\n * @part nces__input-textfield - The custom slug input textfield\n */\n@Component({\n  tag: 'nylas-custom-event-slug',\n  styleUrl: 'nylas-custom-event-slug.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class NylasCustomEventSlug {\n  @Element() host!: HTMLNylasCustomEventSlugElement;\n  /**\n   * The selected config\n   */\n  @Prop() selectedConfiguration?: Configuration;\n  /**\n   * The default custom event slug\n   */\n  @Prop() defaultUrlSlug?: string;\n  /**\n   * Is the custom event slug card expanded\n   */\n  @Prop() isOpen: boolean = true;\n  /**\n   * Slug error message\n   */\n  @Prop() slugErrorMessage: string = '';\n  /**\n   * The name of the component\n   */\n  @Prop() name: string = 'custom-event-slug';\n  /**\n   * Indicates if a slug is required for the configuration.\n   * When set to true, the user must enter a slug when creating or editing a configuration.\n   * The slug is used for hosted pages that are public.\n   */\n  @Prop() requiresSlug: boolean = false;\n  /**\n   * The element internals.\n   */\n  @AttachInternals() internals!: ElementInternals;\n\n  /**\n   * The URL slug state\n   */\n  @State() urlSlug!: string;\n\n  /**\n   * The focus state of the input container.\n   */\n  @State() focus = false;\n\n  /**\n   * The copied state for the copy to clipboard button\n   */\n  @State() copied = false;\n\n  /**\n   * This event is fired when the slug value changes\n   */\n  @Event() valueChanged!: EventEmitter<{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }>;\n\n  // Lifecycle methods\n  connectedCallback() {\n    debug('nylas-custom-event-slug', 'connectedCallback');\n  }\n\n  disconnectedCallback() {\n    debug('nylas-custom-event-slug', 'disconnectedCallback');\n  }\n\n  componentWillLoad() {\n    debug('nylas-custom-event-slug', 'componentWillLoad');\n    // See comment in the @Watch('name') decorator for more information.\n    this.host.setAttribute('name', this.name);\n  }\n\n  componentDidLoad() {\n    debug('nylas-custom-event-slug', 'componentDidLoad');\n    if (this.selectedConfiguration) {\n      this.selectedConfigurationChangedHandler(this.selectedConfiguration);\n    } else {\n      this.urlSlug = this.defaultUrlSlug || '';\n    }\n  }\n\n  componentWillUpdate() {\n    debug('nylas-custom-event-slug', 'componentWillUpdate');\n  }\n\n  componentDidUpdate() {\n    debug('nylas-custom-event-slug', 'componentDidUpdate');\n  }\n\n  componentWillRender() {\n    debug('nylas-custom-event-slug', 'componentWillRender');\n  }\n\n  componentDidRender() {\n    debug('nylas-custom-event-slug', 'componentDidRender');\n  }\n\n  /**\n   * When a name prop is passed, stencil does not automatically set the name attribute on the host element.\n   * Since this component is form-associated, the name attribute is required for form submission.\n   * This is a workaround to ensure that the name attribute is set on the host element.\n   */\n  @Watch('name')\n  elementNameChangedHandler(newValue: string) {\n    debug('nylas-custom-event-slug', 'elementNameChangedHandler', newValue);\n    this.host.setAttribute('name', newValue);\n  }\n\n  @Watch('selectedConfiguration')\n  selectedConfigurationChangedHandler(newValue: Configuration) {\n    debug('nylas-custom-booking-flow', 'selectedConfigurationChangedHandler', newValue);\n    this.urlSlug = newValue?.slug || this.defaultUrlSlug || '';\n  }\n\n  @Listen('nylasFormInputChanged')\n  async nylasFormInputChangeHandler(event: CustomEvent<{ value: string; name: string }>) {\n    const { name, value } = event.detail;\n    this.internals.setValidity({});\n\n    if (name === 'event-slug') {\n      this.urlSlug = value;\n      this.internals.setFormValue(JSON.stringify(value), this.name);\n      this.valueChanged.emit({ value: JSON.stringify(value), name: this.name });\n    }\n  }\n\n  @Listen('nylasFormInputFocused')\n  async nylasFormInputFocusHandler() {\n    this.focus = true;\n  }\n\n  @Listen('nylasFormInputBlurred')\n  async nylasFormInputBlurHandler() {\n    this.slugErrorMessage = '';\n    this.internals.setValidity({});\n    this.focus = false;\n    if (this.requiresSlug && this.urlSlug === '') {\n      this.internals.setValidity({ customError: true }, 'Slug is required');\n      this.slugErrorMessage = 'Slug cannot be blank';\n      return;\n    }\n    if (!/^[A-Za-z0-9-]*$/.test(this.urlSlug)) {\n      this.internals.setValidity({ customError: true }, 'Invalid slug: Only letters, numbers, and hyphens are allowed.');\n      this.slugErrorMessage = 'Invalid slug: Only letters, numbers, and hyphens are allowed.';\n    }\n  }\n\n  @Listen('formSubmitted', { target: 'window' })\n  formSubmittedHandler(event: CustomEvent) {\n    debug('nylas-event-title', 'formSubmittedHandler', event);\n    this.nylasFormInputBlurHandler();\n  }\n\n  toggleDrawer() {\n    this.isOpen = !this.isOpen;\n  }\n\n  async copyToClipboard() {\n    try {\n      await navigator.clipboard.writeText(`${this.urlSlug}`);\n\n      this.copied = true;\n      setTimeout(() => {\n        this.copied = false;\n      }, 1000);\n    } catch (err) {\n      console.error('Failed to copy: ', err);\n    }\n  }\n\n  @RegisterComponent<NylasCustomEventSlug, NylasSchedulerConfigConnector, Exclude<NylasSchedulerEditor['stores'], undefined>>({\n    name: 'nylas-custom-event-slug',\n    stateToProps: new Map([\n      ['schedulerConfig.requiresSlug', 'requiresSlug'],\n      ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],\n    ]),\n    eventToProps: {\n      valueChanged: async (\n        event: CustomEvent<{ value: string; name: string; valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void }>,\n        _nylasSchedulerConfigConnector: NylasSchedulerConfigConnector,\n      ) => {\n        const { valueChanged } = event.detail;\n        // If a handler is passed, call it.\n        if (valueChanged) {\n          valueChanged(event);\n        }\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    if (!this.requiresSlug) return null;\n    const isComponentReady = typeof this.urlSlug !== 'undefined';\n    return (\n      <Host>\n        <div class=\"nylas-custom-event-slug\" part=\"nces\">\n          <div class=\"header\" part=\"nces__header\">\n            <div>\n              <h3>Custom event slug</h3>\n              <p>Create a custom URL slug for this event</p>\n            </div>\n            <div class=\"drawer-toggle\" part=\"nces__drawer-toggle--container\">\n              <span class={`chevron ${this.isOpen ? 'open' : 'closed'} `} onClick={() => this.toggleDrawer()}>\n                <chevron-icon width=\"24\" height=\"24\" />\n              </span>\n            </div>\n          </div>\n\n          {this.isOpen && (\n            <div class=\"nylas-custom-event-slug__body\" part=\"nces__body\">\n              <div class=\"nylas-custom-event-slug__section\">\n                <div class=\"nylas-custom-event-slug__row\">\n                  <div class=\"input-container\">\n                    <label>\n                      Event URL slug\n                      <span class=\"label-icon\">\n                        <tooltip-component>\n                          <info-icon slot=\"tooltip-icon\" />\n                          <span slot=\"tooltip-content\">Provide a custom slug for your URL to help uniquely identify your event (letters, numbers, and hyphens only)</span>\n                        </tooltip-component>\n                      </span>\n                    </label>\n\n                    <div class={{ 'nylas-custom-event-slug__input-wrapper': true, 'focus': this.focus, 'error': !!this.slugErrorMessage }}>\n                      <div slot=\"prefix\" class=\"prefix\">\n                        &#47;\n                      </div>\n                      {isComponentReady && (\n                        <input-component\n                          name=\"event-slug\"\n                          id=\"event-slug\"\n                          type=\"text\"\n                          required={false}\n                          placeholder=\"my-link-name\"\n                          exportparts=\"ic_input: nces__input-textfield\"\n                          defaultValue={this.urlSlug}\n                        />\n                      )}\n                      <div slot=\"icon\" class={{ icon: true, disabled: !this.urlSlug }} onClick={() => !this.copied && !!this.urlSlug && this.copyToClipboard()}>\n                        {this.copied ? (\n                          <div class=\"copied\">\n                            <checkmark-icon width=\"12\" height=\"18\" /> Copied!\n                          </div>\n                        ) : (\n                          <copy-icon width=\"12\" height=\"18\" />\n                        )}\n                      </div>\n                    </div>\n                    {this.slugErrorMessage && <span class=\"error-message\">{this.slugErrorMessage}</span>}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}