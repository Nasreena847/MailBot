var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
const defaultRoundToMinutes = 15;
export class NylasTimeslotInterval {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'timeslot-picker';
        this.eventDurationMinutes = this.selectedConfiguration?.availability?.duration_minutes;
        this.defaultIntervalMinutes = this.selectedConfiguration?.availability?.interval_minutes ?? this.eventDurationMinutes ?? 10;
        this.defaultRoundTo = this.selectedConfiguration?.availability?.round_to ?? undefined;
        this.internalEventDurationMinutes = undefined;
        this.selectedInterval = undefined;
        this.selectedRoundTo = undefined;
        this.componentLoaded = false;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-timeslot-interval', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-timeslot-interval', 'selectedConfigurationChangedHandler', newValue);
        this.internalEventDurationMinutes = newValue?.availability?.duration_minutes ?? this.eventDurationMinutes ?? 30;
        const internalIntervalMinutes = newValue.availability?.interval_minutes ?? this.internalEventDurationMinutes ?? 30;
        this.selectedInterval = newValue.availability?.interval_minutes ?? internalIntervalMinutes ?? 10;
        const roundToMinutes = newValue.availability?.round_to || null;
        this.selectedRoundTo = roundToMinutes && roundToMinutes === internalIntervalMinutes ? true : false;
    }
    connectedCallback() {
        debug('nylas-timeslot-interval', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-timeslot-interval', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-timeslot-interval', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-timeslot-interval', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.internalEventDurationMinutes = this.eventDurationMinutes ?? 30;
            const internalIntervalMinutes = this.internalEventDurationMinutes;
            this.selectedInterval = internalIntervalMinutes ?? 10;
            this.selectedRoundTo = false;
        }
        this.componentLoaded = true;
    }
    componentWillUpdate() {
        debug('nylas-timeslot-interval', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-timeslot-interval', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-timeslot-interval', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-timeslot-interval', 'componentDidRender');
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-timeslot-interval', 'nylasFormDropdownChangedHandler', event.detail);
        const value = event.detail.value;
        if (value === 'duration') {
            this.selectedInterval = this.internalEventDurationMinutes ?? 10;
        }
        else {
            this.selectedInterval = parseInt(event.detail.value);
        }
        this.valueChanged.emit({
            value: JSON.stringify({
                interval: this.selectedInterval,
                roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes,
            }),
            name: this.name,
        });
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(JSON.stringify({ interval: this.selectedInterval, roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes }), this.name);
        }
    }
    nylasFormRadioChangedHandler(event) {
        debug('nylas-timeslot-interval', 'nylasFormRadioChangedHandler', event.detail);
        const value = event.detail.value;
        if (value === 'no-rounding') {
            this.selectedRoundTo = false;
        }
        else {
            this.selectedRoundTo = true;
        }
        this.valueChanged.emit({
            value: JSON.stringify({
                interval: this.selectedInterval,
                roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes,
            }),
            name: this.name,
        });
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(JSON.stringify({ interval: this.selectedInterval, roundTo: this.selectedRoundTo ? this.selectedInterval : defaultRoundToMinutes }), this.name);
        }
    }
    render() {
        const intervalPreferenceOptions = [
            { value: 'duration', label: 'Length of the booking' },
            { value: '5', label: '5 mins' },
            { value: '10', label: '10 mins' },
            { value: '15', label: '15 mins' },
            { value: '20', label: '20 mins' },
            { value: '30', label: '30 mins' },
            { value: '45', label: '45 mins' },
            { value: '60', label: '60 mins' },
        ];
        const defaultSelectedInterval = typeof this.selectedInterval !== 'undefined'
            ? this.selectedInterval == this.internalEventDurationMinutes
                ? intervalPreferenceOptions[0]
                : intervalPreferenceOptions.find(op => op.value == this.selectedInterval.toString()) ?? intervalPreferenceOptions[0]
            : undefined;
        return (h(Host, { key: 'be6ccb3f786d6b6a418278457b3174d7bf9fdd40' }, h("div", { key: 'a22c0a54beb5d0632998d9a0c4db930f7c52b702', class: "nylas-timeslot-interval", part: "nti" }, h("div", { key: 'e7d59da8e8e00ec8893f07f2773aecfac41e6efd', class: "header", part: "nti__header" }, h("h3", { key: 'ed326020e7c49c629cc2c7314f5d12d0ac338099' }, "Time slot settings")), h("div", { key: 'af05950d9880f13e595e37e1cf7d3283b2c3f436', class: "nylas-timeslot-interval__dropdown" }, h("span", { key: '336bad5fd3528c8eb477b7c27174d1eb68172dad', class: "label", part: "nti__input-label" }, "Time slot interval."), defaultSelectedInterval?.label && (h("select-dropdown", { name: "interval-minutes", options: intervalPreferenceOptions, withSearch: false, exportparts: "sd_dropdown: nti__dropdown, sd_dropdown-button: nti__dropdown-button, sd_dropdown-content: nti__dropdown-content", defaultSelectedOption: defaultSelectedInterval })), h("span", { key: 'f3c33c36208e507b20a879f336935ecfec6e14b4', slot: "label", class: "label", part: "nti__input-label" }, "Time slot rounding type", h("tooltip-component", { key: '3529b27311a34e8f7572a89553ece5c11e0886f9' }, h("info-icon", { key: '8edb0f5f796d66c691fbe544963e21cc09ebbc24', slot: "tooltip-icon" }), h("span", { key: '07ba35447a1f9585bdfe707ab7b49f17ab51e8de', slot: "tooltip-content" }, "Select if you want to round the time slots to the nearest interval."))), this.componentLoaded && (h("radio-button-group", { name: "interval-preference", defaultSelectedValue: this.selectedRoundTo ? 'rounding' : 'no-rounding', options: [
                { value: 'no-rounding', label: 'Default', description: 'Time slots will be rounded to the nearest quarter-hour.' },
                {
                    value: 'rounding',
                    label: 'Interval rounding',
                    description: 'Time slots will begin at times rounded to the interval value.',
                },
            ] }))))));
    }
    static get is() { return "nylas-timeslot-interval"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-timeslot-interval.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-timeslot-interval.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the calendar picker."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'timeslot-picker'"
            },
            "eventDurationMinutes": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The event duration in minutes."
                },
                "attribute": "event-duration-minutes",
                "reflect": false,
                "defaultValue": "this.selectedConfiguration?.availability?.duration_minutes"
            },
            "defaultIntervalMinutes": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "deprecated",
                            "text": "The default interval minutes."
                        }],
                    "text": ""
                },
                "attribute": "default-interval-minutes",
                "reflect": false,
                "defaultValue": "this.selectedConfiguration?.availability?.interval_minutes ?? this.eventDurationMinutes ?? 10"
            },
            "defaultRoundTo": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "deprecated",
                            "text": "The round to option in minutes as set in the configuration."
                        }],
                    "text": ""
                },
                "attribute": "default-round-to",
                "reflect": false,
                "defaultValue": "this.selectedConfiguration?.availability?.round_to ?? undefined"
            }
        };
    }
    static get states() {
        return {
            "internalEventDurationMinutes": {},
            "selectedInterval": {},
            "selectedRoundTo": {},
            "componentLoaded": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the selected booking calendar changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormRadioChanged",
                "method": "nylasFormRadioChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-timeslot-interval',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasTimeslotInterval.prototype, "render", null);
//# sourceMappingURL=nylas-timeslot-interval.js.map
