var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
export class NylasEventDuration {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'duration';
        this.eventDurationMinutes = undefined;
        this.duration = this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? this.eventDurationMinutes / 60 : this.eventDurationMinutes) : 30;
        this.durationMinutes = undefined;
        this.durationIncrement = undefined;
        this.durationMinutesOptions = [
            { value: 15, label: '15' },
            { value: 30, label: '30' },
            { value: 45, label: '45' },
            { value: 60, label: '60' },
        ];
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-event-duration', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const configDuration = newVal?.availability?.duration_minutes;
        if (configDuration) {
            this.duration = configDuration >= 60 ? configDuration / 60 : configDuration;
            this.durationMinutes = configDuration ? configDuration : 30;
            this.durationIncrement = configDuration >= 60 ? 60 : 1;
        }
    }
    durationMinutesChangedHandler(newValue, oldValue) {
        debug('nylas-event-duration', 'durationMinutesChangedHandler', newValue);
        if (newValue === oldValue) {
            return;
        }
        this.valueChanged.emit({ value: newValue.toString(), name: this.name });
    }
    connectedCallback() {
        debug('nylas-event-duration', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-event-duration', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.setDurationMintueOptions();
    }
    componentDidLoad() {
        debug('nylas-event-duration', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        this.duration = this.duration ? this.duration : this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? this.eventDurationMinutes / 60 : this.eventDurationMinutes) : 30;
        this.durationMinutes = this.durationMinutes ? this.durationMinutes : this.duration ? this.duration : 30;
        this.durationIncrement = this.durationIncrement ? this.durationIncrement : this.duration >= 60 ? 60 : 1;
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    disconnectedCallback() {
        debug('nylas-event-duration', 'disconnectedCallback');
    }
    setDurationMintueOptions() {
        if (this.durationIncrement === 1) {
            this.durationMinutesOptions = [
                { value: 15, label: '15' },
                { value: 30, label: '30' },
                { value: 45, label: '45' },
                { value: 60, label: '60' },
            ];
        }
        else {
            this.durationMinutesOptions = Array.from({ length: 23 }, (_, i) => ({ value: i + 1, label: (i + 1).toString() }));
        }
        return this.durationMinutesOptions;
    }
    handleChange(event) {
        this.duration = event.target.value;
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), this.name);
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        const { value } = event.detail;
        this.durationIncrement = parseInt(value);
        if (this.durationIncrement === 1) {
            this.duration = 60;
        }
        else {
            this.duration = 1;
        }
        this.setDurationMintueOptions();
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    inputOptionChangedHandler(event) {
        debug('nylas-calendar-picker', 'inputOptionChangedHandler', event.detail);
        const { value } = event.detail;
        this.duration = value;
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), this.name);
    }
    render() {
        const durationOptions = [
            { value: 1, label: 'minute' },
            { value: 60, label: 'hour' },
        ];
        return (h(Host, { key: '3aeec3a1b528f5e1d6c0470122a31fd5e7470fa9' }, h("div", { key: '1c1efed9fdecbde574461154cc3b60f29bafe657', class: "nylas-event-duration", part: "ned" }, h("label", { key: 'cd8cb2b52038a897b03021e90b4ec335b2390db5', htmlFor: "duration" }, "Event duration", h("span", { key: '8a09d363737a793078e2c7a7f7764b28851569c9', class: "required" }, "*")), h("div", { key: '970ef2ffc2a7d718346e6654c99cc24b34e44ec9', class: "nylas-event-duration__wrapper" }, h("input-dropdown", { key: 'bb614ca89f742a55e86d1cdf6a8a779f0631bb7f', name: 'event-duration', options: this.durationMinutesOptions, inputValue: this.duration.toString(), exportparts: "id_dropdown: ned__input_dropdown, id_dropdown-input: ned__input_dropdown-input, id_dropdown-content: ned__input_dropdown-content", defaultInputOption: this.durationMinutesOptions.find(i => i.value == this.duration) }), this.durationIncrement && (h("select-dropdown", { name: 'event-duration', options: durationOptions, pluralizedLabel: this.duration > 1 ? 's' : '', exportparts: "sd_dropdown: ned__dropdown, sd_dropdown-button: ned__dropdown-button, sd_dropdown-content: ned__dropdown-content", defaultSelectedOption: durationOptions.find(i => i.value == this.durationIncrement), withSearch: false }))))));
    }
    static get is() { return "nylas-event-duration"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-event-duration.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-event-duration.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the event duration. Default is 'duration'."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'duration'"
            },
            "eventDurationMinutes": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number | undefined",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The event duration in minutes as set in the configuration."
                },
                "attribute": "event-duration-minutes",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "duration": {},
            "durationMinutes": {},
            "durationIncrement": {},
            "durationMinutesOptions": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the event duration changes."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n  }",
                    "resolved": "{ value: string; name: string; }",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }, {
                "propName": "durationMinutes",
                "methodName": "durationMinutesChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "inputOptionChanged",
                "method": "inputOptionChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-event-duration',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventDuration.prototype, "render", null);
//# sourceMappingURL=nylas-event-duration.js.map
