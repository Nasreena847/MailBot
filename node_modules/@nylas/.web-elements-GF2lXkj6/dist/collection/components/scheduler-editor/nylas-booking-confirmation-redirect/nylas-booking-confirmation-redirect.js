var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
import { RegisterComponent } from "../../../common/register-component";
import { debug } from "../../../utils/utils";
import { Host, h } from "@stencil/core";
import { isValidUrl } from "../../../utils/utils";
export class NylasBookingConfirmationRedirect {
    constructor() {
        this.selectedConfiguration = undefined;
        this.name = 'confirmation-redirect';
        this.redirectUrl = '';
        this.redirectUrlErrorMessage = '';
        this.currentRedirectUrl = '';
        this.acceptUrl = undefined;
        this.componentLoaded = false;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-booking-confirmation-redirect', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-booking-confirmation-redirect', 'selectedConfigurationChangedHandler', newValue);
        if (newValue?.scheduler?.confirmation_redirect_url) {
            this.currentRedirectUrl = newValue?.scheduler?.confirmation_redirect_url;
            this.acceptUrl = newValue?.scheduler?.confirmation_redirect_url !== '';
        }
    }
    connectedCallback() {
        debug('nylas-booking-confirmation-redirect', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-booking-confirmation-redirect', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-booking-confirmation-redirect', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-booking-confirmation-redirect', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.currentRedirectUrl = this.redirectUrl;
            this.acceptUrl = this.redirectUrl !== '';
        }
        this.componentLoaded = true;
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(this.currentRedirectUrl.toString(), this.name);
        }
    }
    componentWillUpdate() {
        debug('nylas-booking-confirmation-redirect', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-booking-confirmation-redirect', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-booking-confirmation-redirect', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-booking-confirmation-redirect', 'componentDidRender');
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-booking-confirmation-redirect', 'nylasFormDropdownChangedHandler', event.detail);
        const { name, value } = event.detail;
        if (name === 'confirmation-redirect-dropdown') {
            if (value === 'custom') {
                this.acceptUrl = true;
            }
            else {
                this.acceptUrl = false;
                this.internals.setFormValue('', this.name);
                this.valueChanged.emit({ name: this.name, value: '' });
            }
        }
    }
    nylasFormInputBlurHandler(event) {
        const { name, value } = event.detail;
        this.currentRedirectUrl = value;
        if (this.acceptUrl && name === 'confirmation-redirect') {
            this.redirectUrlErrorMessage = '';
            if (!isValidUrl(this.currentRedirectUrl)) {
                this.internals.setValidity({ customError: true }, 'Please enter a valid URL.');
                this.redirectUrlErrorMessage = 'Please enter a valid URL.';
                return;
            }
            this.internals.setValidity({});
            const valueChanged = (event) => {
                const { value } = event.detail;
                this.internals.setFormValue(value.toString(), this.name);
            };
            this.valueChanged.emit({ ...event.detail, valueChanged });
        }
    }
    formSubmittedHandler(_event) {
        if (this.acceptUrl && !isValidUrl(this.currentRedirectUrl)) {
            this.internals.setValidity({ customError: true }, 'Please enter a valid URL.');
            this.redirectUrlErrorMessage = 'Please enter a valid URL.';
        }
        else {
            this.internals.setValidity({});
        }
    }
    render() {
        const redirectOptions = [
            {
                label: 'Display default confirmation page',
                value: 'default',
            },
            {
                label: 'Redirect to custom URL',
                value: 'custom',
            },
        ];
        return (h(Host, { key: '664122ed45ac89e22d1638e1f89d152c6f3b2e64' }, h("div", { key: '86bad1489a91fc71ca708cf0832d7bf1ce5e4938', class: "nylas-booking-confirmation-redirect", part: "nbcr" }, redirectOptions.length > 0 && (h("div", { class: "nylas-booking-confirmation-redirect__dropdown" }, h("span", { class: "label" }, "When a booking is confirmed", h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, "You can either display the default confirmation page or redirect users to your own confirmation page."))), this.componentLoaded && (h("select-dropdown", { name: "confirmation-redirect-dropdown", options: redirectOptions, withSearch: false, defaultSelectedOption: redirectOptions.find(option => option.value === (this.acceptUrl ? 'custom' : 'default')), exportparts: "sd_dropdown: nbcr__dropdown, sd_dropdown-button: nbcr__dropdown-button, sd_dropdown-content: nbcr__dropdown-content" })), this.acceptUrl && (h("div", null, h("input-component", { name: "confirmation-redirect", id: "confirmation-redirect", type: "text", placeholder: "Enter custom redirect URL", required: false, part: "ic__input_wrapper: nbcr__input-textfield", defaultValue: this.currentRedirectUrl }), this.redirectUrlErrorMessage && h("span", { class: "error-message" }, this.redirectUrlErrorMessage))))))));
    }
    static get is() { return "nylas-booking-confirmation-redirect"; }
    static get encapsulation() { return "shadow"; }
    static get formAssociated() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["nylas-booking-confirmation-redirect.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["nylas-booking-confirmation-redirect.css"]
        };
    }
    static get properties() {
        return {
            "selectedConfiguration": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Configuration",
                    "resolved": "Configuration | undefined",
                    "references": {
                        "Configuration": {
                            "location": "import",
                            "path": "@nylas/core",
                            "id": "../nylas-js-core/dist/index.d.ts::Configuration"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The selected config"
                }
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the confirmation redirect link."
                },
                "attribute": "name",
                "reflect": false,
                "defaultValue": "'confirmation-redirect'"
            },
            "redirectUrl": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The custom redirect URL."
                },
                "attribute": "redirect-url",
                "reflect": false,
                "defaultValue": "''"
            },
            "redirectUrlErrorMessage": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The custom redirect URL error message"
                },
                "attribute": "redirect-url-error-message",
                "reflect": false,
                "defaultValue": "''"
            }
        };
    }
    static get states() {
        return {
            "currentRedirectUrl": {},
            "acceptUrl": {},
            "componentLoaded": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChanged",
                "name": "valueChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "This event is fired when the current redirect URL changes and is valid."
                },
                "complexType": {
                    "original": "{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }",
                    "resolved": "{ value: string; name: string; valueChanged?: ((event: CustomEvent<{ value: string; name: string; }>) => void) | undefined; }",
                    "references": {
                        "CustomEvent": {
                            "location": "global",
                            "id": "global::CustomEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "name",
                "methodName": "elementNameChangedHandler"
            }, {
                "propName": "selectedConfiguration",
                "methodName": "selectedConfigurationChangedHandler"
            }];
    }
    static get listeners() {
        return [{
                "name": "nylasFormDropdownChanged",
                "method": "nylasFormDropdownChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "nylasFormInputBlurred",
                "method": "nylasFormInputBlurHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "formSubmitted",
                "method": "formSubmittedHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
    static get attachInternalsMemberName() { return "internals"; }
}
__decorate([
    RegisterComponent({
        name: 'nylas-booking-confirmation-redirect',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingConfirmationRedirect.prototype, "render", null);
//# sourceMappingURL=nylas-booking-confirmation-redirect.js.map
