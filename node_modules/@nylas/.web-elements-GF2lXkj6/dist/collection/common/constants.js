import moment from "moment-timezone";
export var LANGUAGE_CODE;
(function (LANGUAGE_CODE) {
    LANGUAGE_CODE["en"] = "en";
    LANGUAGE_CODE["es"] = "es";
    LANGUAGE_CODE["fr"] = "fr";
    LANGUAGE_CODE["de"] = "de";
    LANGUAGE_CODE["sv"] = "sv";
    LANGUAGE_CODE["zh"] = "zh";
    LANGUAGE_CODE["ja"] = "ja";
    LANGUAGE_CODE["nl"] = "nl";
})(LANGUAGE_CODE || (LANGUAGE_CODE = {}));
export const LANGUAGE_MAP = {
    en: 'English',
    es: 'Español',
    fr: 'Français',
    de: 'Deutsche',
    sv: 'Svenska',
    zh: '中文',
    ja: '日本語',
    nl: 'Nederlands',
};
export const LANGUAGE_CODE_MAP = {
    en: 'en',
    es: 'es',
    fr: 'fr',
    de: 'de',
    sv: 'sv',
    zh: 'zh',
    ja: 'ja',
    nl: 'nl',
};
export const TIMEZONE_MAP = (() => {
    const timeZones = moment.tz.names();
    return timeZones.reduce((acc, timeZone) => {
        acc[timeZone] = timeZone.replace(/\//g, ' / ');
        acc[timeZone] = acc[timeZone].replace(/_/g, ' ');
        return acc;
    }, {});
})();
export function getTimezoneOffset(timezone) {
    return moment.tz(timezone).format('Z');
}
export const EVENT_TITLE_TOKENS = [
    {
        token: '$invitee',
        value: '${invitee}',
        description: 'The name of the primary invitee.',
    },
    {
        token: '$invitee_email',
        value: '${invitee_email}',
        description: 'The email of the primary invitee.',
    },
    {
        token: '$duration',
        value: '${duration}',
        description: 'The length in time of the event.',
    },
];
export const DEFAULT_OPEN_HOURS = [
    {
        days: [1, 2, 3, 4, 5],
        ex_dates: [],
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        start: '09:00',
        end: '17:00',
    },
];
export const PROVIDER_CONFERENCE_MAP = {
    google: 'Google Meet',
    zoom: 'Zoom Meeting',
    microsoft: 'Microsoft Teams',
};
export const CONFERENCE_PROVIDER_MAP = {
    'Google Meet': 'google',
    'Zoom Meeting': 'zoom',
    'Microsoft Teams': 'microsoft',
};
export const NON_PROVIDER_CONFERENCE_OPTIONS = ['zoom'];
export const DEFAULT_FORM_FIELD_TYPES = [
    {
        label: 'Email',
        value: 'email',
    },
    {
        label: 'Phone Number',
        value: 'phone_number',
    },
    {
        label: 'Dropdown',
        value: 'dropdown',
    },
    {
        label: 'Short text',
        value: 'text',
    },
    {
        label: 'Long text',
        value: 'multi_line_text',
    },
    {
        label: 'Checkbox',
        value: 'checkbox',
    },
    {
        label: 'Radio Button',
        value: 'radio_button',
    },
];
export const FIELD_TYPES = [
    {
        type: 'email',
        typeLabel: 'Email',
        label: 'Additional email',
        key: 'additional_email',
        isOpen: false,
        required: false,
    },
    {
        type: 'phone_number',
        typeLabel: 'Phone number',
        label: 'Phone Number',
        key: 'phone_number',
        isOpen: false,
        required: false,
    },
    {
        type: 'dropdown',
        typeLabel: 'Dropdown',
        label: 'Dropdown Label',
        key: 'dropdown',
        isOpen: false,
        required: false,
        options: ['', ''],
    },
    {
        type: 'text',
        typeLabel: 'Short text',
        label: 'Short Text Label',
        key: 'short_text',
        isOpen: false,
        required: false,
    },
    {
        type: 'multi_line_text',
        typeLabel: 'Long text',
        label: 'Long text Label',
        key: 'long_text',
        isOpen: false,
        required: false,
    },
    {
        type: 'checkbox',
        typeLabel: 'Checkbox',
        label: 'Checkbox Label',
        key: 'checkbox',
        isOpen: false,
        required: false,
    },
    {
        type: 'radio_button',
        typeLabel: 'Radio Button',
        label: 'Radio Button Label',
        key: 'radio_button',
        isOpen: false,
        required: false,
        options: ['', ''],
    },
];
export const PROVIDER_CONFERENCE_OPTIONS = Object.keys(PROVIDER_CONFERENCE_MAP).map(provider => provider);
export const REMINDER_MINUTE_OPTIONS = [
    { value: 1, label: '1' },
    ...Array.from({ length: 90 / 5 + 1 }, (_, i) => {
        const value = i * 5;
        return { value, label: value.toString() };
    }),
];
export const REMINDER_HOUR_OPTIONS = Array.from({ length: 23 }, (_, i) => ({ value: i + 1, label: (i + 1).toString() }));
export const REMINDER_DAY_OPTIONS = Array.from({ length: 7 }, (_, i) => ({ value: i + 1, label: (i + 1).toString() }));
//# sourceMappingURL=constants.js.map
