{"file":"nylas-reminder-emails.entry.js","mappings":"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","names":[],"sources":["src/components/scheduler-editor/nylas-reminder-emails/nylas-reminder-emails.scss?tag=nylas-reminder-emails&encapsulation=shadow","src/components/scheduler-editor/nylas-reminder-emails/nylas-reminder-emails.tsx"],"sourcesContent":["@import '../../../common/styles/variables.scss';\n\n:host {\n  display: block;\n  @include default-css-variables;\n  width: inherit;\n}\n\n.cards-container {\n  margin-bottom: 4rem;\n\n  .nylas-reminder-email {\n    width: inherit;\n    display: flex;\n    flex-direction: column;\n    margin: 1rem;\n    border-radius: var(--nylas-border-radius-2x);\n    border: 1px solid var(--nylas-base-200);\n    text-align: left;\n\n    .header {\n      padding: 1rem;\n      display: grid;\n      grid-template-columns: 1fr auto;\n      border-bottom: 1px solid var(--nylas-base-200);\n\n      h3 {\n        border-radius: var(--nylas-border-radius-2x);\n        margin: 0;\n        font-size: 1rem;\n        font-weight: 600;\n        line-height: 20px;\n        color: var(--nylas-base-900);\n        text-align: left;\n      }\n\n      p {\n        margin: 0.25rem 0 0 0;\n        font-size: 0.875rem;\n        font-weight: 400;\n        line-height: 20px;\n        color: var(--nylas-base-600);\n        text-align: left;\n      }\n\n      .confirmation-email-toggle {\n        display: flex;\n        gap: 24px;\n        align-items: center;\n\n        .chevron {\n          display: flex;\n          align-self: center;\n          cursor: pointer;\n\n          &:hover,\n          &:active {\n            color: var(--nylas-primary);\n          }\n\n          &.open {\n            transform: rotate(90deg);\n          }\n\n          &.closed {\n            transform: rotate(270deg);\n          }\n\n          &.disabled {\n            cursor: not-allowed;\n            color: var(--nylas-base-300);\n\n            &:hover {\n              color: var(--nylas-base-300);\n            }\n          }\n        }\n      }\n    }\n\n    .nylas-reminder-email__body {\n      display: grid;\n      grid-template-columns: 1fr auto;\n      background-color: var(--nylas-base-25);\n      border-radius: var(--nylas-border-radius-2x);\n\n      @media #{$mobile} {\n        grid-template-columns: 1fr;\n      }\n\n      .nylas-reminder-email__section {\n        padding: 1rem;\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n        color: var(--nylas-base-800);\n\n        @media #{$mobile} {\n          border: none;\n        }\n\n        .nylas-reminder-email__row {\n          display: grid;\n          grid-template-columns: 1fr auto;\n          align-items: center;\n          gap: 1rem;\n\n          &.full-width-col {\n            grid-template-columns: 1fr;\n          }\n\n          label {\n            display: flex;\n            align-items: center;\n\n            span.required {\n              color: var(--nylas-error, #cc4841);\n            }\n\n            span.label-icon {\n              margin-left: 4px;\n\n              tooltip-component {\n                display: flex;\n              }\n            }\n          }\n\n          p {\n            margin: 0.25rem 0 0 0;\n            font-size: 1rem;\n            font-weight: 500;\n            line-height: 24px;\n            color: var(--nylas-base-900);\n          }\n\n          .company-logo-container {\n            display: flex;\n            gap: 32px;\n            width: 100%;\n\n            .input-container {\n              display: flex;\n              flex-direction: column;\n              flex: 1;\n            }\n\n            .company-logo {\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              width: 200px;\n              height: 100px;\n              border: var(--nylas-base-200) solid 1px;\n              border-radius: var(--nylas-border-radius-2x);\n              overflow: hidden;\n              padding: 10px;\n            }\n\n            .company-logo img {\n              max-height: 100%;\n              max-width: 100%;\n              object-fit: contain;\n              object-position: center;\n            }\n          }\n\n          span.selected-value {\n            font-weight: 500;\n          }\n        }\n\n        .subsection {\n          display: flex;\n          flex-direction: column;\n          gap: 1rem;\n\n          h3 {\n            margin: 0;\n            font-size: 1rem;\n            font-weight: 600;\n            line-height: 20px;\n            color: var(--nylas-base-900);\n            text-align: left;\n          }\n\n          .input-container {\n            display: flex;\n            flex-direction: column;\n            gap: 0.25rem;\n\n            textarea {\n              padding: 12px 16px;\n              border-width: 1;\n              resize: vertical;\n              border-radius: 8px;\n              font-family: var(--nylas-font-family);\n              font-size: 16px;\n              line-height: 24px;\n              border: 1px solid var(--nylas-base-200);\n            }\n          }\n        }\n      }\n\n      .nylas-reminder-email__preview {\n        width: 208px;\n        background: var(--nylas-base-25);\n        border-bottom-right-radius: var(--nylas-border-radius-2x);\n\n        @media #{$mobile} {\n          width: inherit;\n          border-bottom-left-radius: var(--nylas-border-radius-2x);\n        }\n\n        h4 {\n          font-size: 14px;\n          line-height: 24px;\n          color: var(--nylas-base-600);\n          font-family: var(--nylas-font-family);\n          font-weight: 500;\n          text-align: center;\n          margin: 0.75rem 0;\n        }\n\n        .preview-container {\n          padding: 0 2rem 1rem;\n\n          .slot {\n            background-color: transparent;\n            border-top: 1px solid var(--nylas-base-300);\n\n            &.active {\n              background-color: var(--nylas-base-100);\n            }\n\n            &:last-of-type {\n              border-bottom: 1px solid var(--nylas-base-300);\n            }\n          }\n\n          .event-slot {\n            background-color: var(--nylas-base-600);\n            border-top: 1px solid var(--nylas-base-300);\n          }\n        }\n      }\n\n      span.error-message {\n        color: var(--nylas-error);\n      }\n\n      span.help-text {\n        margin: 0.25rem 0 0 0;\n        font-size: 0.875rem;\n        font-weight: 400;\n        line-height: 20px;\n        color: var(--nylas-base-600);\n        text-align: left;\n      }\n    }\n\n    .nylas-reminder-email__summary {\n      padding: 0.75rem 1rem;\n      display: grid;\n      grid-template-columns: auto 1fr;\n      column-gap: 1rem;\n\n      p {\n        margin: 0;\n        display: flex;\n        align-items: center;\n        column-gap: 4px;\n        font-size: 0.875rem;\n        font-weight: 400;\n        line-height: 21px;\n        color: var(--nylas-base-600);\n        text-align: left;\n\n        span.summary-icon {\n          display: flex;\n          justify-content: center;\n          min-width: 20px;\n        }\n      }\n    }\n  }\n}\n\nsp-divider {\n  background-color: var(--nylas-base-200);\n  height: 1px;\n  margin: 0.25rem 0;\n}\n\nbutton-component.create-reminder button {\n  margin: 1rem;\n  width: calc(100% - 2rem);\n}\n\nbutton-component.delete-btn button {\n  color: var(--nylas-error) !important;\n}","import { RegisterComponent } from '@/common/register-component';\nimport { NylasSchedulerConfigConnector } from '@/connector/nylas-scheduler-config-connector';\nimport { debug } from '@/utils/utils';\nimport { AttachInternals, Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasSchedulerEditor } from '../nylas-scheduler-editor/nylas-scheduler-editor';\nimport { EventReminder, Participant } from '@nylas/core';\n/**\n * The `nylas-reminder-emails` component is a UI component that allows users to set buffer time before and after an event.\n *\n * @part nre__tab-heading - The nylas-reminder-emails main tab heading\n * @part nre - The nylas-reminder-emails container\n * @part nre__header - The header of the event communication section\n * @part nre__body - The body of the event communication section\n * @part nre__summary - The reminder card summary container\n * @part nre__reminder-input_dropdown - The dropdown container for selecting reminder time\n * @part nre__reminder-input_dropdown-input - The dropdown for selecting reminder time value\n * @part nre__reminder-input_dropdown-content - The dropdown for selecting reminder time unit (e.g. min, hrs, days)\n */\n@Component({\n  tag: 'nylas-reminder-emails',\n  styleUrl: 'nylas-reminder-emails.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class NylasReminderEmails {\n  @Element() host!: HTMLNylasReminderEmailsElement;\n\n  /**\n   * The list of event reminders to display.\n   */\n  @Prop() eventReminders: EventReminder[] = [];\n  /**\n   * List of participants\n   */\n  @Prop() participants: Participant[] = [];\n  /**\n   * The name of the component\n   */\n  @Prop() name: string = 'reminder-overrides';\n  /**\n   * The element internals.\n   */\n  @AttachInternals() internals!: ElementInternals;\n\n  /**\n   * The event reminders state. Defaults to an empty array if no event reminders are present.\n   */\n  @State() reminders: EventReminder[] = this.eventReminders ?? [];\n  @State() reminderErrors: { [key: string]: string } = {};\n  @State() editingReminderIndex: number | null = null;\n\n  /**\n   * This event is fired when the email reminders change.\n   */\n  @Event() valueChanged!: EventEmitter<{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }>;\n\n  // Lifecycle methods\n  connectedCallback() {\n    debug('nylas-reminder-emails', 'connectedCallback');\n  }\n\n  disconnectedCallback() {\n    debug('nylas-reminder-emails', 'disconnectedCallback');\n  }\n\n  componentWillLoad() {\n    debug('nylas-reminder-emails', 'componentWillLoad');\n    // See comment in the @Watch('name') decorator for more information.\n    this.host.setAttribute('name', this.name);\n  }\n\n  componentDidLoad() {\n    debug('nylas-reminder-emails', 'componentDidLoad');\n    this.updateRemindersFormValue();\n  }\n\n  componentWillUpdate() {\n    debug('nylas-reminder-emails', 'componentWillUpdate');\n  }\n\n  componentDidUpdate() {\n    debug('nylas-reminder-emails', 'componentDidUpdate');\n  }\n\n  componentWillRender() {\n    debug('nylas-reminder-emails', 'componentWillRender');\n  }\n\n  componentDidRender() {\n    debug('nylas-reminder-emails', 'componentDidRender');\n  }\n\n  /**\n   * When a name prop is passed, stencil does not automatically set the name attribute on the host element.\n   * Since this component is form-associated, the name attribute is required for form submission.\n   * This is a workaround to ensure that the name attribute is set on the host element.\n   */\n  @Watch('name')\n  elementNameChangedHandler(newValue: string) {\n    debug('nylas-reminder-emails', 'elementNameChangedHandler', newValue);\n    this.host.setAttribute('name', newValue);\n  }\n\n  @Listen('valueChanged')\n  handleValueChanged(event: CustomEvent) {\n    debug('nylas-reminder-emails', 'handleValueChanged', event);\n    const { name, value } = event.detail;\n\n    if (name.startsWith('reminder-time-')) {\n      const [_, reminderIndex] = name.split(/(\\d+)/);\n      const updatedReminders = [...this.reminders];\n      updatedReminders[reminderIndex].reminder_minutes = parseInt(value);\n\n      this.internals.setFormValue(JSON.stringify(updatedReminders), `reminder-overrides`);\n      this.valueChanged.emit({ value: JSON.stringify(updatedReminders), name: `reminder-overrides` });\n    }\n  }\n\n  addReminder() {\n    debug('nylas-reminder-emails', 'addReminder');\n    this.reminders = [\n      ...this.reminders,\n      {\n        reminder_method: 'email',\n        reminder_minutes: 30,\n      },\n    ];\n    this.editingReminderIndex = this.reminders.length - 1;\n    this.updateRemindersFormValue();\n  }\n\n  deleteReminder(index: number) {\n    this.reminders.splice(index, 1);\n    this.editingReminderIndex = null;\n    this.updateRemindersFormValue();\n  }\n\n  updateRemindersFormValue() {\n    debug('nylas-reminder-emails', 'updateRemindersFormValue');\n    this.internals.setFormValue(JSON.stringify(this.reminders), 'reminder-overrides');\n    this.valueChanged.emit({ value: JSON.stringify(this.reminders), name: 'reminder-overrides' });\n  }\n\n  formatReminderTime(reminderTime: number) {\n    switch (true) {\n      case reminderTime > 24 * 60:\n        return `${reminderTime / 60 / 24} days`;\n      case reminderTime === 24 * 60:\n        return '1 day';\n      case reminderTime > 90 || reminderTime === 60:\n        return `${reminderTime / 60} hours`;\n      default:\n        return `${reminderTime} minute${reminderTime > 1 ? 's' : ''} `;\n    }\n  }\n\n  @RegisterComponent<NylasReminderEmails, NylasSchedulerConfigConnector, Exclude<NylasSchedulerEditor['stores'], undefined>>({\n    name: 'nylas-reminder-emails',\n    stateToProps: new Map([['schedulerConfig.eventReminders', 'reminders']]),\n    eventToProps: {\n      valueChanged: async (\n        event: CustomEvent<{ value: string; name: string; valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void }>,\n        _nylasSchedulerConfigConnector: NylasSchedulerConfigConnector,\n      ) => {\n        const { valueChanged } = event.detail;\n        // If a handler is passed, call it.\n        if (valueChanged) {\n          valueChanged(event);\n        }\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    const organizerName = this.participants.find(p => p.is_organizer)?.name;\n    return (\n      <Host>\n        <div class=\"cards-container\">\n          {this.reminders.map((reminder, index) => {\n            return (\n              <div class=\"nylas-reminder-email\" part=\"nre\">\n                <div class=\"header\" part=\"nre__header\">\n                  <div>\n                    <h3>Upcoming meeting{organizerName ? ` with ${organizerName} ` : ''}</h3>\n                    <p>Reminder before event</p>\n                  </div>\n                  {this.editingReminderIndex !== index ? (\n                    <button-component\n                      variant={'basic'}\n                      key={`edit-${index} `}\n                      clickHandler={event => {\n                        event.preventDefault();\n                        this.editingReminderIndex = index;\n                      }}\n                    >\n                      <edit-icon width=\"16\" height=\"16\"></edit-icon>\n                      Edit\n                    </button-component>\n                  ) : (\n                    <button-component\n                      variant={'basic'}\n                      class=\"delete-btn\"\n                      key={`delete -${index} `}\n                      clickHandler={event => {\n                        event.preventDefault();\n                        this.deleteReminder(index);\n                      }}\n                    >\n                      <trash-icon width=\"16\" height=\"16\"></trash-icon>\n                    </button-component>\n                  )}\n                </div>\n\n                {this.editingReminderIndex === index ? (\n                  <div class=\"nylas-reminder-email__body\" part=\"nre__body\">\n                    <div class=\"nylas-reminder-email__section\">\n                      <div class=\"nylas-reminder-email__row\">\n                        <label>\n                          Send confirmation email when\n                          <span class=\"label-icon\">\n                            <tooltip-component>\n                              <info-icon slot=\"tooltip-icon\" />\n                              <span slot=\"tooltip-content\">You and your guests will receive a confirmation immediately after your booking is set up.</span>\n                            </tooltip-component>\n                          </span>\n                        </label>\n                        <nylas-reminder-time\n                          name={`reminder-time-${index}`}\n                          eventReminderTimeMinutes={reminder.reminder_minutes}\n                          exportparts=\"nrt, nrt__input_dropdown: nre__reminder-input_dropdown,\n                          nrt__input_dropdown-input: nre__reminder-input_dropdown-input,\n                          nrt__input_dropdown-content: nre__reminder-input_dropdown-content,\n                          \"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div class=\"nylas-reminder-email__summary\" part=\"nre__summary\">\n                    <p>\n                      <span class=\"summary-icon\">\n                        <person-clipboard-icon></person-clipboard-icon>\n                      </span>\n                      All host & guests\n                    </p>\n                    <p>\n                      <span class=\"summary-icon\">\n                        <clock-icon></clock-icon>\n                      </span>\n                      {this.formatReminderTime(reminder.reminder_minutes)} before the event\n                    </p>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        <button-component\n          class=\"create-reminder\"\n          variant={'basic'}\n          clickHandler={event => {\n            event.preventDefault();\n            this.addReminder();\n          }}\n        >\n          <plus-icon width=\"16\" height=\"16\"></plus-icon>\n          New reminder\n        </button-component>\n      </Host>\n    );\n  }\n}\n"],"version":3}