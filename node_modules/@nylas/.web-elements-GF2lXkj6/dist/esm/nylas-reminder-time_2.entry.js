import { r as registerInstance, c as createEvent, h, H as Host, a as getElement } from './index-7cb0dd3d.js';
import { R as RegisterComponent } from './register-component-ea95564d.js';
import { R as REMINDER_MINUTE_OPTIONS, c as REMINDER_HOUR_OPTIONS, d as REMINDER_DAY_OPTIONS } from './constants-50c3e067.js';
import { a as debug } from './utils-e90d8b26.js';
import './_commonjsHelpers-57e89916.js';

const nylasReminderTimeCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-reminder-time{display:flex;flex-direction:column;gap:4px}.nylas-reminder-time label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-reminder-time label span.required{color:var(--nylas-error, #cc4841)}.nylas-reminder-time label span.label-icon{margin-left:4px}.nylas-reminder-time label span.label-icon tooltip-component{display:flex}.nylas-reminder-time__wrapper{display:flex;align-items:center;gap:0.5rem}.nylas-reminder-time__wrapper input{padding:12px 16px;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-200);font-family:var(--nylas-font-family);font-size:16px;line-height:24px;width:48px}.nylas-reminder-time__wrapper input-dropdown::part(id_dropdown-input){border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:14px 16px;width:50px}.nylas-reminder-time__wrapper input-dropdown::part(id_dropdown-content){width:100%;min-width:unset;height:160px}.nylas-reminder-time__wrapper select-dropdown{width:120px}@media screen and (max-width: 768px){.nylas-reminder-time__wrapper select-dropdown{width:100%}}.nylas-reminder-time__wrapper select-dropdown::part(sd_dropdown-button){border:1px solid var(--nylas-base-200)}";
const NylasReminderTimeStyle0 = nylasReminderTimeCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
function getInitialTimeValue(timeInMinutes) {
    if (!timeInMinutes)
        return 30;
    if (timeInMinutes >= 60 * 24)
        return timeInMinutes / (60 * 24);
    if (timeInMinutes >= 90 || timeInMinutes === 60)
        return timeInMinutes / 60;
    return timeInMinutes;
}
function getInitialTimeIncrement(timeInMinutes) {
    if (!timeInMinutes)
        return 30;
    if (timeInMinutes >= 60 * 24)
        return 60 * 24;
    if (timeInMinutes >= 90 || timeInMinutes === 60)
        return 60;
    return 1;
}
const NylasReminderTime = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.valueChanged = createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'reminder-time';
        this.eventReminderTimeMinutes = undefined;
        this.reminderTime = getInitialTimeValue(this.eventReminderTimeMinutes);
        this.reminderTimeMinutes = this.eventReminderTimeMinutes ?? 30;
        this.reminderTimeincrement = getInitialTimeIncrement(this.eventReminderTimeMinutes);
        this.reminderTimeMinutesOptions = REMINDER_MINUTE_OPTIONS;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-reminder-time', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    reminderTimeMinutesChangedHandler(newValue, oldValue) {
        debug('nylas-reminder-time', 'reminderTimeMinutesChangedHandler', newValue);
        if (newValue === oldValue) {
            return;
        }
        this.valueChanged.emit({ value: newValue.toString(), name: this.name });
    }
    connectedCallback() {
        debug('nylas-reminder-time', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-reminder-time', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.setReminderTimeMinuteOptions();
    }
    componentDidLoad() {
        debug('nylas-reminder-time', 'componentDidLoad');
    }
    disconnectedCallback() {
        debug('nylas-reminder-time', 'disconnectedCallback');
    }
    setReminderTimeMinuteOptions() {
        if (this.reminderTimeincrement === 1) {
            this.reminderTimeMinutesOptions = REMINDER_MINUTE_OPTIONS;
        }
        else if (this.reminderTimeincrement === 60) {
            this.reminderTimeMinutesOptions = REMINDER_HOUR_OPTIONS;
        }
        else
            this.reminderTimeMinutesOptions = REMINDER_DAY_OPTIONS;
        return this.reminderTimeMinutesOptions;
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        const { value } = event.detail;
        this.reminderTimeincrement = parseInt(value);
        if (this.reminderTimeincrement === 1) {
            this.reminderTime = 60;
        }
        else {
            this.reminderTime = 1;
        }
        this.setReminderTimeMinuteOptions();
        this.reminderTimeMinutes = this.reminderTime * this.reminderTimeincrement;
        this.internals.setFormValue(this.reminderTimeMinutes.toString(), this.name);
    }
    inputOptionChangedHandler(event) {
        debug('nylas-calendar-picker', 'inputOptionChangedHandler', event.detail);
        const { value } = event.detail;
        this.reminderTime = value;
        this.reminderTimeMinutes = this.reminderTime * this.reminderTimeincrement;
        this.internals.setFormValue(this.reminderTimeMinutes.toString(), this.name);
    }
    render() {
        const reminderTimeOptions = [
            { value: 1, label: 'minute' },
            { value: 60, label: 'hour' },
            { value: 60 * 24, label: 'day' },
        ];
        return (h(Host, { key: '95650f7ac9614dca98c8e69c27b4b21467979b6d' }, h("div", { key: '14d23a6f804d63906402639d30550b9cd0ae3138', class: "nylas-reminder-time", part: "nrt" }, h("div", { key: 'a62fe9f7394f5a2bb34beebb29d81bf7aecacb85', class: "nylas-reminder-time__wrapper" }, h("input-dropdown", { key: '031b5fe434b4d354ed0bfdbac6b09b4695e2d6ce', name: 'reminder-time', options: this.reminderTimeMinutesOptions, inputValue: this.reminderTime.toString(), exportparts: "id_dropdown: nrt__input_dropdown, id_dropdown-input: nrt__input_dropdown-input, id_dropdown-content: nrt__input_dropdown-content", defaultInputOption: this.reminderTimeMinutesOptions.find(i => i.value == this.reminderTime) ?? reminderTimeOptions[0] }), h("select-dropdown", { key: 'cd3c38a0fef80875fe5ad9d418aaf53ac2a0f078', name: 'reminder-time-unit', options: reminderTimeOptions, pluralizedLabel: this.reminderTime > 1 ? 's' : '', exportparts: "sd_dropdown: nrt__dropdown, sd_dropdown-button: nrt__dropdown-button, sd_dropdown-content: nrt__dropdown-content", defaultSelectedOption: reminderTimeOptions.find(i => i.value == this.reminderTimeincrement) ?? reminderTimeOptions[0], withSearch: false })))));
    }
    static get formAssociated() { return true; }
    get host() { return getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "reminderTimeMinutes": ["reminderTimeMinutesChangedHandler"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-reminder-time',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasReminderTime.prototype, "render", null);
NylasReminderTime.style = NylasReminderTimeStyle0;

const iconCss = ".sc-trash-icon-h{display:flex}";
const TrashIconStyle0 = iconCss;

const TrashIcon = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.width = '20';
        this.height = '21';
    }
    render() {
        return (h("svg", { key: '7908ffe40cb75a54ea019e5bebd2dd4c000bc8c7', width: this.width, height: this.height, viewBox: "0 0 20 21", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("path", { key: 'fc21813c45dcd05f402e36732eac300db3905272', d: "M10 0.25C11.733 0.25 13.1492 1.60645 13.2449 3.31558L13.25 3.5H18.5C18.9142 3.5 19.25 3.83579 19.25 4.25C19.25 4.6297 18.9678 4.94349 18.6018 4.99315L18.5 5H17.704L16.4239 18.0192C16.2912 19.3683 15.1984 20.41 13.8626 20.4945L13.6871 20.5H6.31293C4.95734 20.5 3.81365 19.5145 3.59883 18.1934L3.57614 18.0192L2.295 5H1.5C1.1203 5 0.806509 4.71785 0.756847 4.35177L0.75 4.25C0.75 3.8703 1.03215 3.55651 1.39823 3.50685L1.5 3.5H6.75C6.75 1.70507 8.20507 0.25 10 0.25ZM16.197 5H3.802L5.06893 17.8724C5.12768 18.4696 5.60033 18.9343 6.18585 18.9936L6.31293 19H13.6871C14.2872 19 14.7959 18.5751 14.9123 17.9982L14.9311 17.8724L16.197 5ZM11.75 7.75C12.1297 7.75 12.4435 8.03215 12.4932 8.39823L12.5 8.5V15.5C12.5 15.9142 12.1642 16.25 11.75 16.25C11.3703 16.25 11.0565 15.9678 11.0068 15.6018L11 15.5V8.5C11 8.08579 11.3358 7.75 11.75 7.75ZM8.25 7.75C8.6297 7.75 8.94349 8.03215 8.99315 8.39823L9 8.5V15.5C9 15.9142 8.66421 16.25 8.25 16.25C7.8703 16.25 7.55651 15.9678 7.50685 15.6018L7.5 15.5V8.5C7.5 8.08579 7.83579 7.75 8.25 7.75ZM10 1.75C9.08183 1.75 8.32881 2.45711 8.2558 3.35647L8.25 3.5H11.75C11.75 2.5335 10.9665 1.75 10 1.75Z", fill: "currentColor" })));
    }
};
TrashIcon.style = TrashIconStyle0;

export { NylasReminderTime as nylas_reminder_time, TrashIcon as trash_icon };

//# sourceMappingURL=nylas-reminder-time_2.entry.js.map