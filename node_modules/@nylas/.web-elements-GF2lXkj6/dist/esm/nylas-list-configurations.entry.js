import { r as registerInstance, a as createEvent, h, i as Host, e as getElement } from './index-b5cb18eb.js';
import { R as RegisterComponent } from './register-component-8057b2e5.js';
import { a as debug, A as parsePreviewLink } from './utils-674a951a.js';
import './_commonjsHelpers-6cbf8316.js';

const nylasListConfigurationsCss = ":host{display:grid;grid-auto-flow:row;width:100%;font-family:inherit;font-optical-sizing:auto;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.header{display:flex;align-items:center;justify-content:space-between;margin-bottom:1rem;gap:1rem}@media screen and (max-width: 768px){.header{flex-direction:column;gap:0.5rem;align-items:unset}}.header h2{margin:0;font-size:1.25rem;color:var(--nylas-base-900);font-weight:600}.header p{margin:0;font-size:1rem;color:var(--nylas-base-700)}.header .actions{justify-self:end}@media screen and (max-width: 768px){.header .actions{width:100%}}.configurations{border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);background:var(--nylas-base-0);height:100%;display:flex;flex-direction:column;position:relative;overflow-y:hidden}.configurations .table-container{overflow-y:auto;flex:1}.configurations .table-container table{width:100%;border-spacing:0;border-collapse:collapse;font-family:inherit;height:max-content}.configurations .table-container table.no-configurations{height:100%}.configurations .table-container table tr{color:var(--nylas-base-800);border-bottom:1px solid var(--nylas-base-200);font-family:inherit}.configurations .table-container table tr.hide{display:none}.configurations .table-container table th{font-weight:600;text-transform:uppercase;font-size:14px;line-height:20px}.configurations .table-container table tr.no-configurations td>div{display:flex;height:100%;justify-content:center;align-items:center;flex-direction:column;padding:var(--nylas-border-radius-3x)}.configurations .table-container table tr.no-configurations td>div h3{margin:0 0 1rem 0;color:var(--nylas-base-700)}.configurations .table-container table tr.no-configurations td>div p{margin:0 0 1rem 0;color:var(--nylas-base-600)}.configurations .table-container table tr.no-configurations td>div calendar-icon{margin-bottom:1rem;color:var(--nylas-base-200)}.configurations .table-container table th,.configurations .table-container table td{text-align:left;padding:1rem;font-family:inherit}.configurations .table-container table .actions{text-align:right}.configurations .table-container table .actions{display:flex;justify-content:flex-end;gap:1rem}@media screen and (max-width: 768px){.configurations .table-container table .actions{flex-direction:column;gap:0.5rem}}.configurations .table-container table .title{width:100%;max-width:300px}@media screen and (max-width: 768px){.configurations .table-container table .title{max-width:96px}}.configurations .table-container table .title div{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.configurations .table-container table .title div.config-event-title{font-weight:600}.configurations .table-container table .title div.config-event-description{font-size:0.75rem}.configurations .pagination{padding:1rem;position:sticky;top:100%;display:flex;justify-content:flex-end;gap:0.5rem;background:white;width:calc(100% - 2rem);z-index:2}.configurations .pagination td.arrows{display:flex;justify-content:flex-end;gap:0.5rem}.configurations .pagination button{display:flex;flex-direction:row;justify-content:center;align-items:center;height:3vh;width:3vh;min-width:3em;min-height:3em;cursor:pointer;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background-color:transparent;color:var(--nylas-base-800);cursor:pointer}.configurations .pagination button:hover:not(:disabled){border:1px solid var(--nylas-primary)}.configurations .pagination button:active{border:1px solid var(--nylas-base-800)}.configurations .pagination button:disabled{border:1px solid var(--nylas-base-100);background-color:transparent;color:var(--nylas-base-300);cursor:not-allowed}.configurations .pagination button.right{transform:rotate(180deg)}.error-container{margin-top:1.5rem}.error-container .error{color:var(--nylas-error);padding:0.5rem 0;margin:1rem 0 0}button-component#copy button{width:108px}select-dropdown{width:auto}select-dropdown::part(sd_dropdown-button){display:block;height:48px;padding:0px 16px 8px}@media screen and (max-width: 768px){select-dropdown::part(sd_dropdown-button){width:92px}}select-dropdown::part(sd_dropdown-content){width:120px;right:0}select-dropdown::part(sd_dropdown-labelhtml){display:flex;gap:0.5rem;align-items:center;color:var(--nylas-base-900)}select-dropdown::part(sd_dropdown-labelhtml):hover{color:var(--nylas-primary)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasListConfigurations = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.initListConfigurations = createEvent(this, "initListConfigurations", 7);
        this.createButtonClick = createEvent(this, "createButtonClick", 7);
        this.editButtonClick = createEvent(this, "editButtonClick", 7);
        this.deleteButtonClick = createEvent(this, "deleteButtonClick", 7);
        this.configurations = [];
        this.schedulerPreviewLink = '';
        this.listConfigurationsNextCursor = undefined;
        this.state = 'loading';
        this.error = '';
        this.currentCursor = null;
        this.previousCursors = [];
        this.disableNextPageButton = false;
    }
    listConfigurationsNextCursorChangedHandler(newVal, oldVal) {
        if (!newVal || newVal === oldVal) {
            if (newVal === null) {
                this.disableNextPageButton = true;
            }
            return;
        }
        this.disableNextPageButton = false;
        this.currentCursor = newVal;
    }
    connectedCallback() {
        debug('[nylas-list-configurations]', 'connectedCallback');
    }
    componentWillLoad() {
        debug('[nylas-list-configurations]', 'componentWillLoad');
        if (this.configurations && this.configurations.length > 0) {
            this.state = 'loaded';
        }
    }
    componentDidLoad() {
        debug('[nylas-list-configurations]', 'componentDidLoad');
        this.initListConfigurations.emit({
            host: this.host,
        });
    }
    disconnectedCallback() {
        debug('[nylas-list-configurations]', 'disconnectedCallback');
    }
    async handleNylasFormDropdownChanged(event) {
        debug('[nylas-list-configurations]', 'handleNylasFormDropdownChanged', event.detail);
        const { value } = event.detail;
        const [action, index] = value.split('-');
        event.preventDefault();
        switch (action) {
            case 'delete':
                this.deleteButtonClick.emit({ host: this.host, configuration: this.configurations[index] });
                break;
            case 'preview':
                window.open(parsePreviewLink(this.schedulerPreviewLink, this.configurations[index]), '_blank');
                break;
            case 'copy':
                await navigator.clipboard.writeText(parsePreviewLink(this.schedulerPreviewLink, this.configurations[index]));
                break;
            default:
                break;
        }
    }
    async getState() {
        return this.state;
    }
    async setState(state) {
        this.state = state;
    }
    async setError(error) {
        this.error = error;
    }
    getDurationString(duration) {
        const hours = Math.floor(duration / 60);
        const minutes = duration % 60;
        return `${hours ? hours : ''} ${hours ? `${hours > 1 ? 'hours' : 'hour'}` : ''} ${minutes ? minutes : ''} ${minutes ? `${minutes > 1 ? 'mins' : 'min'}` : ''}`;
    }
    getActionLabelHTML(action) {
        const actionStyle = {
            display: 'inline-flex',
            alignItems: 'center',
            gap: '0.5rem',
        };
        const dangerStyle = {
            color: 'var(--nylas-error)',
        };
        switch (action) {
            case 'preview':
                return (h("span", { style: actionStyle }, h("eye-icon", { width: "16", height: "16" }), "Preview"));
            case 'copy':
                return (h("span", { style: actionStyle }, h("copy-icon", { width: "16", height: "16" }), "Copy"));
            case 'delete':
                return (h("span", { style: { ...actionStyle, ...dangerStyle } }, h("delete-icon", { width: "15", height: "17" }), "Delete"));
            default:
                return '';
        }
    }
    previousPageClickedHandler() {
        if (this.previousCursors.length === 0)
            return;
        this.currentCursor = this.previousCursors.pop() || null;
        const prevCursor = this.previousCursors[this.previousCursors.length - 1] || undefined;
        this.initListConfigurations.emit({
            host: this.host,
            cursor: prevCursor,
        });
    }
    nextPageClickedHandler() {
        if (!this.currentCursor)
            return;
        this.previousCursors = [...this.previousCursors, this.currentCursor];
        this.initListConfigurations.emit({
            host: this.host,
            cursor: this.currentCursor,
        });
    }
    render() {
        return (h(Host, null, h("div", { class: "header" }, h("div", { class: "description" }, h("h2", null, "All Scheduling Pages"), h("p", null, "Create and manage your Scheduling Pages.")), this.configurations && this.configurations.length > 0 && (h("div", { class: "actions" }, h("button-component", { part: "nlc__create-new-cta", clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, "Create new")))), h("div", { class: "configurations" }, h("div", { class: "table-container" }, h("table", { class: {
                'no-configurations': this.state !== 'loading' && (!this.configurations || this.configurations.length === 0),
            } }, h("tr", { class: {
                hide: this.state === 'loading' || (this.configurations && this.configurations.length === 0),
            } }, h("th", null, "Page title"), h("th", null, "Duration"), h("th", null)), this.state === 'loading' && (h("tr", { class: "no-configurations" }, h("td", { colSpan: 3 }, h("div", null, h("h3", null, "Loading..."), h("p", null, "Please wait while we fetch the scheduling pages"))))), this.state !== 'loading' && (!this.configurations || this.configurations.length === 0) && (h("tr", { class: "no-configurations" }, h("td", { colSpan: 3 }, h("div", null, h("calendar-icon", { width: "48", height: "48" }), h("h3", null, "No scheduling pages found"), h("p", null, "Get started with creating your first scheduling page"), h("button-component", { part: "nlc__create-new-cta", clickHandler: () => {
                this.createButtonClick.emit(this.host);
            } }, "Create new"))))), this.state !== 'loading' &&
            this.configurations.map((config, i) => {
                return (h("tr", { key: config.id }, h("td", null, h("div", { class: "title" }, h("div", { class: "config-event-title", title: config.event_booking.title }, config.event_booking.title), h("div", { class: 'config-event-description' }, config.event_booking.description))), h("td", null, h("div", { class: "duration" }, this.getDurationString(config.availability.duration_minutes))), h("td", null, h("div", { class: "actions" }, h("button-component", { variant: 'basic', key: `edit-${i}`, clickHandler: event => {
                        event.preventDefault();
                        this.editButtonClick.emit({ host: this.host, configuration: config });
                    } }, h("edit-icon", { width: "16", height: "16" }), "Edit"), h("select-dropdown", { name: "actions", options: [
                        { value: `preview-${i}`, label: 'Preview', labelHTML: this.getActionLabelHTML('preview') },
                        { value: `copy-${i}`, label: 'Copy link', labelHTML: this.getActionLabelHTML('copy') },
                        { value: `delete-${i}`, label: 'Delete', labelHTML: this.getActionLabelHTML('delete') },
                    ], defaultSelectedOption: { value: '', label: '' }, dropdownButtonText: "...", withSearch: false, withChevron: false, exportparts: "sd_dropdown: actions__dropdown, sd_dropdown-button: actions__dropdown-button, sd_dropdown-content: actions__dropdown-content" })))));
            }))), h("div", { class: "pagination" }, h("button", { class: "arrow left", onClick: () => this.previousPageClickedHandler(), disabled: this.previousCursors.length <= 0 }, h("chevron-icon", null)), h("button", { class: "arrow right", onClick: () => this.nextPageClickedHandler(), disabled: this.disableNextPageButton }, h("chevron-icon", null)))), this.state === 'error' && (h("div", { class: "error-container" }, h("p", { class: 'error' }, this.error)))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "listConfigurationsNextCursor": ["listConfigurationsNextCursorChangedHandler"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-list-configurations',
        stateToProps: new Map([
            ['schedulerConfig.configurations', 'configurations'],
            ['schedulerConfig.listConfigurationsNextCursor', 'listConfigurationsNextCursor'],
        ]),
        localPropsToProp: new Map([['schedulerPreviewLink', 'schedulerPreviewLink']]),
        eventToProps: {
            initListConfigurations: async (event, connector) => {
                const { host, cursor } = event.detail;
                await host.setState('loading');
                const [data, error] = await connector.schedulerConfig.getConfigurations(cursor);
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                    return;
                }
                await host.setState('loaded');
            },
            createButtonClick: async (_, connector) => {
                connector.schedulerConfigStore.resetSelectedConfiguration();
                connector.schedulerConfigStore.state.action = 'create';
            },
            deleteButtonClick: async (event, connector) => {
                const { host, configuration } = event.detail;
                const [data, error] = await connector.schedulerConfig.deleteConfiguration(configuration.id);
                if (!data && error && error.message) {
                    await host.setState('error');
                    await host.setError(error.message);
                }
            },
            editButtonClick: async (event, connector) => {
                const { configuration } = event.detail;
                connector.schedulerConfigStore.state.selectedConfiguration = configuration;
                connector.schedulerConfigStore.state.action = 'edit';
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasListConfigurations.prototype, "render", null);
NylasListConfigurations.style = nylasListConfigurationsCss;

export { NylasListConfigurations as nylas_list_configurations };

//# sourceMappingURL=nylas-list-configurations.entry.js.map