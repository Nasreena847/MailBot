import { r as registerInstance, h, i as Host } from './index-b5cb18eb.js';
import { R as RegisterComponent } from './register-component-8057b2e5.js';
import { a as debug } from './utils-674a951a.js';
import './_commonjsHelpers-6cbf8316.js';

const nylasIfStateCss = ":host{display:block}div{height:inherit}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}.fade-in{animation:fadeIn 1.5s}.fade-out{animation:fadeOut 1.5s}@keyframes slideIn{0%{transform:translateY(100%)}100%{transform:translateY(0)}}@keyframes slideOut{0%{transform:translateY(0)}100%{transform:translateY(100%)}}.slide-in{animation:slideIn 1.5s}.slide-out{animation:slideOut 1.5s}@keyframes swipeIn{0%{transform:translateX(100%)}100%{transform:translateX(0)}}@keyframes swipeOut{0%{transform:translateX(0)}100%{transform:translateX(100%)}}.swipe-in{animation:swipeIn 1.5s}.swipe-out{animation:swipeOut 1.5s}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasIfState = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.state = undefined;
        this.isStateSet = undefined;
        this.isBoolean = undefined;
        this.getStore = undefined;
        this.transition = 'none';
        this.show = false;
        this.classes = {};
        this.initTransition = this.initTransition.bind(this);
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-if-state] Component will load`);
        this.watchStore(true);
    }
    async componentDidLoad() {
        debug(`[nylas-if-state] Component did load`);
    }
    shouldRender() {
        const [storeName, stateName] = this.state ? this.state.split('.') : ['', ''];
        const getStore = this.getStore;
        if (typeof getStore === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { getStore });
            return false;
        }
        const store = getStore(storeName);
        if (typeof store === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { store });
            return false;
        }
        const state = store.state[stateName];
        if (typeof this.isStateSet === 'boolean') {
            return ((this.isStateSet === false && (typeof state === 'undefined' || state === null || state.length === 0)) ||
                (this.isStateSet === true && typeof state !== 'undefined' && state !== null));
        }
        if (typeof this.isBoolean === 'boolean') {
            return (this.isBoolean === true && typeof state !== 'undefined' && state === true) || (this.isBoolean === false && typeof state !== 'undefined' && state === false);
        }
        return false;
    }
    onGetStoreChange() {
        this.watchStore(true);
    }
    watchStore(immediate = false) {
        const [storeName, stateName] = this.state ? this.state.split('.') : ['', ''];
        const getStore = this.getStore;
        if (typeof getStore === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { getStore });
            return null;
        }
        const store = getStore(storeName);
        if (typeof store === 'undefined') {
            debug(`[nylas-if-state] Store name: ${storeName} | State name: ${stateName}`, { store });
            return null;
        }
        if (immediate === true) {
            this.initTransition();
        }
        store.onChange(stateName, this.initTransition);
    }
    initTransition() {
        const show = this.shouldRender();
        switch (this.transition) {
            case 'fade':
            case 'slide':
            case 'swipe':
                this.classes = {
                    [`${this.transition}-in`]: show,
                    [`${this.transition}-out`]: !show,
                };
                setTimeout(() => {
                    this.show = show;
                }, 150);
                break;
            default:
                this.show = this.shouldRender();
                break;
        }
    }
    render() {
        return (h(Host, { key: '8c7133e9d01ecb6d14db3a6f30321ecbb7047dcb' }, h("div", { key: '81ba387d18d24761a8f89da678161aaf5755c3f2', class: this.classes }, this.show && h("slot", null))));
    }
    static get watchers() { return {
        "getStore": ["onGetStoreChange"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-if-state',
        getStoresToProp: 'getStore',
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasIfState.prototype, "render", null);
NylasIfState.style = nylasIfStateCss;

export { NylasIfState as nylas_if_state };

//# sourceMappingURL=nylas-if-state.entry.js.map