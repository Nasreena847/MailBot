import { r as registerInstance, a as createEvent, h, i as Host, e as getElement } from './index-b5cb18eb.js';
import { N as NylasBaseProvider, e as es } from './index.es-6da55d83.js';
import { a as debug } from './utils-674a951a.js';
import { N as NylasAuthConnector, a as NylasThreadsConnector, b as NylasMessagesConnector, c as NylasFoldersConnector, C as CreateNylasAuthStore, d as CreateNylasMailboxStore, H as HashRouter } from './mailbox-store-81b1336e.js';
import { N as NylaSchedulerAPIConnector, C as CreateNylasSchedulerStore } from './scheduler-store-534b47da.js';
import { C as CreateNylasSchedulerConfigStore } from './scheduler-config-store-544fc163.js';
import './_commonjsHelpers-6cbf8316.js';
import './index-a605bc0f.js';

class NylasConnector {
    constructor(router, nylasAuth, nylasAuthStore, nylasMailboxStore, nylasSchedulerStore, nylasSchedulerConfigStore, schedulerAPIURL = 'https://api.us.nylas.com') {
        this.router = router;
        this.schedulerAPIURL = schedulerAPIURL;
        this.nylasAuth = nylasAuth;
        this.nylasAuthStore = nylasAuthStore;
        this.nylasMailboxStore = nylasMailboxStore;
        this.nylasSchedulerStore = nylasSchedulerStore;
        this.nylasSchedulerConfigStore = nylasSchedulerConfigStore;
    }
    init() {
        debug('NylasConnector init');
    }
    get authStore() {
        return this.nylasAuthStore;
    }
    get mailboxStore() {
        return this.nylasMailboxStore;
    }
    get schedulerStore() {
        return this.nylasSchedulerStore;
    }
    get schedulerConfigStore() {
        return this.nylasSchedulerConfigStore;
    }
    get auth() {
        if (this._authConnector) {
            return this._authConnector;
        }
        this._authConnector = new NylasAuthConnector(this.nylasAuth, this.nylasAuthStore);
        return this._authConnector;
    }
    get threads() {
        if (this._threadConnector) {
            return this._threadConnector;
        }
        this._threadConnector = new NylasThreadsConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore, this.router);
        return this._threadConnector;
    }
    get messages() {
        if (this._messageConnector) {
            return this._messageConnector;
        }
        this._messageConnector = new NylasMessagesConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore);
        return this._messageConnector;
    }
    get folders() {
        if (this._foldersConnector) {
            return this._foldersConnector;
        }
        this._foldersConnector = new NylasFoldersConnector(this.nylasAuth, this.nylasAuthStore, this.nylasMailboxStore);
        return this._foldersConnector;
    }
    get scheduler() {
        if (this._schedulerAPIConnector) {
            return this._schedulerAPIConnector;
        }
        this._schedulerAPIConnector = new NylaSchedulerAPIConnector({
            schedulerAPIURL: this.schedulerAPIURL,
            schedulerStore: this.schedulerStore,
        });
        return this._schedulerAPIConnector;
    }
    getAuth() {
        return this.nylasAuth;
    }
    resetStores() {
        this.nylasAuthStore.reset();
        this.nylasMailboxStore.reset();
    }
    async logout() {
        await this.nylasAuth.logout();
        this.resetStores();
    }
}

const nylasProviderCss = ":host{display:contents}";

const NylasProvider = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.init = createEvent(this, "init", 7);
        this.loggedIn = createEvent(this, "loggedIn", 7);
        this.loggedOut = createEvent(this, "loggedOut", 7);
        this.handleAuthChange = async (isAuthenticated) => {
            if (isAuthenticated) {
                this.loggedIn.emit(this.host);
            }
            else {
                this.loggedOut.emit(this.host);
            }
        };
        this.authConfig = undefined;
        this.eventOverrides = {};
        this.automaticComponentRegistration = true;
    }
    connectedCallback() {
        debug('[nylas-provider] connectedCallback');
    }
    async componentWillLoad() {
        debug('[nylas-provider] componentWillLoad');
        this.stores = {
            auth: CreateNylasAuthStore(),
            mailbox: CreateNylasMailboxStore(),
            scheduler: CreateNylasSchedulerStore(),
            schedulerConfig: CreateNylasSchedulerConfigStore(),
        };
        this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);
        const router = new HashRouter();
        this.nylasAuth = es({
            apiUri: 'https://api.us.nylas.com',
            elementsApiUri: 'https://elements.us.nylas.com',
            storageType: 'indexeddb',
            clientId: 'YOUR_CLIENT_ID',
            defaultScopes: [],
            redirectURI: '/',
            ...this.authConfig,
        });
        const nylasMailboxStore = this.baseProvider?.getStore('mailbox');
        if (!nylasMailboxStore) {
            throw new Error('The mailbox store is not set');
        }
        const nylasAuthStore = this.baseProvider?.getStore('auth');
        if (!nylasAuthStore) {
            throw new Error('The auth store is not set');
        }
        const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');
        if (!nylasSchedulerStore) {
            throw new Error('The scheduler store is not set');
        }
        const nylasSchedulerConfigStore = this.baseProvider?.getStore('schedulerConfig');
        if (!nylasSchedulerConfigStore) {
            throw new Error('The scheduler config store is not set');
        }
        this.nylasConnector = new NylasConnector(router, this.nylasAuth, nylasAuthStore, nylasMailboxStore, nylasSchedulerStore, nylasSchedulerConfigStore);
        const initEvent = this.init.emit(this.host);
        if (!initEvent.defaultPrevented) {
            await this.nylasConnector?.auth.validateSession();
        }
        this.handleAuthChange(nylasAuthStore.state.isAuthenticated);
        this.baseProvider?.componentWillLoad(this.nylasConnector);
    }
    componentDidLoad() {
        const nylasAuthStore = this.baseProvider?.getStore('auth');
        nylasAuthStore?.onChange('isAuthenticated', this.handleAuthChange);
        this.baseProvider?.componentDidLoad();
    }
    componentDisconnected() {
        this.baseProvider?.componentDisconnected();
    }
    async registerComponentHandler(event) {
        this.baseProvider?.registerComponent(event.detail);
    }
    async unregisterComponentHandler(event) {
        this.baseProvider?.unregisterComponent(event.detail);
    }
    async getNylasAuth() {
        return this.nylasAuth;
    }
    async getNylasConnector() {
        return this.nylasConnector;
    }
    async getMailboxStore() {
        return this.baseProvider?.getStore('mailbox');
    }
    async getAuthStore() {
        return this.baseProvider?.getStore('auth');
    }
    async getNylasSchedulerStore() {
        return this.baseProvider?.getStore('scheduler');
    }
    async getNylasSchedulerConfigStore() {
        return this.baseProvider?.getStore('schedulerConfig');
    }
    render() {
        return (h(Host, { key: '671c0ea5bf56f2f4aecda072cc66e54c0d907810' }, h("slot", { key: 'db8ea221069d45a5dfd9ee570ab7e8880a4bd6e1' })));
    }
    get host() { return getElement(this); }
};
NylasProvider.style = nylasProviderCss;

export { NylasProvider as nylas_provider };

//# sourceMappingURL=nylas-provider.entry.js.map