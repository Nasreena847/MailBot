import { d as dataResponse } from './utils-e90d8b26.js';

class NylasIdentityRequestWrapper {
    constructor(session) {
        this.defaultAuthArgs = [];
        this.session = session;
    }
    setActiveGrantId(grantId) {
        this.activeGrantId = grantId;
    }
    async request({ method, path, body, headers }) {
        try {
            const response = await this.session.fetch(`grants/me/${path}`, {
                method,
                headers: headers ? new Headers(headers) : undefined,
                body,
                ...(this.session.isMultiAccount() && this.activeGrantId ? { grant_id: this.activeGrantId } : {}),
            });
            if (typeof response === 'undefined') {
                throw new Error('Response is undefined');
            }
            return dataResponse(response);
        }
        catch (error) {
            let errorMessage = String(error);
            if (String(error).includes('Access token not found')) {
                errorMessage = 'Session expired, please log in again. Redirecting...';
                setTimeout(() => {
                    localStorage.removeItem('grant');
                    localStorage.removeItem('user');
                    window.location.reload();
                }, 1000);
            }
            return dataResponse(null, {
                message: errorMessage,
            });
        }
    }
    async currentUser() {
        const grantId = this.session.isMultiAccount() ? this.activeGrantId : undefined;
        const idToken = await this.session.getProfile(grantId);
        if (!idToken) {
            return null;
        }
        return {
            id: idToken.sub,
            email: idToken.email,
            name: idToken.name,
            provider: idToken.provider,
        };
    }
    async authenticationUrl(authArgs) {
        const provider = authArgs?.provider || 'google';
        const defaultArgs = this.defaultAuthArgs.find(args => args.provider === provider);
        let args = defaultArgs || {};
        if (authArgs) {
            args = { ...args, ...authArgs };
        }
        return this.session.auth(args);
    }
    setDefaultAuthArgs(authArgs) {
        this.defaultAuthArgs = authArgs;
    }
}

export { NylasIdentityRequestWrapper as N };

//# sourceMappingURL=nylas-api-request-96987603.js.map