import { r as registerInstance, a as createEvent, h, i as Host, e as getElement } from './index-b5cb18eb.js';
import { R as RegisterComponent } from './register-component-8057b2e5.js';
import { a as debug, i as instance } from './utils-674a951a.js';
import './_commonjsHelpers-6cbf8316.js';

const nylasOrganizerConfirmationCardCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.event-card-wrapper{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family);background-color:var(--nylas-base-0);color:var(--nylas-base-900);border-radius:var(--nylas-border-radius-3x);position:relative;margin-top:1rem;width:424px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.event-card-wrapper{width:100%;border-radius:0px}}.calendar-icon{display:flex;align-items:center;justify-content:center;width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200);color:var(--nylas-base-700)}.booked-event-header{margin:1.5rem 4rem;overflow-wrap:anywhere;display:flex;align-items:center;flex-direction:column;font-size:1rem;font-weight:400}.booked-event-header h2{color:var(--nylas-base-600);margin-top:1.5rem;margin-bottom:0.25rem;font-size:1.125rem;font-weight:600}.manage-booking-description{border-top:1px solid var(--nylas-base-200)}.manage-booking-description p{font-size:16px;margin:1rem;padding:0.5rem 1rem;font-weight:400;color:var(--nylas-base-800)}.footer{padding:0.5rem;display:grid;grid-template-columns:1fr 1fr;gap:0.5rem;box-sizing:border-box;background-color:var(--nylas-base-25);width:100%;border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x)}.footer.no-template-cols{grid-template-columns:1fr}.footer.no-footer{display:none}sp-divider{background-color:var(--nylas-base-200);height:1px}calendar-check-icon{display:flex;align-items:center;justify-content:center;height:100%}button-component{--dot-color:var(--nylas-base-700)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasOrganizerConfirmationCard = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.rejectBookingButtonClicked = createEvent(this, "rejectBookingButtonClicked", 7);
        this.confirmBookingButtonClicked = createEvent(this, "confirmBookingButtonClicked", 7);
        this.confirmBookingError = createEvent(this, "confirmBookingError", 7);
        this.handleConfirmBookingButtonClicked = () => {
            this.action = 'confirm';
            const errorHandler = (error) => {
                this.confirmBookingError.emit(error);
            };
            if (this.organizerConfirmationBookingId && !this.isLoading) {
                this.confirmBookingButtonClicked.emit({ bookingId: this.organizerConfirmationBookingId, host: this.host, errorHandler });
            }
        };
        this.handleRejectBookingButtonClicked = () => {
            this.action = 'reject';
            if (this.organizerConfirmationBookingId && !this.isLoading) {
                this.rejectBookingButtonClicked.emit({ bookingId: this.organizerConfirmationBookingId, host: this.host });
            }
        };
        this.organizerConfirmationBookingId = undefined;
        this.configSettings = undefined;
        this.isLoading = undefined;
        this.selectedLanguage = navigator.language;
        this.action = null;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-organizer-confirmation-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-organizer-confirmation-card] Component did load`);
    }
    async resetAction() {
        this.action = null;
    }
    render() {
        return (h(Host, { key: '6d80da6d7d359bad3d317d04db827e51d02f36c9', part: "nmcc" }, h("div", { key: 'eeca3a1fe7937e7be2a15ab418e0c46bee8b207f', class: "event-card-wrapper", part: "nmccc__card" }, h("div", { key: '7b5fad347fbe69a1b62945cd4945854e086e4bd2', class: "calendar-icon" }, h("calendar-check-icon", { key: '427696f8e3de3f7d1f8d131626897460beb616f9' })), h("div", { key: 'fdb11fa1b76f83cd64e8ed44e637aff89b33e93e', class: "booked-event-header" }, h("h2", { key: '2c18ab70ed2f00251552c972a040721c64979276', slot: "card-title", part: "nmcc__title" }, !!this.organizerConfirmationBookingId && `${instance.t('bookingPendingTitle')}!`)), h("div", { key: '70cbb157ae6436799d24092f6bd0ce82df8c4c5d', class: "manage-booking-description" }, h("p", { key: 'afaeb94cf6ff0d75fa17c8a24298078b95d5d8f8' }, instance.t('bookingPendingnDescription'))), h("div", { key: 'fb6b22ad30e9af98b50cd4a35ad545ba8b5a100b', class: {
                'footer': true,
                'no-footer': this.configSettings?.scheduler?.hide_cancellation_options && this.configSettings?.scheduler?.hide_rescheduling_options,
                'no-template-cols': this.configSettings?.scheduler?.hide_cancellation_options || this.configSettings?.scheduler?.hide_rescheduling_options,
            } }, !this.configSettings?.scheduler?.hide_cancellation_options && (h("button-component", { variant: 'destructive', onClick: this.handleRejectBookingButtonClicked, isLoading: this.isLoading && this.action === 'reject', part: "nmcc__button-outline nmcc__cancel-cta" }, `${instance.t('rejectBookingButton')}`)), !this.configSettings?.scheduler?.hide_rescheduling_options && (h("button-component", { variant: 'basic', onClick: this.handleConfirmBookingButtonClicked, isLoading: this.isLoading && this.action === 'confirm', part: "nmcc__button-outline nmcc__reschedule-cta" }, `${instance.t('confirmBookingButton')}`))))));
    }
    get host() { return getElement(this); }
};
__decorate([
    RegisterComponent({
        name: 'nylas-organizer-confirmation-card',
        stateToProps: new Map([
            ['scheduler.organizerConfirmationBookingId', 'organizerConfirmationBookingId'],
            ['scheduler.configSettings', 'configSettings'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
        ]),
        eventToProps: {
            rejectBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setReject(event.detail.bookingId);
            },
            confirmBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                const { host } = event.detail;
                const result = await nylasSchedulerConnector.scheduler.updateBooking({
                    bookingId: event.detail.bookingId,
                    status: 'confirmed',
                });
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
                await host.resetAction();
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasOrganizerConfirmationCard.prototype, "render", null);
NylasOrganizerConfirmationCard.style = nylasOrganizerConfirmationCardCss;

export { NylasOrganizerConfirmationCard as nylas_organizer_confirmation_card };

//# sourceMappingURL=nylas-organizer-confirmation-card.entry.js.map