import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug } from './utils.js';
import { d as defineCustomElement$7 } from './chevron.js';
import { d as defineCustomElement$6 } from './info.js';
import { d as defineCustomElement$5 } from './input-dropdown2.js';
import { d as defineCustomElement$4 } from './search.js';
import { d as defineCustomElement$3 } from './select-dropdown2.js';
import { d as defineCustomElement$2 } from './time-period-selector2.js';
import { d as defineCustomElement$1 } from './toolitp-component.js';

const nylasMinBookingNoticeCss = ":host{--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-min-booking-notice{display:flex;justify-content:space-between;font-family:var(--nylas-font-family)}@media screen and (max-width: 768px){.nylas-min-booking-notice{flex-direction:column;gap:0.5rem}}.nylas-min-booking-notice label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-min-booking-notice label span.label-icon{margin-left:4px}.nylas-min-booking-notice label span.label-icon tooltip-component{display:flex}select-dropdown::part(sd_dropdown-button){border:none}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasMinBookingNotice = proxyCustomElement(class NylasMinBookingNotice extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChanged = createEvent(this, "valueChanged", 7);
        this.internals = this.attachInternals();
        this.selectedConfiguration = undefined;
        this.minBookingNotice = undefined;
        this.name = 'min-booking-notice';
        this.selectedNumber = undefined;
        this.selectedPeriod = undefined;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-min-booking-notice', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const minBookingNotice = newVal?.scheduler?.min_booking_notice || this.minBookingNotice || 1;
        if (minBookingNotice) {
            this.updateNumberAndPeriodFromMinutes(minBookingNotice);
        }
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(minBookingNotice?.toString(), this.name);
    }
    connectedCallback() {
        debug('nylas-min-booking-notice', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-min-booking-notice', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-min-booking-notice', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.updateNumberAndPeriodFromMinutes(this.minBookingNotice || 1);
        }
    }
    disconnectedCallback() {
        debug('nylas-min-booking-notice', 'disconnectedCallback');
    }
    timePeriodChangedHandler(event) {
        const { number, period } = event.detail;
        let totalMinutes;
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        if (period === 'minute') {
            totalMinutes = number;
        }
        else if (period === 'hour') {
            totalMinutes = number * minutesInHour;
        }
        else if (period === 'day') {
            totalMinutes = number * minutesInDay;
        }
        else if (period === 'week') {
            totalMinutes = number * minutesInWeek;
        }
        else if (period === 'month') {
            totalMinutes = number * minutesInMonth;
        }
        else {
            totalMinutes = 0;
        }
        this.valueChanged.emit({ value: totalMinutes, name: 'minBookingNotice' });
        if (typeof this.internals.setFormValue !== 'function') {
            return;
        }
        this.internals.setFormValue(totalMinutes.toString(), this.name);
    }
    updateNumberAndPeriodFromMinutes(minutes) {
        const minutesInHour = 60;
        const minutesInDay = minutesInHour * 24;
        const minutesInWeek = minutesInDay * 7;
        const minutesInMonth = minutesInDay * 30;
        let number, period;
        if (minutes >= minutesInMonth) {
            number = Math.floor(minutes / minutesInMonth);
            period = 'month';
        }
        else if (minutes >= minutesInWeek) {
            number = Math.floor(minutes / minutesInWeek);
            period = 'week';
        }
        else if (minutes >= minutesInDay) {
            number = Math.floor(minutes / minutesInDay);
            period = 'day';
        }
        else if (minutes >= minutesInHour) {
            number = Math.floor(minutes / minutesInHour);
            period = 'hour';
        }
        else {
            number = minutes;
            period = 'minute';
        }
        this.selectedNumber = number;
        this.selectedPeriod = period;
    }
    render() {
        const showTImePeriodSelector = typeof this.selectedNumber == 'number' && typeof this.selectedPeriod == 'string';
        return (h(Host, { key: 'b51f14edfe66462ce3822dcd9ea299820dfef96b' }, h("div", { key: '578505fefc4132f45ac21d6ab1d59cb409145536', class: "nylas-min-booking-notice", part: "nmbn" }, h("label", { key: '5226af32996ae771f65ed4dce017bbba7e26193a' }, "Minimum booking notice", h("span", { key: '37dcf44405e2cfe10bc652d35715936f41d78685', class: "label-icon" }, h("tooltip-component", { key: '52a11ccbcddb918341c7cad983fb9bdf65b1c86d' }, h("info-icon", { key: 'c941288bee95958b40a825944ba2316709f307a1', slot: "tooltip-icon" }), h("span", { key: '7d3a9c1f538b1e16c094d78daf4eea1f84084bd7', slot: "tooltip-content" }, "The minimum amount of time in the future that a new booking can be made.")))), showTImePeriodSelector && (h("time-period-selector", { id: "min-booking-notice", exportparts: "tps__number-dropdown: nmbn__number-dropdown, tps__number-dropdown-button: nmbn__number-dropdown-button, tps__number-dropdown-content: nmbn__number-dropdown-content, tps__period-dropdown: nmbn__period-dropdown, tps__period-dropdown-button: nmbn__period-dropdown-button, tps__period-dropdown-content: nmbn__period-dropdown-content", timePeriods: ['minute', 'hour', 'day', 'week'], defaultSelectedNumber: this.selectedNumber, defaultSelectedPeriod: this.selectedPeriod })))));
    }
    static get formAssociated() { return true; }
    get host() { return this; }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
    static get style() { return nylasMinBookingNoticeCss; }
}, [65, "nylas-min-booking-notice", {
        "selectedConfiguration": [16],
        "minBookingNotice": [2, "min-booking-notice"],
        "name": [1],
        "selectedNumber": [32],
        "selectedPeriod": [32]
    }, [[0, "timePeriodChanged", "timePeriodChangedHandler"]], {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-min-booking-notice',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasMinBookingNotice.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-min-booking-notice", "chevron-icon", "info-icon", "input-dropdown", "search-icon", "select-dropdown", "time-period-selector", "tooltip-component"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-min-booking-notice":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasMinBookingNotice);
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "info-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "input-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "search-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "select-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "time-period-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "tooltip-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasMinBookingNotice as N, defineCustomElement as d };

//# sourceMappingURL=nylas-min-booking-notice2.js.map