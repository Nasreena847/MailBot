import { proxyCustomElement, HTMLElement, h, Host, Fragment } from '@stencil/core/internal/client';
import { a as debug } from './utils.js';
import { d as defineCustomElement$2 } from './close.js';
import { d as defineCustomElement$1 } from './warning.js';

const nylasNotificationCss = ":host{display:block;margin-bottom:-12px;width:100%;z-index:1;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.notif{display:flex;padding:17px;align-items:flex-start;justify-content:space-between;gap:16px;border-radius:var(--nylas-border-radius-2x);border:1.5px solid var(--nylas-error);background:var(--nylas-base-0)}@media screen and (max-width: 768px){.notif{width:auto}}.notif .content{display:flex;flex-direction:row;gap:8px}.notif .content .message{font-size:14px;font-weight:400;color:var(--nylas-base-800)}.notif .content .message .title{font-size:16px;font-weight:600;color:var(--nylas-base-950);display:block}.notif .content .message .description{font-size:14px;font-weight:400;color:var(--nylas-base-800);display:block}.notif .content .icon.error{color:var(--nylas-error)}.notif.error{border-color:var(--nylas-error);background:rgb(255, 248, 248)}.notif.warning{border-color:var(--nylas-warning)}.notif.info{border-color:var(--nylas-info)}.notif.success{border-color:var(--nylas-success)}.notif .dismiss-btn{background:none;border:none;color:var(--nylas-base-950);cursor:pointer}";

const NylasNotification = proxyCustomElement(class NylasNotification extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.ttl = 5000;
        this.allowedCategories = ['component', 'api', 'validation', 'invalid_session'];
        this.notifications = [];
    }
    onError(event) {
        debug(`[nylas-notification] Error: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    onWarning(event) {
        debug(`[nylas-notification] Warning: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    onInfo(event) {
        debug(`[nylas-notification] Info: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    onSuccess(event) {
        debug(`[nylas-notification] Success: ${event.detail.notification.title}`);
        this.handleNotification(event);
    }
    isChildOf(parentHost) {
        let parent = this.host.parentNode;
        while (parent) {
            if (parent === parentHost) {
                return true;
            }
            if (parent instanceof ShadowRoot) {
                parent = parent.host;
            }
            else {
                parent = parent.parentNode;
            }
        }
        return false;
    }
    handleNotification(event) {
        const parentHost = event.detail.host;
        if (event.defaultPrevented) {
            debug(`[nylas-notification] Event default prevented`);
            return;
        }
        if (parentHost && !this.isChildOf(parentHost)) {
            debug(`[nylas-notification] Host not a parent`);
            return;
        }
        if (this.ttl === 0) {
            debug(`[nylas-notification] TTL is 0`);
            return;
        }
        if (this.allowedCategories.length > 0 && !this.allowedCategories.includes(event.detail.notification.category)) {
            debug(`[nylas-notification] Category not allowed`);
            return;
        }
        this.notifications = [...this.notifications, { ...event.detail.notification }];
        if (event.detail.notification.ttl !== 'none') {
            const ttl = event.detail.notification.ttl ? event.detail.notification.ttl : this.ttl;
            window.setTimeout(() => {
                this.notifications = this.notifications.filter(notif => notif.id !== event.detail.notification.id);
            }, ttl);
        }
    }
    dismissNotification(id) {
        this.notifications = this.notifications.filter(notif => notif.id !== id);
    }
    render() {
        return (h(Host, { key: '9a2b2d32b746b25c06f61494c2cae183712f61e0' }, h(Fragment, { key: '561d628e0954735a0a0643b076101f4a0e4cfe0a' }, this.notifications.map(notif => (h("div", { class: `notif ${notif.type}`, key: notif.id }, h("div", { class: "content" }, h("span", { class: `icon ${notif.type}` }, (notif.type === 'error' || notif.type === 'warning') && h("warning-icon", null)), h("span", { class: "message" }, h("span", { class: "title" }, notif.title), notif.description && h("span", { class: "description" }, notif.description))), h("button", { class: "dismiss-btn", onClick: () => this.dismissNotification(notif.id) }, h("close-icon", null))))), h("slot", { key: '2f2d91b57282c87026f507f065b0e98615658ff2' }))));
    }
    get host() { return this; }
    static get style() { return nylasNotificationCss; }
}, [1, "nylas-notification", {
        "ttl": [8],
        "allowedCategories": [16],
        "notifications": [32]
    }, [[16, "nylasSchedulerError", "onError"], [16, "nylasSchedulerWarning", "onWarning"], [16, "nylasSchedulerInfo", "onInfo"], [16, "nylasSchedulerSuccess", "onSuccess"]]]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-notification", "close-icon", "warning-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-notification":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasNotification);
            }
            break;
        case "close-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "warning-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasNotification as N, defineCustomElement as d };

//# sourceMappingURL=nylas-notification2.js.map