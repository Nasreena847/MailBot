import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug, i as isValidImage } from './utils.js';
import { d as defineCustomElement$1 } from './input-component2.js';

const inputImageUrlCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.logo-container{display:flex;flex-direction:row;gap:2rem}.logo-container .input-container{flex:1}.logo-container .input-container span.error-message{color:var(--nylas-error)}.logo-container .logo{display:flex;justify-content:center;align-items:center;width:200px;height:100px;border:var(--nylas-base-200) solid 1px;border-radius:var(--nylas-border-radius-2x);overflow:hidden;padding:10px}.logo-container .logo img{max-height:100%;max-width:100%;object-fit:contain;object-position:center}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const InputImageUrl = proxyCustomElement(class InputImageUrl extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChanged = createEvent(this, "valueChanged", 7);
        this.internals = this.attachInternals();
        this.componentType = 'image-url';
        this.imageUrl = '';
        this.errorMessage = '';
        this.name = 'input-image-url';
        this.currentImageUrl = this.imageUrl;
    }
    connectedCallback() {
        debug('nylas-image-input', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-image-input', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-image-input', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.host.setAttribute('component-type', this.componentType);
    }
    componentDidLoad() {
        debug('nylas-image-input', 'componentDidLoad');
        this.currentImageUrl = this.imageUrl;
        this.setImage(this.imageUrl);
    }
    componentWillUpdate() {
        debug('nylas-image-input', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-image-input', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-image-input', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-image-input', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-image-input', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    async nylasFormInputChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === this.name) {
            this.setImage(value);
        }
    }
    async nylasFormInputBlurHandler(event) {
        const { name, value } = event.detail;
        if (name === this.name) {
            this.setImage(value);
        }
    }
    setImage(value) {
        this.errorMessage = '';
        isValidImage(value)
            .then(() => {
            this.currentImageUrl = value;
            this.internals.setValidity({});
            this.internals.setFormValue(this.currentImageUrl, this.name);
            this.valueChanged.emit({ value: this.currentImageUrl, name: this.name });
        })
            .catch(() => {
            this.internals.setValidity({ customError: true }, 'Invalid image URL.');
            this.errorMessage = 'Invalid image URL.';
        });
    }
    render() {
        return (h(Host, { key: 'c8569ab945369f897bc13436ecdee791b5204484' }, h("div", { key: '2a48916d7d61bb62cdb2f7e2cf690746c3c08db2', class: "logo-container" }, h("div", { key: '39494f8e807bbddd67fbb7148cfac66c00a00b49', class: "input-container" }, h("input-component", { key: '1a4a4c588a0e40e44858ea295b2e0467b8be4116', name: this.name, id: this.name, type: "text", required: false, exportparts: "ic_input: iiu__logo-input-textfield", defaultValue: this.imageUrl ?? '' }), this.errorMessage && h("span", { class: "error-message" }, this.errorMessage)), this.currentImageUrl && !this.errorMessage && (h("div", { class: "logo" }, h("img", { src: this.currentImageUrl, alt: "Logo" }))))));
    }
    static get formAssociated() { return true; }
    get host() { return this; }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"]
    }; }
    static get style() { return inputImageUrlCss; }
}, [65, "input-image-url", {
        "imageUrl": [1, "image-url"],
        "errorMessage": [1, "error-message"],
        "name": [1],
        "currentImageUrl": [32]
    }, [[0, "nylasFormInputChanged", "nylasFormInputChangedHandler"], [0, "nylasFormInputBlurred", "nylasFormInputBlurHandler"]], {
        "name": ["elementNameChangedHandler"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-image-input',
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], InputImageUrl.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["input-image-url", "input-component"];
    components.forEach(tagName => { switch (tagName) {
        case "input-image-url":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, InputImageUrl);
            }
            break;
        case "input-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { InputImageUrl as I, defineCustomElement as d };

//# sourceMappingURL=input-image-url2.js.map