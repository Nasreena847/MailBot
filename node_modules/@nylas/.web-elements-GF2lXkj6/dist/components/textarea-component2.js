import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { s as sanitize } from './utils.js';
import { d as defineCustomElement$2 } from './info.js';
import { d as defineCustomElement$1 } from './toolitp-component.js';

const textareaComponentCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:100%}label{display:flex;color:var(--nylas-base-800, #293056);font-size:14px;font-style:normal;font-weight:400;line-height:150%;flex-direction:column;gap:4px;font-family:var(--nylas-font-family);font-size:16px;color:var(--nylas-base-800)}label.error{color:var(--nylas-error)}label span.required{color:var(--nylas-error);padding:0 0.25rem}label p{margin:0;display:flex;gap:4px;align-items:center}label .error{color:var(--nylas-error)}textarea{display:flex;height:48px;padding-left:16px;align-items:center;gap:8px;align-self:stretch;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background:var(--nylas-base-0);width:-webkit-fill-available;color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:400;line-height:150%;padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px}textarea:focus{outline-color:var(--nylas-primary)}textarea.error{border-radius:var(--nylas-border-radius-2x);font-weight:600;border-color:var(--nylas-error);border-width:2px}textarea.error::placeholder{font-weight:400}textarea::placeholder{color:var(--nylas-base-300)}textarea::-webkit-resizer{display:none}";

const TextareaComponent = proxyCustomElement(class TextareaComponent extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.nylasFormInputChanged = createEvent(this, "nylasFormInputChanged", 7);
        this.name = 'textarea';
        this.defaultValue = undefined;
        this.label = '';
        this.placeholder = '';
        this.required = false;
        this.readOnly = false;
        this.autoFocus = false;
        this.maxLength = 255;
        this.type = 'multi_line_text';
        this.tooltip = '';
        this.value = '';
        this.error = '';
    }
    componentDidLoad() {
        this.value = sanitize(this.defaultValue || '');
    }
    handleBookingFormSubmitted(event) {
        this.validate(this.value);
        if (this.error) {
            event.preventDefault();
        }
    }
    handletriggerValidation(event) {
        this.validate(this.value);
        if (this.error) {
            event.preventDefault();
        }
    }
    handleInput(e) {
        const inputElement = e.target;
        this.value = sanitize(inputElement.value);
        this.nylasFormInputChanged.emit({
            value: this.value,
            name: this.name,
            error: this.error,
            label: this.label,
            type: this.type,
        });
    }
    validate(value) {
        if (this.required && !value) {
            this.error = `${this.label} is required.`;
        }
        else if (value.length > this.maxLength) {
            this.error = `${this.label} cannot exceed ${this.maxLength} characters.`;
        }
        else {
            this.error = '';
        }
    }
    render() {
        return (h("label", { key: 'fe5c08ffc334bbf3018b5d092cfa3c0dc3493366', part: "tc__label", class: { error: !!this.error } }, h("p", { key: '7d572a5c200d968902be56c8915d8da4e27454a7' }, h("span", { key: 'ab9b1b67451ed46b4e1d6ccf9403d7cca51b6028', class: "label" }, this.label), this.required && h("span", { class: "required" }, "*"), this.tooltip && (h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, this.tooltip)))), h("textarea", { key: 'c71b3cc7cac22ce0d153f4c6ac57b7cd7f5732c6', name: this.name, placeholder: this.placeholder, readOnly: this.readOnly, autoFocus: this.autoFocus, value: this.value, maxLength: this.maxLength, onInput: e => this.handleInput(e), class: { error: !!this.error }, part: "tc__textarea" }), this.error && h("span", { class: "error help-text" }, this.error)));
    }
    static get style() { return textareaComponentCss; }
}, [1, "textarea-component", {
        "name": [1],
        "defaultValue": [1, "default-value"],
        "label": [1],
        "placeholder": [1],
        "required": [4],
        "readOnly": [4, "read-only"],
        "autoFocus": [4, "auto-focus"],
        "maxLength": [2, "max-length"],
        "type": [1],
        "tooltip": [1],
        "value": [32],
        "error": [32]
    }, [[4, "bookingFormSubmitted", "handleBookingFormSubmitted"], [4, "triggerValidation", "handletriggerValidation"]]]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["textarea-component", "info-icon", "tooltip-component"];
    components.forEach(tagName => { switch (tagName) {
        case "textarea-component":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, TextareaComponent);
            }
            break;
        case "info-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "tooltip-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { TextareaComponent as T, defineCustomElement as d };

//# sourceMappingURL=textarea-component2.js.map