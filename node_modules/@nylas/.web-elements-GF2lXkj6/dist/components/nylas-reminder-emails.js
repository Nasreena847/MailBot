import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug } from './utils.js';
import { d as defineCustomElement$f } from './button-component2.js';
import { d as defineCustomElement$e } from './chevron.js';
import { d as defineCustomElement$d } from './clock.js';
import { d as defineCustomElement$c } from './edit.js';
import { d as defineCustomElement$b } from './info.js';
import { d as defineCustomElement$a } from './input-dropdown2.js';
import { d as defineCustomElement$9 } from './loading.js';
import { d as defineCustomElement$8 } from './nylas-reminder-time2.js';
import { d as defineCustomElement$7 } from './person-clipboard.js';
import { d as defineCustomElement$6 } from './plus.js';
import { d as defineCustomElement$5 } from './search.js';
import { d as defineCustomElement$4 } from './select-dropdown2.js';
import { d as defineCustomElement$3 } from './toolitp-component.js';
import { d as defineCustomElement$2 } from './trash.js';

const nylasReminderEmailsCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.cards-container{margin-bottom:4rem}.cards-container .nylas-reminder-email{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200);text-align:left}.cards-container .nylas-reminder-email .header{padding:1rem;display:grid;grid-template-columns:1fr auto;border-bottom:1px solid var(--nylas-base-200)}.cards-container .nylas-reminder-email .header h3{border-radius:var(--nylas-border-radius-2x);margin:0;font-size:1rem;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.cards-container .nylas-reminder-email .header p{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.cards-container .nylas-reminder-email .header .confirmation-email-toggle{display:flex;gap:24px;align-items:center}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron{display:flex;align-self:center;cursor:pointer}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron:hover,.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron:active{color:var(--nylas-primary)}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron.open{transform:rotate(90deg)}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron.closed{transform:rotate(270deg)}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron.disabled{cursor:not-allowed;color:var(--nylas-base-300)}.cards-container .nylas-reminder-email .header .confirmation-email-toggle .chevron.disabled:hover{color:var(--nylas-base-300)}.cards-container .nylas-reminder-email .nylas-reminder-email__body{display:grid;grid-template-columns:1fr auto;background-color:var(--nylas-base-25);border-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.cards-container .nylas-reminder-email .nylas-reminder-email__body{grid-template-columns:1fr}}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section{padding:1rem;display:flex;flex-direction:column;gap:1rem;color:var(--nylas-base-800)}@media screen and (max-width: 768px){.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section{border:none}}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row{display:grid;grid-template-columns:1fr auto;align-items:center;gap:1rem}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row.full-width-col{grid-template-columns:1fr}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row label{display:flex;align-items:center}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row label span.required{color:var(--nylas-error, #cc4841)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row label span.label-icon{margin-left:4px}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row label span.label-icon tooltip-component{display:flex}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row p{margin:0.25rem 0 0 0;font-size:1rem;font-weight:500;line-height:24px;color:var(--nylas-base-900)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row .company-logo-container{display:flex;gap:32px;width:100%}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row .company-logo-container .input-container{display:flex;flex-direction:column;flex:1}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row .company-logo-container .company-logo{display:flex;justify-content:center;align-items:center;width:200px;height:100px;border:var(--nylas-base-200) solid 1px;border-radius:var(--nylas-border-radius-2x);overflow:hidden;padding:10px}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row .company-logo-container .company-logo img{max-height:100%;max-width:100%;object-fit:contain;object-position:center}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .nylas-reminder-email__row span.selected-value{font-weight:500}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .subsection{display:flex;flex-direction:column;gap:1rem}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .subsection h3{margin:0;font-size:1rem;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .subsection .input-container{display:flex;flex-direction:column;gap:0.25rem}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__section .subsection .input-container textarea{padding:12px 16px;border-width:1;resize:vertical;border-radius:8px;font-family:var(--nylas-font-family);font-size:16px;line-height:24px;border:1px solid var(--nylas-base-200)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview{width:208px;background:var(--nylas-base-25);border-bottom-right-radius:var(--nylas-border-radius-2x)}@media screen and (max-width: 768px){.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview{width:inherit;border-bottom-left-radius:var(--nylas-border-radius-2x)}}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview h4{font-size:14px;line-height:24px;color:var(--nylas-base-600);font-family:var(--nylas-font-family);font-weight:500;text-align:center;margin:0.75rem 0}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container{padding:0 2rem 1rem}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container .slot{background-color:transparent;border-top:1px solid var(--nylas-base-300)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container .slot.active{background-color:var(--nylas-base-100)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container .slot:last-of-type{border-bottom:1px solid var(--nylas-base-300)}.cards-container .nylas-reminder-email .nylas-reminder-email__body .nylas-reminder-email__preview .preview-container .event-slot{background-color:var(--nylas-base-600);border-top:1px solid var(--nylas-base-300)}.cards-container .nylas-reminder-email .nylas-reminder-email__body span.error-message{color:var(--nylas-error)}.cards-container .nylas-reminder-email .nylas-reminder-email__body span.help-text{margin:0.25rem 0 0 0;font-size:0.875rem;font-weight:400;line-height:20px;color:var(--nylas-base-600);text-align:left}.cards-container .nylas-reminder-email .nylas-reminder-email__summary{padding:0.75rem 1rem;display:grid;grid-template-columns:auto 1fr;column-gap:1rem}.cards-container .nylas-reminder-email .nylas-reminder-email__summary p{margin:0;display:flex;align-items:center;column-gap:4px;font-size:0.875rem;font-weight:400;line-height:21px;color:var(--nylas-base-600);text-align:left}.cards-container .nylas-reminder-email .nylas-reminder-email__summary p span.summary-icon{display:flex;justify-content:center;min-width:20px}sp-divider{background-color:var(--nylas-base-200);height:1px;margin:0.25rem 0}button-component.create-reminder button{margin:1rem;width:calc(100% - 2rem)}button-component.delete-btn button{color:var(--nylas-error) !important}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasReminderEmails$1 = proxyCustomElement(class NylasReminderEmails extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChanged = createEvent(this, "valueChanged", 7);
        this.internals = this.attachInternals();
        this.eventReminders = [];
        this.participants = [];
        this.name = 'reminder-overrides';
        this.reminders = this.eventReminders ?? [];
        this.reminderErrors = {};
        this.editingReminderIndex = null;
    }
    connectedCallback() {
        debug('nylas-reminder-emails', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-reminder-emails', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-reminder-emails', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-reminder-emails', 'componentDidLoad');
        this.updateRemindersFormValue();
    }
    componentWillUpdate() {
        debug('nylas-reminder-emails', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-reminder-emails', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-reminder-emails', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-reminder-emails', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-reminder-emails', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    handleValueChanged(event) {
        debug('nylas-reminder-emails', 'handleValueChanged', event);
        const { name, value } = event.detail;
        if (name.startsWith('reminder-time-')) {
            const [_, reminderIndex] = name.split(/(\d+)/);
            const updatedReminders = [...this.reminders];
            updatedReminders[reminderIndex].reminder_minutes = parseInt(value);
            this.internals.setFormValue(JSON.stringify(updatedReminders), `reminder-overrides`);
            this.valueChanged.emit({ value: JSON.stringify(updatedReminders), name: `reminder-overrides` });
        }
    }
    addReminder() {
        debug('nylas-reminder-emails', 'addReminder');
        this.reminders = [
            ...this.reminders,
            {
                reminder_method: 'email',
                reminder_minutes: 30,
            },
        ];
        this.editingReminderIndex = this.reminders.length - 1;
        this.updateRemindersFormValue();
    }
    deleteReminder(index) {
        this.reminders.splice(index, 1);
        this.editingReminderIndex = null;
        this.updateRemindersFormValue();
    }
    updateRemindersFormValue() {
        debug('nylas-reminder-emails', 'updateRemindersFormValue');
        this.internals.setFormValue(JSON.stringify(this.reminders), 'reminder-overrides');
        this.valueChanged.emit({ value: JSON.stringify(this.reminders), name: 'reminder-overrides' });
    }
    formatReminderTime(reminderTime) {
        switch (true) {
            case reminderTime > 24 * 60:
                return `${reminderTime / 60 / 24} days`;
            case reminderTime === 24 * 60:
                return '1 day';
            case reminderTime > 90 || reminderTime === 60:
                return `${reminderTime / 60} hours`;
            default:
                return `${reminderTime} minute${reminderTime > 1 ? 's' : ''} `;
        }
    }
    render() {
        const organizerName = this.participants.find(p => p.is_organizer)?.name;
        return (h(Host, { key: 'ab55690228cfba67a2efeec1e9d899ac254e6830' }, h("div", { key: '5f73b959d33a1b9e8bb2d498d4275c52e0db68a9', class: "cards-container" }, this.reminders.map((reminder, index) => {
            return (h("div", { class: "nylas-reminder-email", part: "nre" }, h("div", { class: "header", part: "nre__header" }, h("div", null, h("h3", null, "Upcoming meeting", organizerName ? ` with ${organizerName} ` : ''), h("p", null, "Reminder before event")), this.editingReminderIndex !== index ? (h("button-component", { variant: 'basic', key: `edit-${index} `, clickHandler: event => {
                    event.preventDefault();
                    this.editingReminderIndex = index;
                } }, h("edit-icon", { width: "16", height: "16" }), "Edit")) : (h("button-component", { variant: 'basic', class: "delete-btn", key: `delete -${index} `, clickHandler: event => {
                    event.preventDefault();
                    this.deleteReminder(index);
                } }, h("trash-icon", { width: "16", height: "16" })))), this.editingReminderIndex === index ? (h("div", { class: "nylas-reminder-email__body", part: "nre__body" }, h("div", { class: "nylas-reminder-email__section" }, h("div", { class: "nylas-reminder-email__row" }, h("label", null, "Send confirmation email when", h("span", { class: "label-icon" }, h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, "You and your guests will receive a confirmation immediately after your booking is set up.")))), h("nylas-reminder-time", { name: `reminder-time-${index}`, eventReminderTimeMinutes: reminder.reminder_minutes, exportparts: "nrt, nrt__input_dropdown: nre__reminder-input_dropdown,\n                          nrt__input_dropdown-input: nre__reminder-input_dropdown-input,\n                          nrt__input_dropdown-content: nre__reminder-input_dropdown-content,\n                          " }))))) : (h("div", { class: "nylas-reminder-email__summary", part: "nre__summary" }, h("p", null, h("span", { class: "summary-icon" }, h("person-clipboard-icon", null)), "All host & guests"), h("p", null, h("span", { class: "summary-icon" }, h("clock-icon", null)), this.formatReminderTime(reminder.reminder_minutes), " before the event")))));
        })), h("button-component", { key: 'ddae28a87961fba5adb5d277f481eed232fda9e7', class: "create-reminder", variant: 'basic', clickHandler: event => {
                event.preventDefault();
                this.addReminder();
            } }, h("plus-icon", { key: 'f04020b8af5545c51af40108cf32aaba5c67ea4c', width: "16", height: "16" }), "New reminder")));
    }
    static get formAssociated() { return true; }
    get host() { return this; }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"]
    }; }
    static get style() { return nylasReminderEmailsCss; }
}, [65, "nylas-reminder-emails", {
        "eventReminders": [16],
        "participants": [16],
        "name": [1],
        "reminders": [32],
        "reminderErrors": [32],
        "editingReminderIndex": [32]
    }, [[0, "valueChanged", "handleValueChanged"]], {
        "name": ["elementNameChangedHandler"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-reminder-emails',
        stateToProps: new Map([['schedulerConfig.eventReminders', 'reminders']]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasReminderEmails$1.prototype, "render", null);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-reminder-emails", "button-component", "chevron-icon", "clock-icon", "edit-icon", "info-icon", "input-dropdown", "loading-icon", "nylas-reminder-time", "person-clipboard-icon", "plus-icon", "search-icon", "select-dropdown", "tooltip-component", "trash-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-reminder-emails":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasReminderEmails$1);
            }
            break;
        case "button-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$f();
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "clock-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "edit-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "info-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "input-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "loading-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "nylas-reminder-time":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "person-clipboard-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "plus-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "search-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "select-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "tooltip-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "trash-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const NylasReminderEmails = NylasReminderEmails$1;
const defineCustomElement = defineCustomElement$1;

export { NylasReminderEmails, defineCustomElement };

//# sourceMappingURL=nylas-reminder-emails.js.map