import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug, n as instance, o as capitalizeFirstLetter } from './utils.js';
import { T as TIMEZONE_MAP, L as LANGUAGE_CODE_MAP } from './constants.js';
import { d as defineCustomElement$5 } from './button-component2.js';
import { d as defineCustomElement$4 } from './calendar-check.js';
import { d as defineCustomElement$3 } from './checkmark-circle.js';
import { d as defineCustomElement$2 } from './globe.js';
import { d as defineCustomElement$1 } from './loading.js';

const nylasBookedEventCardCss = ":host{display:block}.nylas-booked-event-card{height:inherit;display:flex;flex-direction:column;justify-content:space-between;align-items:center;font-family:var(--nylas-font-family)}.event-card-wrapper{display:flex;align-items:center;flex-direction:column;background-color:var(--nylas-base-0);color:var(--nylas-base-900);border-radius:var(--nylas-border-radius-3x);position:relative;margin-top:1rem;margin-bottom:2rem;width:424px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.06)}@media screen and (max-width: 768px){.event-card-wrapper{width:100%;border-radius:0px}}.calendar-icon{display:flex;align-items:center;justify-content:center;width:3rem;height:3rem;border-radius:50%;position:absolute;top:-1.25rem;left:50%;transform:translateX(-50%);background-color:var(--nylas-base-0);border:1px solid var(--nylas-base-200);color:var(--nylas-base-700)}.booked-event-header{margin:1.5rem 0;overflow-wrap:anywhere;display:flex;align-items:center;flex-direction:column;font-size:1rem;font-weight:400;border-bottom:1px solid var(--nylas-base-200);width:inherit;padding:0 0 1.5rem}.booked-event-header h2{color:var(--nylas-base-600);margin-top:1.5rem;margin-bottom:0.25rem;font-size:1.125rem;font-weight:600}.booked-event-header .card-description{text-align:center}.booking-date-time,.booking-participants{padding:0 1rem;margin-top:1.5rem;margin-left:3rem;display:flex;flex-direction:column;justify-content:space-between;align-self:flex-start;position:relative}.booking-date-time svg,.booking-participants svg{color:var(--nylas-base-700);position:absolute;left:-10px}.booking-date-time .block,.booking-participants .block{display:block}.booking-date-time h3,.booking-participants h3{color:var(--nylas-base-600);margin:0;font-size:16px;font-weight:600;line-height:1.25rem;text-align:justify;margin-bottom:4px}.booking-date-time p,.booking-participants p{font-size:16px;margin:0;font-weight:400;text-align:justify;color:var(--nylas-base-800)}.booking-participants{margin-bottom:1.5rem}.booked-event-timezone{display:flex;color:var(--nylas-base-600);margin-bottom:1.5rem;gap:4px;margin:2rem;align-items:center;align-self:flex-end}.button-container{width:inherit}.footer{padding:0.5rem;display:grid;grid-template-columns:1fr 1fr;gap:0.5rem;box-sizing:border-box;background-color:var(--nylas-base-25);border-top:1px solid var(--nylas-base-200);width:100%;border-radius:0 0 var(--nylas-border-radius-2x) var(--nylas-border-radius-2x)}.footer.no-template-cols{grid-template-columns:1fr}.footer.no-footer{display:none}sp-divider{background-color:var(--nylas-base-200);height:1px}calendar-check-icon{display:flex;align-items:center;justify-content:center;height:100%}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookedEventCard = proxyCustomElement(class NylasBookedEventCard extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.cancelBookingButtonClicked = createEvent(this, "cancelBookingButtonClicked", 7);
        this.rescheduleButtonClicked = createEvent(this, "rescheduleButtonClicked", 7);
        this.rescheduleBookedEventError = createEvent(this, "rescheduleBookedEventError", 7);
        this.cancelBookedEventValidationError = createEvent(this, "cancelBookedEventValidationError", 7);
        this.handleCancelBookingButtonClicked = () => {
            const startTime = new Date(this.selectedTimeslot.start_time);
            const minCancellationNotice = this.configSettings?.scheduler?.min_cancellation_notice;
            const dateTillCancellation = startTime.getTime() - minCancellationNotice * 60 * 1000;
            if (dateTillCancellation < new Date().getTime()) {
                this.cancelBookedEventValidationError.emit({
                    error: {
                        title: 'Cancellation Error',
                        message: `You cannot cancel the booking within ${minCancellationNotice} minutes of the event.`,
                    },
                });
            }
            else {
                this.cancelBookingButtonClicked.emit({ bookingId: this.eventInfo.booking_id });
            }
        };
        this.handleRescheduleButtonClicked = () => {
            const errorHandler = (error) => {
                this.rescheduleBookedEventError.emit(error);
            };
            this.rescheduleButtonClicked.emit({ bookingId: this.eventInfo.booking_id, errorHandler });
        };
        this.getPaticipantType = (type) => {
            switch (type) {
                case 'host':
                    return 'Host';
                case 'you':
                    return 'You';
                default:
                    return '';
            }
        };
        this.eventInfo = undefined;
        this.rescheduleBookingId = undefined;
        this.bookingInfo = undefined;
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedTimeslot = undefined;
        this.configSettings = undefined;
        this.isLoading = undefined;
        this.selectedLanguage = navigator.language;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    async componentWillLoad() {
        debug(`[nylas-booked-event-card] Component will load`);
    }
    async componentDidLoad() {
        debug(`[nylas-booked-event-card] Component did load`);
        if (!this.eventInfo) {
            console.warn('[nylas-booked-event-card] "eventInfo" prop missing. Please provide the event info to display the event details in the booked event card component.');
        }
        if (!this.bookingInfo) {
            console.warn('[nylas-booked-event-card] "bookingInfo" prop missing. Please provide the booking info to display the guest details in the booked event card component.');
        }
    }
    render() {
        const bookingType = this.configSettings?.booking_type;
        const isManualConfirmation = bookingType && bookingType !== 'booking';
        return (h(Host, { key: '6780a2a0b1c59efc4311278e85e6800f72ab6a98', part: "nbec" }, h("div", { key: 'eed7c01aaaca8c92a65beccac1242efe1194f4a3', class: "nylas-booked-event-card" }, h("div", { key: 'f20609db6794c30012f299017b01bf63752b6b7f', class: "booked-event-timezone" }, h("globe-icon", { key: 'e2f277abf894b2c34e32f4cec4309e81a1b6e19b' }), TIMEZONE_MAP[this.selectedTimezone]), h("div", { key: '84c8bcdc7f247eade07d502cd480430cfb2894fd', class: "event-card-wrapper", part: "nbec__card" }, h("div", { key: '58835f4e2b261dff59e212573a2391cac9217cb6', class: "calendar-icon" }, h("calendar-check-icon", { key: '53e406d85941c03c7d0c7c5e86e071f948fe85bd' })), h("div", { key: '0e16b5cabfe5afcea5fd15fefbf88ed2558c5492', class: "booked-event-header" }, h("h2", { key: '8ad08c13c5860cf47b217cc9c6d82dddb0940894', slot: "card-title", part: "nbec__title" }, !!this.rescheduleBookingId && !this.isLoading
            ? `${instance.t('bookingRescheduled')}`
            : isManualConfirmation && !this.isLoading
                ? `${instance.t('bookingSent')}`
                : `${instance.t('bookingConfirmed')}`, "!"), h("div", { key: '07a056ef47e7d3c173c7ad67acedc5b94748d28f', class: "card-description", part: "nbec__description" }, isManualConfirmation ? instance.t('bookingSentDescription') : h("span", null, instance.t('bookingConfirmedDescription')))), h("div", { key: '4d4f43295cef324b63b3d5fa6f3476dcf3163d25', class: "booking-date-time" }, h("checkmark-circle-icon", { key: '2c717204ed669e40898c8b23dd408e3c62608e8f' }), h("h3", { key: '1a2ec41f82e740d9bdbac8fe1a818454e402db2f' }, instance.t('bookingDateAndTimeHeader')), h("p", { key: '1451ecae33ccfbe9f0bc4b682d90a64313f1120c' }, this.selectedTimeslot?.start_time
            ? capitalizeFirstLetter(new Date(this.selectedTimeslot?.start_time).toLocaleDateString(LANGUAGE_CODE_MAP[this.selectedLanguage], { dateStyle: 'full' }))
            : '-', ' ', h("br", { key: 'df6922d0097f6d3aa7b17dee26a7903e89c9258c' }), new Date(this.selectedTimeslot?.start_time).toLocaleTimeString(undefined, { timeStyle: 'short' }), " -", ' ', new Date(this.selectedTimeslot?.end_time).toLocaleTimeString(undefined, { timeStyle: 'short' }))), h("div", { key: '6e4264737dc50225feeec5374a6bec91de77a0ea', class: "booking-participants" }), !isManualConfirmation && (h("div", { class: "button-container" }, h("div", { class: {
                'footer': true,
                'no-footer': (this.configSettings?.scheduler?.hide_cancellation_options && this.configSettings?.scheduler?.hide_rescheduling_options) ||
                    this.configSettings?.booking_type === 'organizer-confirmation',
                'no-template-cols': this.configSettings?.scheduler?.hide_cancellation_options || this.configSettings?.scheduler?.hide_rescheduling_options,
            } }, !this.configSettings?.scheduler?.hide_cancellation_options && (h("button-component", { variant: 'destructive', onClick: this.handleCancelBookingButtonClicked, part: "nbec__button-outline nbec__cancel-cta" }, `${instance.t('cancelBookingButton')}`)), !this.configSettings?.scheduler?.hide_rescheduling_options && (h("button-component", { variant: 'basic', onClick: this.handleRescheduleButtonClicked, part: "nbec__button-outline nbec__reschedule-cta" }, `${instance.t('rescheduleBookingButton')}`)))))))));
    }
    static get style() { return nylasBookedEventCardCss; }
}, [1, "nylas-booked-event-card", {
        "eventInfo": [16],
        "rescheduleBookingId": [1, "reschedule-booking-id"],
        "bookingInfo": [8, "booking-info"],
        "selectedTimezone": [1, "selected-timezone"],
        "selectedTimeslot": [16],
        "configSettings": [8, "config-settings"],
        "isLoading": [4, "is-loading"],
        "selectedLanguage": [1, "selected-language"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-booked-event-card',
        stateToProps: new Map([
            ['scheduler.bookingInfo', 'bookingInfo'],
            ['scheduler.rescheduleBookingId', 'rescheduleBookingId'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
            ['scheduler.selectedTimeslot', 'selectedTimeslot'],
            ['scheduler.isLoading', 'isLoading'],
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.configSettings', 'configSettings'],
        ]),
        eventToProps: {
            cancelBookingButtonClicked: async (event, nylasSchedulerConnector) => {
                nylasSchedulerConnector.scheduler.setCancel(event.detail.bookingId);
            },
            rescheduleButtonClicked: async (event, nylasSchedulerConnector) => {
                const result = await nylasSchedulerConnector.scheduler.setReschedule(event.detail.bookingId);
                const { errorHandler } = event.detail;
                if (errorHandler && (!result || 'error' in result)) {
                    errorHandler(result);
                }
            },
            rescheduleBookedEventError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booked-event-card', 'rescheduleBookedEventError', event.detail);
            },
            cancelBookedEventValidationError: async (event, _nylasSchedulerConnector) => {
                debug('nylas-booked-event-card', 'cancelBookedEventValidationError', event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookedEventCard.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-booked-event-card", "button-component", "calendar-check-icon", "checkmark-circle-icon", "globe-icon", "loading-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-booked-event-card":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasBookedEventCard);
            }
            break;
        case "button-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "calendar-check-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "checkmark-circle-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "globe-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "loading-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasBookedEventCard as N, defineCustomElement as d };

//# sourceMappingURL=nylas-booked-event-card2.js.map