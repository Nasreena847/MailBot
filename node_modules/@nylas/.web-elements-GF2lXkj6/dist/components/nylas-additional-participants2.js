import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug } from './utils.js';
import { d as defineCustomElement$7 } from './add-circle.js';
import { d as defineCustomElement$6 } from './close.js';
import { d as defineCustomElement$5 } from './info.js';
import { d as defineCustomElement$4 } from './input-component2.js';
import { d as defineCustomElement$3 } from './input-dropdown2.js';
import { d as defineCustomElement$2 } from './nylas-form-card2.js';
import { d as defineCustomElement$1 } from './toolitp-component.js';

const nylasAdditionalParticipantsCss = ":host{display:block;margin:1rem;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-additional-participants__title{color:var(--nylas-base-nylas-base-900-aaa, #101323);font-size:16px;font-style:normal;font-weight:600;line-height:20px;margin:0;text-align:left}.nylas-additional-participants__subtitle{color:var(--nylas-base-600);font-size:14px;font-style:normal;font-weight:400;line-height:20px;margin:0.25rem 0px 0px;text-align:left}.nylas-additional-participants__content{padding:1rem;display:flex;flex-direction:column;gap:1rem}.nylas-additional-participants__input_group{padding-top:8px;display:flex;flex-direction:column;gap:4px}.nylas-additional-participants__input_group label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:14px;font-style:normal;font-weight:400;line-height:150%}.nylas-additional-participants__error{color:var(--nylas-error);font-size:14px;font-family:var(--nylas-font-family);font-weight:400;line-height:16px;margin:0;text-align:left}.nylas-additional-participants__input_wrapper{display:flex;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-300)}.nylas-additional-participants__input_wrapper.error{border-color:var(--nylas-error)}.nylas-additional-participants__input_wrapper button{padding:12px;border:none;border-left:1px solid var(--nylas-base-300);background:none;cursor:pointer}.nylas-additional-participants__input_wrapper button:hover,.nylas-additional-participants__input_wrapper button:active{color:var(--nylas-primary)}.nylas-additional-participants__input_wrapper_organizer{border:none}.nylas-additional-participants__input{flex:1;display:flex;justify-content:space-between}.nylas-additional-participants__input input{border:none;outline:none;background:none;width:100%}.nylas-additional-participants__input input-dropdown{width:100%}.nylas-additional-participants__input input-dropdown::part(id_dropdown){width:100%;height:100%}.nylas-additional-participants__input input-dropdown::part(id_dropdown-input){height:100%;border-radius:var(--nylas-border-radius-2x);border:none;border-top-right-radius:initial;border-bottom-right-radius:initial;padding-left:16px}.nylas-additional-participants__input input-component::part(ic__input){background:var(--nylas-base-50)}.nylas-additional-participants__input input-component::part(ic__label){font-size:14px}.nylas-additional-participants__input input-component div.required-input{display:flex;gap:4px}.nylas-additional-participants__input input-component div.required-input label{display:flex;gap:4px;align-items:center}.nylas-additional-participants__input input-component div.required-input label tooltip-component#organizer_participant_tooltip::part(tc__content){left:-84px}.nylas-additional-participants__add{padding:12px;display:flex;align-items:center;border:none;background:none;cursor:pointer}.nylas-additional-participants__add span{padding:0 8px;font-size:16px;font-style:normal;font-weight:500}.nylas-additional-participants__add:hover,.nylas-additional-participants__add:active{color:var(--nylas-primary)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasAdditionalParticipants = proxyCustomElement(class NylasAdditionalParticipants extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChanged = createEvent(this, "valueChanged", 7);
        this.internals = this.attachInternals();
        this.selectedConfiguration = undefined;
        this.currentUser = undefined;
        this.name = 'participants';
        this.eventParticipants = undefined;
        this.participantOptions = undefined;
        this.participants = this.eventParticipants ?? [];
        this.participantErrors = {};
        this.includeOrganizerAsParticipant = true;
        this.isRoundRobinConfig = this.selectedConfiguration?.availability?.availability_rules?.availability_method !== 'collective';
        this.error = '';
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-additional-participants', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-additional-participants', 'selectedConfigurationChangedHandler', newValue);
        this.isRoundRobinConfig = newValue?.availability?.availability_rules?.availability_method !== 'collective';
        this.participants = newValue?.participants || [];
        this.updateFormValue();
    }
    connectedCallback() {
        debug('nylas-additional-participants', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-additional-participants', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-additional-participants', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        this.isRoundRobinConfig = this.selectedConfiguration?.availability?.availability_rules?.availability_method !== 'collective';
        this.includeOrganizerAsParticipant = this.isRoundRobinConfig && this.participants.find(p => p.email === this.currentUser?.email) ? true : false;
        const findCurrentUserInParticipants = this.participants.find(p => p.email === this.currentUser?.email);
        if (this.isRoundRobinConfig && !findCurrentUserInParticipants && this.currentUser?.email) {
            this.participants = [
                {
                    name: this.currentUser?.name,
                    email: this.currentUser?.email,
                    is_organizer: true,
                    availability: {
                        calendar_ids: ['primary'],
                    },
                    booking: {
                        calendar_id: 'primary',
                    },
                },
                ...this.participants,
            ];
        }
        this.updateFormValue();
    }
    disconnectedCallback() {
        debug('nylas-additional-participants', 'disconnectedCallback');
    }
    onInputOptionChanged(event) {
        debug('nylas-additional-participants', 'onInputOptionChanged');
        const EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
        const index = event.detail.name;
        const participant = this.participantOptions?.find(participant => participant.email === event.detail.value);
        if (!participant && this.isRoundRobinConfig) {
            this.internals.setValidity({ customError: true }, 'For round robin configuration, participant should be selected from the dropdown.');
            this.participantErrors[index] = 'For round robin page, participant should be selected from the dropdown.';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else if (!participant && !EMAIL_REGEX.test(event.detail.value)) {
            this.internals.setValidity({ customError: true }, 'Please enter a valid email address');
            this.participantErrors[index] = 'Please enter a valid email address';
            this.participants[index].is_valid = false;
            this.participants = [...this.participants];
            return;
        }
        else {
            this.participantErrors[index] = '';
            this.participants[index].is_valid = true;
            this.internals.setValidity({});
        }
        this.participants[index].email = event.detail.value;
        this.participants[index].availability = participant ? { calendar_ids: ['primary'] } : undefined;
        this.participants[index].booking = participant && this.isRoundRobinConfig ? { calendar_id: 'primary' } : undefined;
        this.participants[index].name = participant?.name || event.detail.value;
        this.participants = [...this.participants];
        this.updateFormValue();
    }
    addParticipant() {
        debug('nylas-additional-participants', 'addParticipant');
        this.participants = [...this.participants, { name: '', email: '', is_organizer: false }];
        this.updateFormValue();
    }
    removeParticipant(index) {
        debug('nylas-additional-participants', 'removeParticipant');
        this.participants = this.participants.filter((_, i) => i !== index);
        this.updateFormValue();
    }
    validate(email, index) {
        debug('nylas-additional-participants', 'validate');
        const regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        const valid = regex.test(String(email).toLowerCase());
        this.participants[index].is_valid = valid;
        this.updateFormValue();
    }
    updateFormValue() {
        debug('nylas-additional-participants', 'updateFormValue');
        const participants = this.isRoundRobinConfig ? (this.includeOrganizerAsParticipant ? this.participants : this.participants.filter(p => !p.is_organizer)) : this.participants;
        if (participants.length === 0) {
            this.internals.setValidity({ customError: true }, 'Please add at least one participant');
            this.error = 'Please add at least one participant';
        }
        else {
            this.internals.setValidity({});
            this.error = '';
            this.internals.setFormValue(JSON.stringify(participants), this.name);
            this.valueChanged.emit({ value: JSON.stringify(participants), name: this.name });
        }
    }
    getArrayDifference(array1, array2) {
        const filtered = array1.filter(participant1 => !array2.some(participant2 => participant1.email === participant2.email));
        return filtered.map(participant => {
            return { value: participant.email, label: participant.email };
        });
    }
    render() {
        return (h(Host, { key: 'a2bbfba14ad90e33195b589eb5eeb42d618ad5b9' }, h("nylas-form-card", { key: '4bcf48db9a06f4b9de378cb166deaa6cdea5daf3' }, h("h3", { key: 'a0bb800ed80de34002ccc11f793e6e121224d59b', slot: "header-title", class: "nylas-additional-participants__title", part: "nap__title" }, "Participants"), h("p", { key: '96dd051bf51945429463c1a972cf3ac19ccec4a5', slot: "header-subtitle", class: "nylas-additional-participants__subtitle", part: "nap__subtitle" }, "Add people in your team or organization to join the event."), h("div", { key: 'edcac76acc4d528af421b9c7b79535ee73491309', slot: "content", class: "nylas-additional-participants__content" }, h("div", { key: 'b58c930590957d693487f84538ef8168ad1d7116' }, this.participants.map((participant, index) => {
            return (h("div", { class: 'nylas-additional-participants__input_group', part: "nap__input_group" }, !participant.is_organizer && h("label", null, `Participant ${index}`), h("div", { part: "nap__input_wrapper", class: {
                    'nylas-additional-participants__input_wrapper': true,
                    'nylas-additional-participants__input_wrapper_organizer': participant?.is_organizer === true,
                    'nylas-additional-participants__input_wrapper_invalid': participant.is_valid === false,
                    'error': participant.is_valid === false,
                } }, h("div", { class: { 'nylas-additional-participants__input': true, 'organizer': participant?.is_organizer === true }, part: "nap__input" }, participant.is_organizer ? (h("input-component", { class: 'label-input', name: `${index}`, key: index, label: "Organizer", required: false, readOnly: participant.is_organizer, defaultValue: participant.email }, this.isRoundRobinConfig && (h("div", { class: "required-input", slot: "additional-input" }, h("input", { type: "checkbox", name: `organizer_participant`, id: `organizer_participant`, onClick: () => {
                    this.includeOrganizerAsParticipant = !this.includeOrganizerAsParticipant;
                    this.updateFormValue();
                }, checked: this.includeOrganizerAsParticipant }), h("label", { htmlFor: `organizer_participant`, "aria-label": "Include as participant" }, "Participant", h("tooltip-component", { id: "organizer_participant_tooltip" }, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, h("strong", null, "Include Organizer:"), " The organizer (you) will be included in the round-robin rotation. ", h("br", null), h("strong", null, "Exclude Organizer:"), " The organizer (you) will not be included in the round-robin rotation."))))))) : (h("input-dropdown", { id: `${index}`, name: `${index}`, filterable: true, inputValue: participant.email, options: this.getArrayDifference(this.participantOptions || [], this.participants) })), !participant.is_organizer && (h("button", { onClick: () => this.removeParticipant(index), part: "nap__remove-participant" }, h("close-icon", null))))), !participant.is_valid && (h("p", { class: "nylas-additional-participants__error", part: "nap__error" }, this.participantErrors[index]))));
        }), h("p", { key: '1da630e1017918c0a32c53a4e0b2056772b34137', class: "nylas-additional-participants__error", part: "nap__error" }, this.error)), h("button", { key: '25cef209be2f07043e268e9d7dc6d70dcdaa305e', class: "nylas-additional-participants__add", part: "nap__add-participant", onClick: () => this.addParticipant() }, h("add-circle-icon", { key: 'bd62c68f4566e87110d1f64e723a83163c352ec3' }), " ", h("span", { key: '1a9d6bd9bbbb1a90bd634210d8faff896aeba290' }, "Add ", this.participants.length > 1 ? 'another' : 'a', " participant"))))));
    }
    static get formAssociated() { return true; }
    get host() { return this; }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
    static get style() { return nylasAdditionalParticipantsCss; }
}, [65, "nylas-additional-participants", {
        "selectedConfiguration": [16],
        "currentUser": [16],
        "name": [1],
        "eventParticipants": [16],
        "participantOptions": [16],
        "participants": [32],
        "participantErrors": [32],
        "includeOrganizerAsParticipant": [32],
        "isRoundRobinConfig": [32],
        "error": [32]
    }, [[0, "inputOptionChanged", "onInputOptionChanged"]], {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-additional-participants',
        stateToProps: new Map([
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.currentUser', 'currentUser'],
        ]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasAdditionalParticipants.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-additional-participants", "add-circle-icon", "close-icon", "info-icon", "input-component", "input-dropdown", "nylas-form-card", "tooltip-component"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-additional-participants":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasAdditionalParticipants);
            }
            break;
        case "add-circle-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "close-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "info-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "input-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "input-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "nylas-form-card":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "tooltip-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasAdditionalParticipants as N, defineCustomElement as d };

//# sourceMappingURL=nylas-additional-participants2.js.map