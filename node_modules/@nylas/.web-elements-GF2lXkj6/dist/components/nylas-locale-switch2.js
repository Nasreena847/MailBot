import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { g as getTimezoneOffset, T as TIMEZONE_MAP, b as LANGUAGE_MAP } from './constants.js';
import { R as RegisterComponent } from './register-component.js';
import { a as debug } from './utils.js';
import { d as defineCustomElement$5 } from './chevron.js';
import { d as defineCustomElement$4 } from './globe.js';
import { d as defineCustomElement$3 } from './search.js';
import { d as defineCustomElement$2 } from './select-dropdown2.js';
import { d as defineCustomElement$1 } from './translate.js';

const nylasLocaleSwitchCss = ":host{display:block}.nylas-locale-switch{display:flex;flex-direction:row;justify-content:space-between;align-items:center;border-left:none;border-right:none;color:var(--nylas-base-50);font-size:14px;font-weight:600;cursor:pointer;transition:all 0.2s ease-in-out;font-family:inherit}@media screen and (max-width: 768px){.nylas-locale-switch{font-size:16px}}.select-wrapper{display:flex;align-items:center;gap:0.5rem}select{border:none;background:transparent;cursor:pointer;outline:none;background-color:transparent;margin:0 0 1px;padding:4px;vertical-align:middle}select#timezone{width:140px}select#language{width:80px}span.timezone-label{display:flex;width:-webkit-fill-available;justify-content:space-between}select-dropdown{width:auto}select-dropdown::part(sd_dropdown-button){border:none;padding:10px}select-dropdown::part(sd_dropdown-content){max-width:306px}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasLocaleSwitch = proxyCustomElement(class NylasLocaleSwitch extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.timezoneChanged = createEvent(this, "timezoneChanged", 7);
        this.languageChanged = createEvent(this, "languageChanged", 7);
        this.selectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.selectedLanguage = navigator.language;
    }
    connectedCallback() { }
    disconnectedCallback() { }
    componentWillLoad() { }
    changeTimezone(timezone) {
        this.selectedTimezone = timezone;
        this.timezoneChanged.emit(timezone);
    }
    changeLanguage(language) {
        this.selectedLanguage = language;
        this.languageChanged.emit(language);
    }
    nylasFormDropdownChangedHandler(event) {
        const { name, value } = event.detail;
        if (name === 'timezone') {
            this.changeTimezone(value);
        }
        else if (name === 'language') {
            this.changeLanguage(value);
        }
    }
    getTimezoneLabelHTML(timezone) {
        const offset = getTimezoneOffset(timezone);
        return (h("span", { class: "timezone-label", style: {
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                width: '-webkit-fill-available',
            } }, TIMEZONE_MAP[timezone], ' ', h("span", { class: "timezone-offset", style: {
                fontSize: '14px',
                fontWeight: '400',
                color: 'var(--nylas-base-500)',
            } }, offset)));
    }
    render() {
        const timezoneOptions = Object.keys(TIMEZONE_MAP).map(key => ({
            labelHTML: this.getTimezoneLabelHTML(key),
            label: TIMEZONE_MAP[key],
            value: key,
        }));
        const languageOptions = Object.keys(LANGUAGE_MAP).map(key => ({
            label: LANGUAGE_MAP[key],
            value: key,
        }));
        return (h(Host, { key: '8e8ec3819083fb25cb8620f14aa1f140a995ec89' }, h("div", { key: '45aaebcd9f80d54dc01b5d611094fa05225c8331', class: "nylas-locale-switch", part: "nls" }, h("div", { key: '47d8166b91a3ef742b14e5783338c3701be85eb7', class: {
                'select-wrapper': true,
                'timezone': true,
            }, part: "nls__timezone" }, h("select-dropdown", { key: '71edd2352b6067a18b9ba676495e59c954e6c07d', name: "timezone", options: timezoneOptions, defaultSelectedOption: timezoneOptions.find(op => op.value == this.selectedTimezone), exportparts: "sd_dropdown: nls__timezone-dropdown, sd_dropdown-button: nls__timezone-drop-button, sd_dropdown-button-selected-label: nls__timezone-drop-button-selected-label, sd_dropdown-content: nls__timezone-drop-content, sd_dropdown_label: nls__timezone-drop-label" }, h("span", { key: 'f48e3c11a1981e32b75f5425570db0b584db7f51', slot: "select-icon" }, h("globe-icon", { key: '6b6721c8d88d715dbcb52d2e2750c22015ac252c', width: "20", height: "20" })))), h("div", { key: 'fe652536d637774336cad11a65bba7bfd8636972', class: {
                'select-wrapper': true,
                'language': true,
            }, part: "nls__language" }, h("select-dropdown", { key: 'f83f8dbf84878fb1670d4a6f59b045c111420ce1', name: "language", options: languageOptions, defaultSelectedOption: languageOptions.find(lang => lang.value == this.selectedLanguage), exportparts: "sd_dropdown: nls__language-dropdown, sd_dropdown-button: nls__language-drop-button, sd_dropdown-content: nls__language-drop-content, sd_dropdown_label: nls__language-drop-label" }, h("span", { key: '3d66833265053e81c9333b5d36ae822ed3a17878', slot: "select-icon" }, h("translate-icon", { key: '30121c5733873930e7e1e3bdaedf11bd2f258139', width: "20", height: "20" })))))));
    }
    static get style() { return nylasLocaleSwitchCss; }
}, [1, "nylas-locale-switch", {
        "selectedTimezone": [1025, "selected-timezone"],
        "selectedLanguage": [1025, "selected-language"]
    }, [[0, "nylasFormDropdownChanged", "nylasFormDropdownChangedHandler"]]]);
__decorate([
    RegisterComponent({
        name: 'nylas-locale-switch',
        stateToProps: new Map([
            ['scheduler.selectedLanguage', 'selectedLanguage'],
            ['scheduler.selectedTimezone', 'selectedTimezone'],
        ]),
        eventToProps: {
            timezoneChanged: async (event, nylasSchedulerConnector) => {
                debug('nylas-locale-switch', 'timezoneChanged', event.detail);
                nylasSchedulerConnector.scheduler.selectTimezone(event.detail);
            },
            languageChanged: async (event, nylasSchedulerConnector) => {
                debug('nylas-locale-switch', 'languageChanged', event.detail);
                nylasSchedulerConnector.scheduler.selectLanguage(event.detail);
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasLocaleSwitch.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-locale-switch", "chevron-icon", "globe-icon", "search-icon", "select-dropdown", "translate-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-locale-switch":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasLocaleSwitch);
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "globe-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "search-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "select-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "translate-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasLocaleSwitch as N, defineCustomElement as d };

//# sourceMappingURL=nylas-locale-switch2.js.map