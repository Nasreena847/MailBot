import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug } from './utils.js';
import { d as defineCustomElement$6 } from './chevron.js';
import { d as defineCustomElement$5 } from './info.js';
import { d as defineCustomElement$4 } from './input-component2.js';
import { d as defineCustomElement$3 } from './search.js';
import { d as defineCustomElement$2 } from './select-dropdown2.js';
import { d as defineCustomElement$1 } from './toolitp-component.js';

const nylasSchedulingMethodCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-scheduling-method{width:inherit;display:flex;flex-direction:column;margin:1rem;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-200)}.nylas-scheduling-method .header{padding:1rem;border-bottom:1px solid var(--nylas-base-200)}.nylas-scheduling-method .header h3{margin:0;font-size:1rem;font-weight:600;line-height:20px;color:var(--nylas-base-900);text-align:left}.nylas-scheduling-method .nylas-scheduling-method__dropdown{padding:1rem;display:flex;flex-direction:column;gap:4px}.nylas-scheduling-method .nylas-scheduling-method__dropdown span.nylas-scheduling-method__dropdown-label{display:flex;align-items:center;gap:4px;color:var(--nylas-base-800);margin:0.25rem 0 0 0;font-size:14px;font-weight:400;line-height:20px;text-align:left}.nylas-scheduling-method .nylas-scheduling-method__dropdown span.nylas-scheduling-method__dropdown-label tooltip-component{display:flex}.nylas-scheduling-method .nylas-scheduling-method__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-scheduling-method .nylas-scheduling-method__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-scheduling-method .nylas-scheduling-method__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x)}.nylas-scheduling-method .nylas-scheduling-method__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}.nylas-scheduling-method .nylas-scheduling-method__dropdown input-component::part(ic__input){background:var(--nylas-base-50);outline:none;cursor:not-allowed}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasSchedulingMethod = proxyCustomElement(class NylasSchedulingMethod extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChanged = createEvent(this, "valueChanged", 7);
        this.internals = this.attachInternals();
        this.name = 'availability-method';
        this.selectedConfiguration = undefined;
        this.participantOptions = undefined;
        this.readOnly = false;
        this.selectedBookingType = '';
    }
    connectedCallback() {
        debug('nylas-scheduling-method', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-scheduling-method', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-scheduling-method', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-scheduling-method', 'componentDidLoad');
        const bookingtType = this.selectedConfiguration?.availability?.availability_rules?.availability_method?.toString();
        if (bookingtType && typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(bookingtType, 'booking-calendar');
        }
        this.selectedBookingType = bookingtType || 'collective';
        this.valueChanged.emit({ value: this.selectedBookingType, name: this.name });
    }
    componentWillUpdate() {
        debug('nylas-scheduling-method', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-scheduling-method', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-scheduling-method', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-scheduling-method', 'componentDidRender');
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-scheduling-method', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-scheduling-method', 'nylasFormDropdownChangedHandler', event.detail);
        const valueChanged = (event) => {
            const { value } = event.detail;
            if (value) {
                this.selectedBookingType = value;
                this.internals.setFormValue(value, this.name);
            }
        };
        this.valueChanged.emit({ value: event.detail.value, name: this.name, valueChanged });
    }
    render() {
        const bookingTypeOptions = [
            { label: 'Standard booking', value: 'collective' },
            { label: 'Round-robin max fairness', value: 'max-fairness' },
            { label: 'Round-robin max availability', value: 'max-availability' },
        ];
        const defaultBookingType = this.selectedConfiguration?.availability?.availability_rules?.availability_method?.toString();
        const hasAdditionalParticipants = this.participantOptions &&
            this.participantOptions?.length > 0 &&
            !!this.participantOptions[0].email &&
            !!this.participantOptions[0].name &&
            !!this.participantOptions[0].calendars &&
            this.participantOptions[0].calendars.length > 0;
        if ((defaultBookingType || !hasAdditionalParticipants) && !this.readOnly) {
            return null;
        }
        return (h(Host, null, h("div", { class: "nylas-scheduling-method", part: "nsm" }, h("div", { class: "header", part: "nsm__header" }, h("h3", null, "Scheduling method")), h("div", { class: "nylas-scheduling-method__dropdown" }, h("span", { class: "nylas-scheduling-method__dropdown-label" }, "Select a scheduling method for the event.", h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, h("strong", null, "Standard Booking"), h("br", null), "- Allows 1:1 bookings, or n:1 bookings with additional participants.", h("br", null), h("br", null), h("strong", null, "Round-Robin Maximize Fairness"), h("br", null), "- Rotates through the list of participants you select, displaying the participant with the fewest recent bookings.", h("br", null), h("br", null), h("strong", null, "Round-Robin Maximize Availability"), h("br", null), "- Rotates through the list of participants you select, prioritizing participants with the fewest recent bookings, but making as many time-slots available as possible.", h("br", null)))), this.readOnly ? (h("input-component", { name: "availability-method-read-only", type: "text", exportparts: "ic__label: nsm__input-label, ic__input: nsm__input, ic__input_wrapper: nsm__input_wrapper", readOnly: true, defaultValue: bookingTypeOptions.find(cal => cal.value == defaultBookingType)?.label ?? bookingTypeOptions[0].label })) : (h("select-dropdown", { name: this.name, options: bookingTypeOptions, withSearch: false, exportparts: "sd_dropdown: nsm__dropdown, sd_dropdown-button: nsm__dropdown-button, sd_dropdown-content: nsm__dropdown-content", defaultSelectedOption: bookingTypeOptions.find(cal => cal.value == defaultBookingType) ?? bookingTypeOptions[0] }))))));
    }
    static get formAssociated() { return true; }
    get host() { return this; }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"]
    }; }
    static get style() { return nylasSchedulingMethodCss; }
}, [65, "nylas-scheduling-method", {
        "name": [1],
        "selectedConfiguration": [16],
        "participantOptions": [16],
        "readOnly": [4, "read-only"],
        "selectedBookingType": [32]
    }, [[0, "nylasFormDropdownChanged", "nylasFormDropdownChangedHandler"]], {
        "name": ["elementNameChangedHandler"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-scheduling-method',
        stateToProps: new Map([
            ['schedulerConfig.selectedConfiguration', 'selectedConfiguration'],
            ['schedulerConfig.additionalParticipants', 'participantOptions'],
        ]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasSchedulingMethod.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-scheduling-method", "chevron-icon", "info-icon", "input-component", "search-icon", "select-dropdown", "tooltip-component"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-scheduling-method":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasSchedulingMethod);
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "info-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "input-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "search-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "select-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "tooltip-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasSchedulingMethod as N, defineCustomElement as d };

//# sourceMappingURL=nylas-scheduling-method2.js.map