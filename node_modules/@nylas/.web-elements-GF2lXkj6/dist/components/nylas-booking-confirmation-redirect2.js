import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { R as RegisterComponent } from './register-component.js';
import { a as debug, p as isValidUrl } from './utils.js';
import { d as defineCustomElement$6 } from './chevron.js';
import { d as defineCustomElement$5 } from './info.js';
import { d as defineCustomElement$4 } from './input-component2.js';
import { d as defineCustomElement$3 } from './search.js';
import { d as defineCustomElement$2 } from './select-dropdown2.js';
import { d as defineCustomElement$1 } from './toolitp-component.js';

const nylasBookingConfirmationRedirectCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:inherit}.nylas-booking-confirmation-redirect{width:inherit;display:flex;flex-direction:column}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown span.label{display:flex;align-items:center;gap:4px;margin-bottom:4px;color:var(--nylas-base-800)}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown span.label tooltip-component{display:flex}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown select-dropdown::part(sd_dropdown){width:100%}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown select-dropdown::part(sd_dropdown-button){width:100%;display:flex;justify-content:space-between;align-items:center;border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:1rem}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown select-dropdown::part(sd_dropdown-content){width:100%;max-width:unset}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown select-dropdown::part(sd_dropdown-button-selected-label){max-width:calc(100% - 2rem);font-family:var(--nylas-font-family);font-size:16px;line-height:24px}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown input-component::part(ic__input_wrapper){margin-top:1rem}.nylas-booking-confirmation-redirect .nylas-booking-confirmation-redirect__dropdown span.error-message{color:var(--nylas-error)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasBookingConfirmationRedirect = proxyCustomElement(class NylasBookingConfirmationRedirect extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChanged = createEvent(this, "valueChanged", 7);
        this.internals = this.attachInternals();
        this.selectedConfiguration = undefined;
        this.name = 'confirmation-redirect';
        this.redirectUrl = '';
        this.redirectUrlErrorMessage = '';
        this.currentRedirectUrl = '';
        this.acceptUrl = undefined;
        this.componentLoaded = false;
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-booking-confirmation-redirect', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newValue) {
        debug('nylas-booking-confirmation-redirect', 'selectedConfigurationChangedHandler', newValue);
        if (newValue?.scheduler?.confirmation_redirect_url) {
            this.currentRedirectUrl = newValue?.scheduler?.confirmation_redirect_url;
            this.acceptUrl = newValue?.scheduler?.confirmation_redirect_url !== '';
        }
    }
    connectedCallback() {
        debug('nylas-booking-confirmation-redirect', 'connectedCallback');
    }
    disconnectedCallback() {
        debug('nylas-booking-confirmation-redirect', 'disconnectedCallback');
    }
    componentWillLoad() {
        debug('nylas-booking-confirmation-redirect', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
    }
    componentDidLoad() {
        debug('nylas-booking-confirmation-redirect', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        else {
            this.currentRedirectUrl = this.redirectUrl;
            this.acceptUrl = this.redirectUrl !== '';
        }
        this.componentLoaded = true;
        if (typeof this.internals.setFormValue === 'function') {
            this.internals.setFormValue(this.currentRedirectUrl.toString(), this.name);
        }
    }
    componentWillUpdate() {
        debug('nylas-booking-confirmation-redirect', 'componentWillUpdate');
    }
    componentDidUpdate() {
        debug('nylas-booking-confirmation-redirect', 'componentDidUpdate');
    }
    componentWillRender() {
        debug('nylas-booking-confirmation-redirect', 'componentWillRender');
    }
    componentDidRender() {
        debug('nylas-booking-confirmation-redirect', 'componentDidRender');
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-booking-confirmation-redirect', 'nylasFormDropdownChangedHandler', event.detail);
        const { name, value } = event.detail;
        if (name === 'confirmation-redirect-dropdown') {
            if (value === 'custom') {
                this.acceptUrl = true;
            }
            else {
                this.acceptUrl = false;
                this.internals.setFormValue('', this.name);
                this.valueChanged.emit({ name: this.name, value: '' });
            }
        }
    }
    nylasFormInputBlurHandler(event) {
        const { name, value } = event.detail;
        this.currentRedirectUrl = value;
        if (this.acceptUrl && name === 'confirmation-redirect') {
            this.redirectUrlErrorMessage = '';
            if (!isValidUrl(this.currentRedirectUrl)) {
                this.internals.setValidity({ customError: true }, 'Please enter a valid URL.');
                this.redirectUrlErrorMessage = 'Please enter a valid URL.';
                return;
            }
            this.internals.setValidity({});
            const valueChanged = (event) => {
                const { value } = event.detail;
                this.internals.setFormValue(value.toString(), this.name);
            };
            this.valueChanged.emit({ ...event.detail, valueChanged });
        }
    }
    formSubmittedHandler(_event) {
        if (this.acceptUrl && !isValidUrl(this.currentRedirectUrl)) {
            this.internals.setValidity({ customError: true }, 'Please enter a valid URL.');
            this.redirectUrlErrorMessage = 'Please enter a valid URL.';
        }
        else {
            this.internals.setValidity({});
        }
    }
    render() {
        const redirectOptions = [
            {
                label: 'Display default confirmation page',
                value: 'default',
            },
            {
                label: 'Redirect to custom URL',
                value: 'custom',
            },
        ];
        return (h(Host, { key: '664122ed45ac89e22d1638e1f89d152c6f3b2e64' }, h("div", { key: '86bad1489a91fc71ca708cf0832d7bf1ce5e4938', class: "nylas-booking-confirmation-redirect", part: "nbcr" }, redirectOptions.length > 0 && (h("div", { class: "nylas-booking-confirmation-redirect__dropdown" }, h("span", { class: "label" }, "When a booking is confirmed", h("tooltip-component", null, h("info-icon", { slot: "tooltip-icon" }), h("span", { slot: "tooltip-content" }, "You can either display the default confirmation page or redirect users to your own confirmation page."))), this.componentLoaded && (h("select-dropdown", { name: "confirmation-redirect-dropdown", options: redirectOptions, withSearch: false, defaultSelectedOption: redirectOptions.find(option => option.value === (this.acceptUrl ? 'custom' : 'default')), exportparts: "sd_dropdown: nbcr__dropdown, sd_dropdown-button: nbcr__dropdown-button, sd_dropdown-content: nbcr__dropdown-content" })), this.acceptUrl && (h("div", null, h("input-component", { name: "confirmation-redirect", id: "confirmation-redirect", type: "text", placeholder: "Enter custom redirect URL", required: false, part: "ic__input_wrapper: nbcr__input-textfield", defaultValue: this.currentRedirectUrl }), this.redirectUrlErrorMessage && h("span", { class: "error-message" }, this.redirectUrlErrorMessage))))))));
    }
    static get formAssociated() { return true; }
    get host() { return this; }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }; }
    static get style() { return nylasBookingConfirmationRedirectCss; }
}, [65, "nylas-booking-confirmation-redirect", {
        "selectedConfiguration": [16],
        "name": [1],
        "redirectUrl": [1, "redirect-url"],
        "redirectUrlErrorMessage": [1, "redirect-url-error-message"],
        "currentRedirectUrl": [32],
        "acceptUrl": [32],
        "componentLoaded": [32]
    }, [[0, "nylasFormDropdownChanged", "nylasFormDropdownChangedHandler"], [0, "nylasFormInputBlurred", "nylasFormInputBlurHandler"], [4, "formSubmitted", "formSubmittedHandler"]], {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"]
    }]);
__decorate([
    RegisterComponent({
        name: 'nylas-booking-confirmation-redirect',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {
            valueChanged: async (event, _nylasSchedulerConfigConnector) => {
                const { valueChanged } = event.detail;
                if (valueChanged) {
                    valueChanged(event);
                }
            },
        },
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasBookingConfirmationRedirect.prototype, "render", null);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["nylas-booking-confirmation-redirect", "chevron-icon", "info-icon", "input-component", "search-icon", "select-dropdown", "tooltip-component"];
    components.forEach(tagName => { switch (tagName) {
        case "nylas-booking-confirmation-redirect":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, NylasBookingConfirmationRedirect);
            }
            break;
        case "chevron-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "info-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "input-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "search-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "select-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "tooltip-component":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { NylasBookingConfirmationRedirect as N, defineCustomElement as d };

//# sourceMappingURL=nylas-booking-confirmation-redirect2.js.map