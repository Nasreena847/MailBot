import { r as registerInstance, a as createEvent, h, i as Host, e as getElement } from './index-b5cb18eb.js';
import { R as RegisterComponent } from './register-component-8057b2e5.js';
import { a as debug } from './utils-674a951a.js';
import './_commonjsHelpers-6cbf8316.js';

const nylasEventDurationCss = ":host{display:block;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif}.nylas-event-duration{display:flex;flex-direction:column;gap:4px}.nylas-event-duration label{display:flex;align-items:center;color:var(--nylas-base-800);font-size:16px;font-style:normal;font-weight:400;line-height:150%;}.nylas-event-duration label span.required{color:var(--nylas-error, #cc4841)}.nylas-event-duration label span.label-icon{margin-left:4px}.nylas-event-duration label span.label-icon tooltip-component{display:flex}.nylas-event-duration__wrapper{display:flex;align-items:center;gap:0.5rem}.nylas-event-duration__wrapper input{padding:12px 16px;border-width:1;border-radius:8px;border:1px solid var(--nylas-base-200);font-family:var(--nylas-font-family);font-size:16px;line-height:24px;width:48px}.nylas-event-duration__wrapper input-dropdown::part(id_dropdown-input){border:1px solid var(--nylas-base-200);border-radius:var(--nylas-border-radius-2x);padding:14px 16px;width:50px}.nylas-event-duration__wrapper input-dropdown::part(id_dropdown-content){width:100%;min-width:unset;height:200px}.nylas-event-duration__wrapper select-dropdown{width:120px}@media screen and (max-width: 768px){.nylas-event-duration__wrapper select-dropdown{width:100%}}.nylas-event-duration__wrapper select-dropdown::part(sd_dropdown-button){border:1px solid var(--nylas-base-200)}";

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
const NylasEventDuration = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.valueChanged = createEvent(this, "valueChanged", 7);
        if (hostRef.$hostElement$["s-ei"]) {
            this.internals = hostRef.$hostElement$["s-ei"];
        }
        else {
            this.internals = hostRef.$hostElement$.attachInternals();
            hostRef.$hostElement$["s-ei"] = this.internals;
        }
        this.selectedConfiguration = undefined;
        this.name = 'duration';
        this.eventDurationMinutes = undefined;
        this.duration = this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? this.eventDurationMinutes / 60 : this.eventDurationMinutes) : 30;
        this.durationMinutes = undefined;
        this.durationIncrement = undefined;
        this.durationMinutesOptions = [
            { value: 15, label: '15' },
            { value: 30, label: '30' },
            { value: 45, label: '45' },
            { value: 60, label: '60' },
        ];
    }
    elementNameChangedHandler(newValue) {
        debug('nylas-event-duration', 'elementNameChangedHandler', newValue);
        this.host.setAttribute('name', newValue);
    }
    selectedConfigurationChangedHandler(newVal) {
        const configDuration = newVal?.availability?.duration_minutes;
        if (configDuration) {
            this.duration = configDuration >= 60 ? configDuration / 60 : configDuration;
            this.durationMinutes = configDuration ? configDuration : 30;
            this.durationIncrement = configDuration >= 60 ? 60 : 1;
        }
    }
    durationMinutesChangedHandler(newValue, oldValue) {
        debug('nylas-event-duration', 'durationMinutesChangedHandler', newValue);
        if (newValue === oldValue) {
            return;
        }
        this.valueChanged.emit({ value: newValue.toString(), name: this.name });
    }
    connectedCallback() {
        debug('nylas-event-duration', 'connectedCallback');
    }
    componentWillLoad() {
        debug('nylas-event-duration', 'componentWillLoad');
        this.host.setAttribute('name', this.name);
        this.setDurationMintueOptions();
    }
    componentDidLoad() {
        debug('nylas-event-duration', 'componentDidLoad');
        if (this.selectedConfiguration) {
            this.selectedConfigurationChangedHandler(this.selectedConfiguration);
        }
        this.duration = this.duration ? this.duration : this.eventDurationMinutes ? (this.eventDurationMinutes >= 60 ? this.eventDurationMinutes / 60 : this.eventDurationMinutes) : 30;
        this.durationMinutes = this.durationMinutes ? this.durationMinutes : this.duration ? this.duration : 30;
        this.durationIncrement = this.durationIncrement ? this.durationIncrement : this.duration >= 60 ? 60 : 1;
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    disconnectedCallback() {
        debug('nylas-event-duration', 'disconnectedCallback');
    }
    setDurationMintueOptions() {
        if (this.durationIncrement === 1) {
            this.durationMinutesOptions = [
                { value: 15, label: '15' },
                { value: 30, label: '30' },
                { value: 45, label: '45' },
                { value: 60, label: '60' },
            ];
        }
        else {
            this.durationMinutesOptions = Array.from({ length: 23 }, (_, i) => ({ value: i + 1, label: (i + 1).toString() }));
        }
        return this.durationMinutesOptions;
    }
    handleChange(event) {
        this.duration = event.target.value;
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), this.name);
    }
    nylasFormDropdownChangedHandler(event) {
        debug('nylas-calendar-picker', 'nylasFormDropdownChangedHandler', event.detail);
        const { value } = event.detail;
        this.durationIncrement = parseInt(value);
        if (this.durationIncrement === 1) {
            this.duration = 60;
        }
        else {
            this.duration = 1;
        }
        this.setDurationMintueOptions();
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), 'duration');
    }
    inputOptionChangedHandler(event) {
        debug('nylas-calendar-picker', 'inputOptionChangedHandler', event.detail);
        const { value } = event.detail;
        this.duration = value;
        this.durationMinutes = this.duration * this.durationIncrement;
        this.internals.setFormValue(this.durationMinutes.toString(), this.name);
    }
    render() {
        const durationOptions = [
            { value: 1, label: 'minute' },
            { value: 60, label: 'hour' },
        ];
        return (h(Host, { key: '3aeec3a1b528f5e1d6c0470122a31fd5e7470fa9' }, h("div", { key: '1c1efed9fdecbde574461154cc3b60f29bafe657', class: "nylas-event-duration", part: "ned" }, h("label", { key: 'cd8cb2b52038a897b03021e90b4ec335b2390db5', htmlFor: "duration" }, "Event duration", h("span", { key: '8a09d363737a793078e2c7a7f7764b28851569c9', class: "required" }, "*")), h("div", { key: '970ef2ffc2a7d718346e6654c99cc24b34e44ec9', class: "nylas-event-duration__wrapper" }, h("input-dropdown", { key: 'bb614ca89f742a55e86d1cdf6a8a779f0631bb7f', name: 'event-duration', options: this.durationMinutesOptions, inputValue: this.duration.toString(), exportparts: "id_dropdown: ned__input_dropdown, id_dropdown-input: ned__input_dropdown-input, id_dropdown-content: ned__input_dropdown-content", defaultInputOption: this.durationMinutesOptions.find(i => i.value == this.duration) }), this.durationIncrement && (h("select-dropdown", { name: 'event-duration', options: durationOptions, pluralizedLabel: this.duration > 1 ? 's' : '', exportparts: "sd_dropdown: ned__dropdown, sd_dropdown-button: ned__dropdown-button, sd_dropdown-content: ned__dropdown-content", defaultSelectedOption: durationOptions.find(i => i.value == this.durationIncrement), withSearch: false }))))));
    }
    static get formAssociated() { return true; }
    get host() { return getElement(this); }
    static get watchers() { return {
        "name": ["elementNameChangedHandler"],
        "selectedConfiguration": ["selectedConfigurationChangedHandler"],
        "durationMinutes": ["durationMinutesChangedHandler"]
    }; }
};
__decorate([
    RegisterComponent({
        name: 'nylas-event-duration',
        stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),
        eventToProps: {},
        fireRegisterEvent: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NylasEventDuration.prototype, "render", null);
NylasEventDuration.style = nylasEventDurationCss;

export { NylasEventDuration as nylas_event_duration };

//# sourceMappingURL=nylas-event-duration.entry.js.map