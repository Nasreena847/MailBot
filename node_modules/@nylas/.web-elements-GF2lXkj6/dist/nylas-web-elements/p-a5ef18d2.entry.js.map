{"version":3,"names":["inputColorPickerCss","InputColorPickerStyle0","InputColorPicker","this","componentType","defaultSelectedColor","componentWillLoad","selectedColor","el","setAttribute","handleFocus","isOpen","handleBlur","handleInput","event","target","value","handleChange","nylasFormDropdownChanged","emit","name","error","errorMessage","handleKeyDown","code","preventDefault","inputRef","click","handleOutsideClick","path","composedPath","isClickInside","includes","render","h","key","class","part","tabindex","onKeyDown","e","type","ref","id","onFocus","onBlur","onInput","onChange","htmlFor","labelBtn","open","closed","chevron","width","height"],"sources":["src/components/design-system/input-color-picker/input-color-picker.scss?tag=input-color-picker&encapsulation=shadow","src/components/design-system/input-color-picker/input-color-picker.tsx"],"sourcesContent":["@import '../../../common/styles/variables.scss';\n@import '../../../common/mixins/inputs.scss';\n\n:host {\n  display: block;\n  position: relative;\n\n  @media #{$mobile} {\n    position: unset;\n  }\n\n  @include default-css-variables;\n  width: 100%;\n}\n\nlabel {\n  @include input-label;\n  flex-direction: column;\n  gap: 4px;\n  font-family: var(--nylas-font-family);\n  font-size: 16px;\n  color: var(--nylas-base-800);\n\n  p {\n    margin: 0;\n  }\n\n  .error {\n    color: var(--nylas-error);\n  }\n}\n\n.color-picker-container {\n  @include textfield;\n  width: -moz-available;\n  width: -webkit-fill-available;\n  padding-left: 0;\n  gap: 0;\n  overflow: hidden;\n\n  input {\n    display: flex;\n    align-items: center;\n    height: 100%;\n    appearance: none;\n    border: none;\n    border-right: 1px solid var(--nylas-base-200);\n    background: transparent;\n\n    &::-webkit-color-swatch {\n      min-width: 30px;\n      border-radius: 0.25rem;\n      border: 1px solid var(--nylas-base-200);\n      margin: 0.25rem;\n    }\n\n    &::-moz-color-swatch {\n      min-width: 30px;\n      border-radius: 0.25rem;\n      border: 1px solid var(--nylas-base-200);\n      margin: 0.25rem;\n    }\n  }\n\n  &.error {\n    border: 1px solid var(--nylas-error);\n  }\n\n  &:hover,\n  &:active {\n    outline: 1px solid var(--nylas-primary);\n  }\n\n  &:active {\n    outline: 2px solid var(--nylas-primary);\n  }\n\n  label {\n    width: 100%;\n  }\n}\n\n.labelBtn {\n  color: var(--nylas-base-800);\n  padding: 14px;\n  font-size: 1rem;\n  font-family: var(--nylas-font-family);\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n  gap: 0.5rem;\n  background: transparent;\n  border: none;\n\n  &.error {\n    border: 1px solid var(--nylas-error);\n  }\n\n  &.focus {\n    background: transparent;\n  }\n\n  &:hover,\n  &:active {\n    outline: 1px solid var(--nylas-primary);\n  }\n\n  span {\n    &.chevron {\n      display: flex;\n      align-self: center;\n    }\n\n    &.open {\n      transform: rotate(90deg);\n    }\n\n    &.closed {\n      transform: rotate(270deg);\n    }\n\n    &.selected-option {\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      max-width: 144px;\n      font-size: 14px;\n      line-height: 20px;\n\n      @media #{$mobile} {\n        max-width: 124px;\n        font-size: 16px;\n      }\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Listen, Prop, State } from '@stencil/core';\n\n/**\n * The `input-color-picker` component is a dropdown that allows users to select an accent color from either RGB inputs or an interactive color picker and converts them to a hex value.\n * This component is used in the scheduling form to input dropdown type inputs.\n * @part icp_color-picker - The dropdown container\n * @part icp_color-picker-button - The dropdown button\n * @part icp_color-picker-button-selected-label - The selected option label\n * @part icp_color-picker-label - The dropdown label\n */\n@Component({\n  tag: 'input-color-picker',\n  styleUrl: 'input-color-picker.scss',\n  shadow: true,\n})\nexport class InputColorPicker {\n  @Element() el!: HTMLElement;\n  private readonly componentType: string = 'color-picker';\n\n  private inputRef?: HTMLInputElement;\n\n  // Props\n  /**\n   * The name of the dropdown\n   */\n  @Prop() name!: string;\n  /**\n   * The default selected color\n   */\n  @Prop({ attribute: 'default-selected-color' }) defaultSelectedColor?: string;\n\n  // States\n  /**\n   * The selected option\n   */\n  @State() selectedColor: string | undefined = this.defaultSelectedColor;\n  /**\n   * The open state of the dropdown\n   */\n  @State() isOpen: boolean = false;\n  /**\n   * The aria-activedescendant attribute for the listbox element to indicate the currently active\n   * option in the list box to screen readers. The value of aria-activedescendant is the ID of\n   * the active option.\n   */\n  @State() ariaActivedescendant: string = '';\n\n  /**\n   * The error message to display when the value is empty or null and the dropdown is required\n   */\n  @State() errorMessage: string = '';\n\n  // Events\n  /**\n   * This event is fired when the selected option is changed\n   */\n  @Event({ bubbles: true, composed: true }) nylasFormDropdownChanged!: EventEmitter<{\n    value: string;\n    name: string;\n    error?: string;\n    label?: string;\n  }>;\n\n  // Lifecycle events\n  componentWillLoad() {\n    this.selectedColor = this.defaultSelectedColor;\n    this.el.setAttribute('component-type', this.componentType);\n  }\n\n  // Methods\n  handleFocus() {\n    this.isOpen = true;\n  }\n  handleBlur() {\n    this.isOpen = false;\n  }\n\n  // handle input separately from change to allow for live updates in label\n  handleInput(event: Event) {\n    this.selectedColor = (event.target as HTMLInputElement).value;\n  }\n\n  handleChange(event: Event) {\n    this.selectedColor = (event.target as HTMLInputElement).value;\n    this.nylasFormDropdownChanged.emit({\n      value: this.selectedColor,\n      name: this.name,\n      error: this.errorMessage,\n    });\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.code === 'Enter' || event.code === 'Space') {\n      event.preventDefault();\n      this.inputRef?.click();\n    }\n  }\n\n  // Event listeners\n  @Listen('click', { target: 'document', capture: true })\n  handleOutsideClick(event: MouseEvent) {\n    // Get the path of the event\n    const path = event.composedPath();\n    const isClickInside = path.includes(this.el);\n\n    if (!isClickInside && this.isOpen) {\n      this.isOpen = false;\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"color-picker-container\" part=\"icp_color-picker\" tabindex=\"0\" onKeyDown={e => this.handleKeyDown(e)}>\n        <input\n          type=\"color\"\n          ref={el => (this.inputRef = el as HTMLInputElement)}\n          id={this.name}\n          name={this.name}\n          value={this.selectedColor}\n          tabindex=\"-1\"\n          onFocus={() => this.handleFocus()}\n          onBlur={() => this.handleBlur()}\n          onInput={e => this.handleInput(e)}\n          onChange={e => this.handleChange(e)}\n          onKeyDown={e => this.handleKeyDown(e)}\n        />\n        <label\n          part=\"icp_color-picker-button\"\n          htmlFor={this.name}\n          class={{ labelBtn: true, open: this.isOpen, error: !!this.errorMessage }}\n          aria-haspopup=\"listbox\"\n          aria-expanded={this.isOpen ? 'true' : 'false'}\n          aria-label={this.name}\n        >\n          <span class=\"selected-option\" part=\"icp_color-picker-button-selected-label\">\n            {this.selectedColor || 'Select a color'}\n          </span>\n          <span\n            class={{\n              open: this.isOpen,\n              closed: !this.isOpen,\n              chevron: true,\n            }}\n            aria-hidden=\"true\"\n          >\n            <chevron-icon width=\"16\" height=\"16\" />\n          </span>\n          {this.errorMessage && <span class=\"error help-text\">{this.errorMessage}</span>}\n        </label>\n      </div>\n    );\n  }\n}\n"],"mappings":"yDAAA,MAAMA,EAAsB,gzGAC5B,MAAAC,EAAeD,E,MCcFE,EAAgB,M,4FAEVC,KAAAC,cAAwB,e,2EAkBID,KAAKE,qB,YAIvB,M,0BAMa,G,kBAKR,E,CAchC,iBAAAC,GACEH,KAAKI,cAAgBJ,KAAKE,qBAC1BF,KAAKK,GAAGC,aAAa,iBAAkBN,KAAKC,c,CAI9C,WAAAM,GACEP,KAAKQ,OAAS,I,CAEhB,UAAAC,GACET,KAAKQ,OAAS,K,CAIhB,WAAAE,CAAYC,GACVX,KAAKI,cAAiBO,EAAMC,OAA4BC,K,CAG1D,YAAAC,CAAaH,GACXX,KAAKI,cAAiBO,EAAMC,OAA4BC,MACxDb,KAAKe,yBAAyBC,KAAK,CACjCH,MAAOb,KAAKI,cACZa,KAAMjB,KAAKiB,KACXC,MAAOlB,KAAKmB,c,CAIhB,aAAAC,CAAcT,GACZ,GAAIA,EAAMU,OAAS,SAAWV,EAAMU,OAAS,QAAS,CACpDV,EAAMW,iBACNtB,KAAKuB,UAAUC,O,EAMnB,kBAAAC,CAAmBd,GAEjB,MAAMe,EAAOf,EAAMgB,eACnB,MAAMC,EAAgBF,EAAKG,SAAS7B,KAAKK,IAEzC,IAAKuB,GAAiB5B,KAAKQ,OAAQ,CACjCR,KAAKQ,OAAS,K,EAIlB,MAAAsB,GACE,OACEC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,yBAAyBC,KAAK,mBAAmBC,SAAS,IAAIC,UAAWC,GAAKrC,KAAKoB,cAAciB,IAC1GN,EAAA,SAAAC,IAAA,2CACEM,KAAK,QACLC,IAAKlC,GAAOL,KAAKuB,SAAWlB,EAC5BmC,GAAIxC,KAAKiB,KACTA,KAAMjB,KAAKiB,KACXJ,MAAOb,KAAKI,cACZ+B,SAAS,KACTM,QAAS,IAAMzC,KAAKO,cACpBmC,OAAQ,IAAM1C,KAAKS,aACnBkC,QAASN,GAAKrC,KAAKU,YAAY2B,GAC/BO,SAAUP,GAAKrC,KAAKc,aAAauB,GACjCD,UAAWC,GAAKrC,KAAKoB,cAAciB,KAErCN,EAAA,SAAAC,IAAA,2CACEE,KAAK,0BACLW,QAAS7C,KAAKiB,KACdgB,MAAO,CAAEa,SAAU,KAAMC,KAAM/C,KAAKQ,OAAQU,QAASlB,KAAKmB,cAAc,gBAC1D,UAAS,gBACRnB,KAAKQ,OAAS,OAAS,QAAO,aACjCR,KAAKiB,MAEjBc,EAAA,QAAAC,IAAA,2CAAMC,MAAM,kBAAkBC,KAAK,0CAChClC,KAAKI,eAAiB,kBAEzB2B,EAAA,QAAAC,IAAA,2CACEC,MAAO,CACLc,KAAM/C,KAAKQ,OACXwC,QAAShD,KAAKQ,OACdyC,QAAS,MACV,cACW,QAEZlB,EAAA,gBAAAC,IAAA,2CAAckB,MAAM,KAAKC,OAAO,QAEjCnD,KAAKmB,cAAgBY,EAAA,QAAME,MAAM,mBAAmBjC,KAAKmB,e"}