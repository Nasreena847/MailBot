{"version":3,"names":["textareaComponentCss","TextareaComponentStyle0","TextareaComponent","componentDidLoad","this","value","sanitize","defaultValue","handleBookingFormSubmitted","event","validate","error","preventDefault","handletriggerValidation","handleInput","e","inputElement","target","nylasFormInputChanged","emit","name","label","type","required","length","maxLength","render","h","key","part","class","tooltip","slot","placeholder","readOnly","autoFocus","onInput"],"sources":["src/components/design-system/textarea-component/textarea-component.scss?tag=textarea-component&encapsulation=shadow","src/components/design-system/textarea-component/textarea-component.tsx"],"sourcesContent":["@import '../../../common/styles/variables.scss';\n@import '../../../common/mixins/inputs.scss';\n\n:host {\n  display: block;\n  @include default-css-variables;\n  width: 100%;\n}\n\nlabel {\n  @include input-label;\n  flex-direction: column;\n  gap: 4px;\n  font-family: var(--nylas-font-family);\n  font-size: 16px;\n  color: var(--nylas-base-800);\n\n  p {\n    margin: 0;\n    display: flex;\n    gap: 4px;\n    align-items: center;\n  }\n\n  .error {\n    color: var(--nylas-error);\n  }\n}\n\ntextarea {\n  @include textfield;\n  padding: 12px 16px;\n  border-width: 1;\n  resize: vertical;\n  border-radius: 8px;\n  font-family: var(--nylas-font-family);\n  font-size: 16px;\n  line-height: 24px;\n\n  &::-webkit-resizer {\n    display: none;\n  }\n}\n","import { sanitize } from '@/utils/utils';\nimport { Component, h, Prop, State, Event, EventEmitter, Listen } from '@stencil/core';\n\n/**\n * `textarea-component` allows users to enter multiline text.\n * It is ideal for larger inputs like comments or messages in a form.\n * This component is used in the scheduling form to input multiline text.\n *\n * @part tc__label - The label for the textarea.\n * @part tc__textarea - The textarea element.\n */\n@Component({\n  tag: 'textarea-component',\n  styleUrl: 'textarea-component.scss',\n  shadow: true,\n})\nexport class TextareaComponent {\n  /**\n   * The name of the textarea, important for form submissions.\n   */\n  @Prop() name: string = 'textarea';\n\n  /**\n   * The default value of the textarea, appearing when the component first renders.\n   */\n  @Prop() defaultValue?: string;\n\n  /**\n   * The label for the textarea, displayed above it.\n   */\n  @Prop() label: string = '';\n\n  /**\n   * Placeholder text shown in the textarea when it is empty.\n   */\n  @Prop() placeholder: string = '';\n\n  /**\n   * Specifies if the textarea is required for form submission.\n   * If true, an error message shows if left empty.\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * If true, the textarea cannot be edited by the user.\n   */\n  @Prop() readOnly: boolean = false;\n\n  /**\n   * Automatically focus the textarea when the component loads.\n   */\n  @Prop() autoFocus: boolean = false;\n\n  /**\n   * The maximum number of characters allowed in the textarea.\n   */\n  @Prop() maxLength: number = 255;\n\n  /**\n   * The type\n   */\n  @Prop() type: string = 'multi_line_text';\n\n  /**\n   * The content of the label's tooltip\n   */\n  @Prop() tooltip: string = '';\n\n  /**\n   * State for the current value of the textarea.\n   */\n  @State() value: string = '';\n\n  /**\n   * State for managing the display of any error messages.\n   */\n  @State() error: string = '';\n\n  /**\n   * Event emitted when the value of the textarea changes.\n   * Useful for parent components to capture user input.\n   */\n  @Event() nylasFormInputChanged!: EventEmitter<{ value: string; name: string; error: string; label: string; type: string }>;\n\n  /**\n   * Lifecycle method that runs before the component loads.\n   * It sets the initial value and cleans it using sanitize-html.\n   */\n  componentDidLoad() {\n    this.value = sanitize(this.defaultValue || '');\n  }\n\n  // Event listeners\n  /**\n   * Listen for the bookingFormSubmitted event to validate the input value when the form is submitted.\n   */\n  @Listen('bookingFormSubmitted', { target: 'document' })\n  handleBookingFormSubmitted(event: CustomEvent) {\n    this.validate(this.value);\n    if (this.error) {\n      event.preventDefault();\n    }\n  }\n\n  @Listen('triggerValidation', { target: 'document' })\n  handletriggerValidation(event: CustomEvent) {\n    this.validate(this.value);\n    if (this.error) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Handles user input in the textarea, updating the value and emitting an event.\n   */\n  handleInput(e: Event) {\n    const inputElement = e.target as HTMLTextAreaElement;\n    this.value = sanitize(inputElement.value);\n    this.nylasFormInputChanged.emit({\n      value: this.value,\n      name: this.name,\n      error: this.error,\n      label: this.label,\n      type: this.type,\n    });\n  }\n\n  /**\n   * Validates the textarea value based on the required prop and maxLength.\n   * If the value is invalid, an error message is displayed.\n   */\n  validate(value: string) {\n    if (this.required && !value) {\n      this.error = `${this.label} is required.`;\n    } else if (value.length > this.maxLength) {\n      this.error = `${this.label} cannot exceed ${this.maxLength} characters.`;\n    } else {\n      this.error = '';\n    }\n  }\n\n  /**\n   * Renders the component UI including the label, textarea, and any error messages.\n   */\n  render() {\n    return (\n      <label part=\"tc__label\" class={{ error: !!this.error }}>\n        <p>\n          <span class=\"label\">{this.label}</span>\n          {this.required && <span class=\"required\">*</span>}\n          {this.tooltip && (\n            <tooltip-component>\n              <info-icon slot=\"tooltip-icon\" />\n              <span slot=\"tooltip-content\">{this.tooltip}</span>\n            </tooltip-component>\n          )}\n        </p>\n        <textarea\n          name={this.name}\n          placeholder={this.placeholder}\n          readOnly={this.readOnly}\n          autoFocus={this.autoFocus}\n          value={this.value}\n          maxLength={this.maxLength}\n          onInput={e => this.handleInput(e)}\n          class={{ error: !!this.error }}\n          part=\"tc__textarea\"\n        />\n        {this.error && <span class=\"error help-text\">{this.error}</span>}\n      </label>\n    );\n  }\n}\n"],"mappings":"8GAAA,MAAMA,EAAuB,gzDAC7B,MAAAC,EAAeD,E,MCeFE,EAAiB,M,gGAIL,W,uCAUC,G,iBAKM,G,cAMF,M,cAKA,M,eAKC,M,eAKD,I,UAKL,kB,aAKG,G,WAKD,G,WAKA,E,CAYzB,gBAAAC,GACEC,KAAKC,MAAQC,EAASF,KAAKG,cAAgB,G,CAQ7C,0BAAAC,CAA2BC,GACzBL,KAAKM,SAASN,KAAKC,OACnB,GAAID,KAAKO,MAAO,CACdF,EAAMG,gB,EAKV,uBAAAC,CAAwBJ,GACtBL,KAAKM,SAASN,KAAKC,OACnB,GAAID,KAAKO,MAAO,CACdF,EAAMG,gB,EAOV,WAAAE,CAAYC,GACV,MAAMC,EAAeD,EAAEE,OACvBb,KAAKC,MAAQC,EAASU,EAAaX,OACnCD,KAAKc,sBAAsBC,KAAK,CAC9Bd,MAAOD,KAAKC,MACZe,KAAMhB,KAAKgB,KACXT,MAAOP,KAAKO,MACZU,MAAOjB,KAAKiB,MACZC,KAAMlB,KAAKkB,M,CAQf,QAAAZ,CAASL,GACP,GAAID,KAAKmB,WAAalB,EAAO,CAC3BD,KAAKO,MAAQ,GAAGP,KAAKiB,oB,MAChB,GAAIhB,EAAMmB,OAASpB,KAAKqB,UAAW,CACxCrB,KAAKO,MAAQ,GAAGP,KAAKiB,uBAAuBjB,KAAKqB,uB,KAC5C,CACLrB,KAAKO,MAAQ,E,EAOjB,MAAAe,GACE,OACEC,EAAA,SAAAC,IAAA,2CAAOC,KAAK,YAAYC,MAAO,CAAEnB,QAASP,KAAKO,QAC7CgB,EAAA,KAAAC,IAAA,4CACED,EAAA,QAAAC,IAAA,2CAAME,MAAM,SAAS1B,KAAKiB,OACzBjB,KAAKmB,UAAYI,EAAA,QAAMG,MAAM,YAAU,KACvC1B,KAAK2B,SACJJ,EAAA,yBACEA,EAAA,aAAWK,KAAK,iBAChBL,EAAA,QAAMK,KAAK,mBAAmB5B,KAAK2B,WAIzCJ,EAAA,YAAAC,IAAA,2CACER,KAAMhB,KAAKgB,KACXa,YAAa7B,KAAK6B,YAClBC,SAAU9B,KAAK8B,SACfC,UAAW/B,KAAK+B,UAChB9B,MAAOD,KAAKC,MACZoB,UAAWrB,KAAKqB,UAChBW,QAASrB,GAAKX,KAAKU,YAAYC,GAC/Be,MAAO,CAAEnB,QAASP,KAAKO,OACvBkB,KAAK,iBAENzB,KAAKO,OAASgB,EAAA,QAAMG,MAAM,mBAAmB1B,KAAKO,O"}