{"version":3,"names":["inputComponentCss","InputComponentStyle0","DefaultPattern","email","phone_number","DefaultPlaceholder","InputComponent","this","type","handleDefaultValueChange","newValue","value","sanitize","validatePattern","componentDidLoad","defaultValue","pattern","handleBookingFormSubmitted","event","error","preventDefault","handleFormSubmitted","el","getAttribute","handleInput","e","target","nylasFormInputChanged","emit","name","label","handleBlur","nylasFormInputBlurred","handleFocus","nylasFormInputFocused","required","requiredError","test","patternError","render","h","key","part","class","readOnly","autoFocus","maxLength","placeholder","onInput","onFocus","onBlur"],"sources":["src/components/design-system/input-component/input-component.scss?tag=input-component&encapsulation=shadow","src/components/design-system/input-component/input-component.tsx"],"sourcesContent":["@import '../../../common/styles/variables.scss';\n@import '../../../common/mixins/inputs.scss';\n\n:host {\n  display: block;\n  height: auto;\n  @include default-css-variables;\n  width: 100%;\n}\n\nlabel {\n  @include input-label;\n  flex-direction: column;\n  gap: 4px;\n  font-family: var(--nylas-font-family);\n  font-size: 16px;\n  color: var(--nylas-base-800);\n\n  p {\n    margin: 0;\n  }\n\n  .error {\n    color: var(--nylas-error);\n  }\n}\n\n.input_wrapper {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\ninput[type='text'],\ninput[type='email'] {\n  @include textfield;\n  width: -moz-available;\n  width: -webkit-fill-available;\n}\n","import { Component, h, Prop, State, Event, EventEmitter, Listen, Watch, Element } from '@stencil/core';\nimport { sanitize } from '@/utils/utils';\n\nconst DefaultPattern = {\n  email: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n  phone_number: /^\\+?\\d{1,15}$/,\n};\n\nconst DefaultPlaceholder = {\n  email: 'name@example.com',\n  phone_number: '1234567890',\n};\n\n/**\n * The `input-component` component is a UI component that allows users to input text, email, or phone number values.\n * This component is used in the scheduling form to input text, email and phone number type inputs.\n */\n\n@Component({\n  tag: 'input-component',\n  styleUrl: 'input-component.scss',\n  shadow: true,\n})\nexport class InputComponent {\n  /**\n   * The host element\n   */\n  @Element() el!: HTMLElement;\n  /**\n   * The name of the input. This is used to identify the input when submitting a form.\n   */\n  @Prop() name: string = 'input';\n  /**\n   * The default value of the input. This is the value that is displayed when the input is rendered.\n   */\n  @Prop() defaultValue?: string;\n  /**\n   * The label of the input. This is displayed above the input.\n   */\n  @Prop() label: string = '';\n  /**\n   * The type of the input. This is used to determine the input's behavior.\n   * Supported types are 'text', 'email', and 'phone_number'.\n   */\n  @Prop() type: 'text' | 'email' | 'phone_number' = 'text';\n  /**\n   * The placeholder of the input. This is displayed when the input is empty.\n   */\n  @Prop() placeholder: string = DefaultPlaceholder[this.type];\n  /**\n   * Whether the input is required. If true, the input must have a value when submitting a form.\n   * Default is false. If the input is required and the value is empty, an error message is displayed.\n   */\n  @Prop() required: boolean = false;\n  /**\n   * Whether the input is read-only. If true, the input cannot be edited.\n   * Default is false.\n   */\n  @Prop() readOnly: boolean = false;\n  /**\n   * Whether the input should be focused when rendered.\n   * Default is false. If true, the input is focused when rendered.\n   * Use this to set the focus on the first input in a form.\n   */\n  @Prop() autoFocus: boolean = false;\n  /**\n   * The pattern to validate the input value. If the value does not match the pattern, an error message is displayed.\n   * Default is null. If the pattern is not set, the pattern is determined by the input type for 'email' and 'phone_number'.\n   */\n  @Prop() pattern?: RegExp;\n  /**\n   * The maximum length of the input value. If the value is longer than the maximum length, an error message is displayed.\n   * Default is 255.\n   */\n  @Prop() maxLength: number = 255;\n  /**\n   * The error message to display when the value does not match the pattern.\n   * Default is 'Invalid <field> format.' where <field> is the input label.\n   */\n  @Prop() patternError: string = '';\n\n  /**\n   * This error message is displayed when the input value is empty and the input is required.\n   */\n  @Prop() requiredError: string = '';\n\n  /**\n   * The input value state.\n   */\n  @State() value!: string;\n  /**\n   * The error message state.\n   */\n  @State() error: string = '';\n\n  /**\n   * This event is fired when the input value is changed.\n   * The scheduling form listens for this event to validate the input value and submit the form.\n   * If using outside of the scheduling form, listen for this event to validate the input value\n   * and handle the input value change.\n   */\n  @Event() nylasFormInputChanged!: EventEmitter<{\n    value: string;\n    name: string;\n    label: string;\n    type: string;\n    error: string;\n  }>;\n\n  @Event() nylasFormInputFocused!: EventEmitter<{\n    value: string;\n    name: string;\n  }>;\n\n  @Event() nylasFormInputBlurred!: EventEmitter<{\n    value: string;\n    name: string;\n  }>;\n\n  // Lifecycle methods\n  @Watch('defaultValue')\n  handleDefaultValueChange(newValue: string) {\n    this.value = sanitize(newValue);\n    if (this.value) {\n      this.validatePattern(this.value);\n    }\n  }\n\n  componentDidLoad() {\n    this.value = sanitize(this.defaultValue || '');\n    if (this.type !== 'text' && !this.pattern) {\n      this.pattern = DefaultPattern[this.type];\n    }\n\n    if (this.value) {\n      this.validatePattern(this.value);\n    }\n  }\n\n  // Event listeners\n  /**\n   * Listen for the bookingFormSubmitted event to validate the input value when the form is submitted.\n   */\n  @Listen('bookingFormSubmitted', { target: 'document' })\n  handleBookingFormSubmitted(event: CustomEvent) {\n    this.validatePattern(this.value);\n    if (this.error) {\n      event.preventDefault();\n    }\n  }\n\n  @Listen('formSubmitted', { target: 'document' })\n  async handleFormSubmitted(event: CustomEvent) {\n    if (this.el?.getAttribute('data-page-styling')) {\n      this.validatePattern(this.value);\n      if (this.error) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  // Methods\n  handleInput(e: Event) {\n    this.error = '';\n    this.value = sanitize((e.target as HTMLInputElement).value);\n    this.nylasFormInputChanged.emit({\n      value: this.value,\n      name: this.name,\n      label: this.label,\n      error: this.error,\n      type: this.type,\n    });\n  }\n\n  handleBlur() {\n    this.nylasFormInputBlurred.emit({\n      value: this.value,\n      name: this.name,\n    });\n  }\n\n  handleFocus() {\n    this.nylasFormInputFocused.emit({\n      value: this.value,\n      name: this.name,\n    });\n  }\n\n  validatePattern(value: string) {\n    // Reset error\n    this.error = '';\n    // Check if the field is required and value is empty\n    if (this.required && !value) {\n      this.error = this.requiredError || 'This field is required.';\n      return;\n    }\n    // Check if value matches pattern\n    if (!this.pattern || (!value && !this.required)) return;\n\n    if (this.pattern.test(value)) {\n      this.error = '';\n    } else {\n      this.error = this.patternError || 'Invalid format.';\n    }\n  }\n\n  render() {\n    return (\n      <label part=\"ic__label\" class={{ error: !!this.error }}>\n        {this.label && (\n          <p>\n            <span class=\"label\">{this.label}</span>\n            {this.required && <span class=\"required\">*</span>}\n          </p>\n        )}\n        <div part=\"ic__input_wrapper\" class=\"input_wrapper\">\n          <input\n            type=\"text\"\n            name={this.name}\n            part=\"ic__input\"\n            readOnly={this.readOnly}\n            autoFocus={this.autoFocus}\n            value={this.value}\n            maxLength={this.maxLength}\n            placeholder={this.placeholder}\n            class={{ error: !!this.error }}\n            onInput={e => this.handleInput(e)}\n            onFocus={() => this.handleFocus()}\n            onBlur={() => this.handleBlur()}\n          />\n          <slot name=\"additional-input\"></slot>\n        </div>\n        {this.error && <span class=\"error help-text\">{this.error}</span>}\n      </label>\n    );\n  }\n}\n"],"mappings":"qHAAA,MAAMA,EAAoB,63DAC1B,MAAAC,EAAeD,ECEf,MAAME,EAAiB,CACrBC,MAAO,uIACPC,aAAc,iBAGhB,MAAMC,EAAqB,CACzBF,MAAO,mBACPC,aAAc,c,MAaHE,EAAc,M,0NAQF,Q,uCAQC,G,UAK0B,O,iBAIpBD,EAAmBE,KAAKC,M,cAK1B,M,cAKA,M,eAMC,M,sCAUD,I,kBAKG,G,mBAKC,G,gCASP,E,CA4BzB,wBAAAC,CAAyBC,GACvBH,KAAKI,MAAQC,EAASF,GACtB,GAAIH,KAAKI,MAAO,CACdJ,KAAKM,gBAAgBN,KAAKI,M,EAI9B,gBAAAG,GACEP,KAAKI,MAAQC,EAASL,KAAKQ,cAAgB,IAC3C,GAAIR,KAAKC,OAAS,SAAWD,KAAKS,QAAS,CACzCT,KAAKS,QAAUd,EAAeK,KAAKC,K,CAGrC,GAAID,KAAKI,MAAO,CACdJ,KAAKM,gBAAgBN,KAAKI,M,EAS9B,0BAAAM,CAA2BC,GACzBX,KAAKM,gBAAgBN,KAAKI,OAC1B,GAAIJ,KAAKY,MAAO,CACdD,EAAME,gB,EAKV,yBAAMC,CAAoBH,GACxB,GAAIX,KAAKe,IAAIC,aAAa,qBAAsB,CAC9ChB,KAAKM,gBAAgBN,KAAKI,OAC1B,GAAIJ,KAAKY,MAAO,CACdD,EAAME,gB,GAMZ,WAAAI,CAAYC,GACVlB,KAAKY,MAAQ,GACbZ,KAAKI,MAAQC,EAAUa,EAAEC,OAA4Bf,OACrDJ,KAAKoB,sBAAsBC,KAAK,CAC9BjB,MAAOJ,KAAKI,MACZkB,KAAMtB,KAAKsB,KACXC,MAAOvB,KAAKuB,MACZX,MAAOZ,KAAKY,MACZX,KAAMD,KAAKC,M,CAIf,UAAAuB,GACExB,KAAKyB,sBAAsBJ,KAAK,CAC9BjB,MAAOJ,KAAKI,MACZkB,KAAMtB,KAAKsB,M,CAIf,WAAAI,GACE1B,KAAK2B,sBAAsBN,KAAK,CAC9BjB,MAAOJ,KAAKI,MACZkB,KAAMtB,KAAKsB,M,CAIf,eAAAhB,CAAgBF,GAEdJ,KAAKY,MAAQ,GAEb,GAAIZ,KAAK4B,WAAaxB,EAAO,CAC3BJ,KAAKY,MAAQZ,KAAK6B,eAAiB,0BACnC,M,CAGF,IAAK7B,KAAKS,UAAaL,IAAUJ,KAAK4B,SAAW,OAEjD,GAAI5B,KAAKS,QAAQqB,KAAK1B,GAAQ,CAC5BJ,KAAKY,MAAQ,E,KACR,CACLZ,KAAKY,MAAQZ,KAAK+B,cAAgB,iB,EAItC,MAAAC,GACE,OACEC,EAAA,SAAAC,IAAA,2CAAOC,KAAK,YAAYC,MAAO,CAAExB,QAASZ,KAAKY,QAC5CZ,KAAKuB,OACJU,EAAA,SACEA,EAAA,QAAMG,MAAM,SAASpC,KAAKuB,OACzBvB,KAAK4B,UAAYK,EAAA,QAAMG,MAAM,YAAU,MAG5CH,EAAA,OAAAC,IAAA,2CAAKC,KAAK,oBAAoBC,MAAM,iBAClCH,EAAA,SAAAC,IAAA,2CACEjC,KAAK,OACLqB,KAAMtB,KAAKsB,KACXa,KAAK,YACLE,SAAUrC,KAAKqC,SACfC,UAAWtC,KAAKsC,UAChBlC,MAAOJ,KAAKI,MACZmC,UAAWvC,KAAKuC,UAChBC,YAAaxC,KAAKwC,YAClBJ,MAAO,CAAExB,QAASZ,KAAKY,OACvB6B,QAASvB,GAAKlB,KAAKiB,YAAYC,GAC/BwB,QAAS,IAAM1C,KAAK0B,cACpBiB,OAAQ,IAAM3C,KAAKwB,eAErBS,EAAA,QAAAC,IAAA,2CAAMZ,KAAK,sBAEZtB,KAAKY,OAASqB,EAAA,QAAMG,MAAM,mBAAmBpC,KAAKY,O"}