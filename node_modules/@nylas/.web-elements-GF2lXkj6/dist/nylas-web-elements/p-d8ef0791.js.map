{"version":3,"names":["NylasIdentityRequestWrapper","constructor","session","this","defaultAuthArgs","setActiveGrantId","grantId","activeGrantId","request","method","path","body","headers","response","fetch","Headers","undefined","isMultiAccount","grant_id","Error","dataResponse","error","errorMessage","String","includes","setTimeout","localStorage","removeItem","window","location","reload","message","currentUser","idToken","getProfile","id","sub","email","name","provider","authenticationUrl","authArgs","defaultArgs","find","args","auth","setDefaultAuthArgs"],"sources":["src/common/nylas-api-request.ts"],"sourcesContent":["import { dataResponse } from '@/utils/utils';\nimport type { NylasSessions } from '@nylas/identity';\nimport { DataResponseReturnType } from './types';\n\n/**\n * Arguments for making a request to the Nylas API.\n */\nexport type NylasRequestArgs = {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  path: string;\n  body?: any;\n  headers?: Record<string, string>;\n};\n\n/**\n * A model representing a user in the Nylas Identity system.\n */\nexport type User = {\n  id: string;\n  email: string;\n  name?: string;\n  provider?: string;\n};\n\n/**\n * Arguments for authenticating a user with the Nylas Identity system.\n */\nexport type AuthArgs = {\n  /**\n   * The provider of the user's email address.\n   */\n  provider?: string;\n  /**\n   * A list of permission scopes for the provider.\n   */\n  scope?: Array<string>;\n  /**\n   * The login hint associated with the user.\n   */\n  loginHint?: string;\n  /**\n   * Whether to include grant scopes in the auth exchange.\n   */\n  includeGrantScopes?: boolean;\n  prompt?: string;\n  metadata?: string;\n  state?: string;\n};\n\n/**\n * Interface for making requests to the Nylas API.\n *\n * This is an abstract class that is meant to be implemented by customers to provide their own\n * implementation of making requests to the Nylas API. This allows customers to use their own\n * authentication mechanism, or to use a different HTTP client library.\n */\nexport abstract class NylasApiRequest {\n  /**\n   * This method should make an authenticated request to the Nylas API.\n   * Note: It should not throw an error if the request fails, but should return an object with the error\n   * information as part of the tuple returned.\n   * @param args NylasRequestArgs\n   */\n  abstract request<T = any>(args: NylasRequestArgs): Promise<DataResponseReturnType<T>>;\n\n  /**\n   * This method should return the current user's information.\n   */\n\n  abstract currentUser(): Promise<User | null>;\n\n  /**\n   * This method should set the default authentication arguments to use when authenticating the user.\n   */\n  abstract setDefaultAuthArgs(authArgs: AuthArgs[]): void;\n\n  /**\n   * This method should return the URL to redirect the user to for authentication.\n   */\n  abstract authenticationUrl(authArgs?: AuthArgs): Promise<string | undefined>;\n}\n\n/**\n * A wrapper around the Nylas Identity session that implements the NylasApiRequest interface.\n * This class is used by the Nylas Web Elements to make requests to the Nylas API if no custom\n * implementation of NylasApiRequest is provided.\n */\nexport class NylasIdentityRequestWrapper implements NylasApiRequest {\n  /**\n   * The Nylas Identity session instance.\n   */\n  private session: NylasSessions;\n\n  /**\n   * The grant_id to use for requests, if there is multi-account support\n   * enabled in the Nylas Identity settings.\n   */\n  private activeGrantId?: string;\n\n  /**\n   * The default authentication arguments to use when authenticating the user.\n   */\n  private defaultAuthArgs: AuthArgs[] = [];\n\n  /**\n   * Constructor for the NylasIdentityRequestWrapper class.\n   * @param session The Nylas Identity session instance.\n   */\n  constructor(session: NylasSessions) {\n    this.session = session;\n  }\n\n  /**\n   * This method sets the grant_id to use for requests.\n   * This is used when there is multi-account support enabled in the Nylas Identity settings.\n   *\n   * @param grantId\n   */\n  setActiveGrantId(grantId: string) {\n    this.activeGrantId = grantId;\n  }\n\n  /**\n   * This method makes a request to the Nylas API, using the Nylas Identity's fetch method.\n   *\n   * The `grants/me/` prefix is added because all requests made from the browser to the Nylas API\n   * must be made on behalf of the currently logged in user with a valid access token.\n   *\n   * @param NylasRequestArgs\n   * @returns Promise<[T | null, NylasErrorResponse['error'] | null]>\n   */\n  async request<T>({ method, path, body, headers }: NylasRequestArgs): Promise<DataResponseReturnType<T>> {\n    try {\n      const response = await this.session.fetch(`grants/me/${path}`, {\n        method,\n        headers: headers ? new Headers(headers) : undefined,\n        body,\n        ...(this.session.isMultiAccount() && this.activeGrantId ? { grant_id: this.activeGrantId } : {}),\n      });\n\n      // Sometimes the Nylas identity session fetch method returns undefined.\n      // Possibly due to CORS issues. In this case, we throw an error.\n      if (typeof response === 'undefined') {\n        throw new Error('Response is undefined');\n      }\n\n      return dataResponse(response as T);\n    } catch (error: any) {\n      let errorMessage = String(error);\n      if (String(error).includes('Access token not found')) {\n        errorMessage = 'Session expired, please log in again. Redirecting...';\n        setTimeout(() => {\n          localStorage.removeItem('grant');\n          localStorage.removeItem('user');\n          window.location.reload();\n        }, 1000);\n      }\n      return dataResponse(null as T, {\n        message: errorMessage,\n      });\n    }\n  }\n\n  /**\n   * This method returns the current (logged in) user's information.\n   * If the user is not logged in, it returns null.\n   * @returns Promise<User | null>\n   */\n  async currentUser(): Promise<User | null> {\n    const grantId = this.session.isMultiAccount() ? this.activeGrantId : undefined;\n    const idToken = await this.session.getProfile(grantId);\n    if (!idToken) {\n      return null;\n    }\n\n    return {\n      id: idToken.sub,\n      email: idToken.email,\n      name: idToken.name,\n      provider: idToken.provider,\n    };\n  }\n\n  /**\n   * This method returns the URL to redirect the user to for authentication.\n   * @param authConfig authArgs\n   * @returns Promise<string | undefined>\n   */\n  async authenticationUrl(authArgs?: AuthArgs): Promise<string | undefined> {\n    const provider = authArgs?.provider || 'google';\n    const defaultArgs = this.defaultAuthArgs.find(args => args.provider === provider);\n    let args = defaultArgs || {};\n\n    if (authArgs) {\n      args = { ...args, ...authArgs };\n    }\n    return this.session.auth(args);\n  }\n\n  /**\n   * This method sets the default authentication arguments to use when authenticating the user.\n   * @param authArgs authArgs\n   */\n  setDefaultAuthArgs(authArgs: AuthArgs[]) {\n    this.defaultAuthArgs = authArgs;\n  }\n}\n"],"mappings":"0CAuFaA,EAqBX,WAAAC,CAAYC,GANJC,KAAAC,gBAA8B,GAOpCD,KAAKD,QAAUA,C,CASjB,gBAAAG,CAAiBC,GACfH,KAAKI,cAAgBD,C,CAYvB,aAAME,EAAWC,OAAEA,EAAMC,KAAEA,EAAIC,KAAEA,EAAIC,QAAEA,IACrC,IACE,MAAMC,QAAiBV,KAAKD,QAAQY,MAAM,aAAaJ,IAAQ,CAC7DD,SACAG,QAASA,EAAU,IAAIG,QAAQH,GAAWI,UAC1CL,UACIR,KAAKD,QAAQe,kBAAoBd,KAAKI,cAAgB,CAAEW,SAAUf,KAAKI,eAAkB,KAK/F,UAAWM,IAAa,YAAa,CACnC,MAAM,IAAIM,MAAM,wB,CAGlB,OAAOC,EAAaP,E,CACpB,MAAOQ,GACP,IAAIC,EAAeC,OAAOF,GAC1B,GAAIE,OAAOF,GAAOG,SAAS,0BAA2B,CACpDF,EAAe,uDACfG,YAAW,KACTC,aAAaC,WAAW,SACxBD,aAAaC,WAAW,QACxBC,OAAOC,SAASC,QAAQ,GACvB,I,CAEL,OAAOV,EAAa,KAAW,CAC7BW,QAAST,G,EAUf,iBAAMU,GACJ,MAAM1B,EAAUH,KAAKD,QAAQe,iBAAmBd,KAAKI,cAAgBS,UACrE,MAAMiB,QAAgB9B,KAAKD,QAAQgC,WAAW5B,GAC9C,IAAK2B,EAAS,CACZ,OAAO,I,CAGT,MAAO,CACLE,GAAIF,EAAQG,IACZC,MAAOJ,EAAQI,MACfC,KAAML,EAAQK,KACdC,SAAUN,EAAQM,S,CAStB,uBAAMC,CAAkBC,GACtB,MAAMF,EAAWE,GAAUF,UAAY,SACvC,MAAMG,EAAcvC,KAAKC,gBAAgBuC,MAAKC,GAAQA,EAAKL,WAAaA,IACxE,IAAIK,EAAOF,GAAe,GAE1B,GAAID,EAAU,CACZG,EAAO,IAAKA,KAASH,E,CAEvB,OAAOtC,KAAKD,QAAQ2C,KAAKD,E,CAO3B,kBAAAE,CAAmBL,GACjBtC,KAAKC,gBAAkBqC,C"}