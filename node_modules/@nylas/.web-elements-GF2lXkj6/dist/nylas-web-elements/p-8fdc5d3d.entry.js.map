{"version":3,"names":["NylasSchedulerConnector","constructor","schedulerAPIURL","nylasSchedulerStore","sessionId","configId","slug","clientId","Error","url","URL","window","location","href","origin","this","init","debug","schedulerStore","scheduler","_schedulerAPIConnector","NylaSchedulerAPIConnector","resetStores","reset","SchedulerView","props","children","isLoading","showNotification","nylasBranding","h","Fragment","class","MessageBanner","_props","nylasSchedulingCss","NylasSchedulingStyle0","genericError","title","i18next","t","type","NotificationType","category","ErrorCategory","Component","NylasScheduling","Date","toLocaleDateString","undefined","dateStyle","navigator","language","connectedCallback","componentWillLoad","schedulerWillLoadEvent","schedulerWillLoad","emit","host","eventOverrides","nylasSchedulerConnector","defaultPrevented","stores","CreateNylasSchedulerStore","bookingInfo","defaultSchedulerState","baseProvider","NylasBaseProvider","automaticComponentRegistration","refConfigId","configurationId","bookingRefExtractedEvent","rescheduleBookingRef","rescheduleConfigId","rescheduleBookingId","_","compactStringToUUIDs","set","bookingRefExtracted","bookingId","cancelBookingRef","cancelConfigId","cancelBookingId","organizerConfirmationBookingRef","organizerConfirmationConfigId","organizerConfirmationBookingId","salt","checkIfSessionIdOrConfigIdExists","getStore","schedulerApiUrl","initEvent","applyThemeConfig","themeConfig","componentDidLoad","schedulerDidLoadEvent","schedulerDidLoad","localizationChanged","localization","settingsResponse","getUISettings","nylasSchedulerError","notification","getErrorObject","error","data","appearance","console","info","configSettingsLoadedEvent","configSettingsLoaded","settings","availableDaysInFuture","get","available_days_in_future","selectedTimeslot","start_time","isTimeslotValid","selectedDate","availability","result","length","today","startTime","endTime","endTimeForAvailableDaysInFuture","validateAvailableDaysInFuture","getTime","getAvailability","_selectedDate","firstAvailableDate","find","timeslot","componentDisconnected","bookingInfoChanged","newVal","rescheduleBookingRefChanged","setConfigId","cancelBookingRefChanged","organizerConfirmationBookingRefChanged","Object","keys","forEach","lang","LANGUAGE_CODE","addResourceBundle","themeConfigChanged","languageChanged","event","newLanguage","detail","changeLanguage","registerComponentHandler","registerComponent","unregisterComponentHandler","unregisterComponent","monthChangedHandler","date","selectableDates","mapToBookingData","timezone","end_time","additional_guests","guests","guest","primaryParticipant","additional_fields","additionalFields","email_language","bookButtonClickedHandler","bookingData","mappedBookingData","storeRescheduleId","rescheduleBooking","resultData","bookedEventInfoEvent","bookedEventInfo","bookTimeslot","dateSelectedHandler","selectedDateLabel","cancelBookedEventErrorHandler","cancelBookedEventValidationErrorHandler","rescheduleBookedEventErrorHandler","confirmBookingErrorHandler","getNylasSchedulerStore","getNylasSchedulerConnector","getRef","description","message","id","toString","ttl","startDate","getFullYear","getMonth","endTimeForCurrentMonth","Math","floor","addDaysToCurrentDate","min","startTimeWithOffset","key","value","entries","style","setProperty","render","showDefaultScheduler","mode","eventInfo","showBookingForm","cancelledEventInfo","rejectBookingId","confirmedEventInfo","redirectUrl","confirmation_redirect_url","capitalizeFirstLetter","LANGUAGE_CODE_MAP","Host","part","exportparts","assign","timeslotPickerCTALabel","querySelector","slot","name"],"sources":["src/connector/nylas-scheduler-connector/index.ts","src/components/scheduler/nylas-scheduling/scheduler-view.tsx","src/components/scheduler/nylas-scheduling/message-banner.tsx","src/components/scheduler/nylas-scheduling/nylas-scheduling.scss?tag=nylas-scheduling&encapsulation=shadow","src/components/scheduler/nylas-scheduling/nylas-scheduling.tsx"],"sourcesContent":["import { NylasSchedulerStoreType } from '@/stores/scheduler-store';\nimport { debug } from '@/utils/utils';\nimport { NylasSchedulerConnectorInterface } from '../connector-interface';\nimport { NylaSchedulerAPIConnector } from '../shared/api/scheduler';\n\ntype NylasSchedulerConnectorOptions = {\n  schedulerAPIURL: string;\n  nylasSchedulerStore: NylasSchedulerStoreType;\n  sessionId?: string;\n  configId?: string;\n  slug?: string;\n  clientId?: string;\n};\n/**\n * Base class for the Nylas connector.\n */\nexport class NylasSchedulerConnector implements NylasSchedulerConnectorInterface {\n  public schedulerAPIURL: string;\n  public nylasSchedulerStore: NylasSchedulerStoreType;\n  public sessionId: string | undefined;\n  public configId: string | undefined;\n  public slug: string | undefined;\n  public clientId: string | undefined;\n\n  private _schedulerAPIConnector: NylaSchedulerAPIConnector | undefined;\n\n  constructor({ schedulerAPIURL, nylasSchedulerStore, sessionId, configId, slug, clientId }: NylasSchedulerConnectorOptions) {\n    if (!schedulerAPIURL) {\n      throw new Error('schedulerAPIURL is required');\n    }\n\n    if (!nylasSchedulerStore) {\n      throw new Error('nylasSchedulerStore is required');\n    }\n\n    if (!sessionId && !configId && !(slug || clientId)) {\n      throw new Error('sessionId is required for private configs. If using public config either pass a configurationId or a combination of slug and clientId.');\n    }\n\n    // If the url is only /, then we need to add the base url.\n    // We assume that the base url is the same as the current url.\n    if (schedulerAPIURL === '/') {\n      const url = new URL(window.location.href);\n      schedulerAPIURL = url.origin;\n    }\n\n    this.configId = configId;\n    this.sessionId = sessionId;\n    this.schedulerAPIURL = schedulerAPIURL;\n    this.nylasSchedulerStore = nylasSchedulerStore;\n    this.slug = slug;\n    this.clientId = clientId;\n  }\n\n  public init() {\n    debug('NylasConnector init');\n  }\n\n  public get schedulerStore() {\n    return this.nylasSchedulerStore;\n  }\n\n  public get scheduler() {\n    if (this._schedulerAPIConnector) {\n      return this._schedulerAPIConnector;\n    }\n    this._schedulerAPIConnector = new NylaSchedulerAPIConnector({\n      schedulerAPIURL: this.schedulerAPIURL,\n      schedulerStore: this.schedulerStore,\n      sessionId: this.sessionId,\n      configId: this.configId,\n      slug: this.slug,\n      clientId: this.clientId,\n    });\n    return this._schedulerAPIConnector;\n  }\n\n  public resetStores() {\n    this.nylasSchedulerStore.reset();\n  }\n}\nexport type PublicMethods<T> = {\n  [K in keyof T]: T[K] extends Function ? (string extends K ? never : K) : never;\n}[keyof T];\n\nexport type NylasSchedulerConnectorPublicMethods = PublicMethods<NylasSchedulerConnector>;\n","import { Fragment, FunctionalComponent, h } from '@stencil/core';\n\nexport type SchedulerViewProps = {\n  isLoading?: boolean;\n  showNotification?: boolean;\n  nylasBranding?: boolean;\n};\n\n/**\n * The Scheduler view component.\n */\nexport const SchedulerView: FunctionalComponent<SchedulerViewProps> = (props: SchedulerViewProps, children) => {\n  const isLoading = props.isLoading;\n  const showNotification = props.showNotification;\n  const nylasBranding = props.nylasBranding;\n\n  return (\n    <Fragment>\n      {showNotification && <nylas-notification></nylas-notification>}\n\n      {isLoading && (\n        <div class={'loading'}>\n          <div class={'left'}>\n            <div class={'skeleton'} />\n          </div>\n          <div class={'right'}>\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n            <div class={'skeleton'} />\n          </div>\n        </div>\n      )}\n      {!isLoading && children}\n      <div class={'footer'}>\n        {nylasBranding && (\n          <Fragment>\n            Powered by&nbsp;\n            <nylas-logo />\n          </Fragment>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n","import { FunctionalComponent, h } from '@stencil/core';\n\nexport type HeaderBannerProps = {};\n\nexport const MessageBanner: FunctionalComponent<HeaderBannerProps> = (_props: HeaderBannerProps, children) => <div class=\"message-banner\">{children}</div>;\n","@import '../../../common/styles/variables.scss';\n\n:host {\n  display: flex;\n  flex-direction: column;\n  overflow: visible;\n  border-radius: var(--nylas-border-radius-2x);\n  width: fit-content;\n\n  @media #{$mobile} {\n    width: auto;\n    min-width: 325px;\n  }\n\n  background: var(--nylas-base-0);\n  position: relative;\n  box-shadow: 0px 4px 8px 2px rgba(0, 0, 0, 0.05),\n  0px 8px 16px -2px rgba(0, 0, 0, 0.1);\n\n  @include default-css-variables;\n  font-family: var(--nylas-font-family);\n  font-optical-sizing: auto;\n  font-style: normal;\n  font-variation-settings: 'slnt' 0;\n}\n\n:root {\n  font-family: inherit;\n}\n\n.error {\n  padding: 8rem 12rem;\n  color: var(--nylas-base-0);\n  background-color: var(--nylas-error);\n  margin: 1.5rem;\n  border-radius: var(--nylas-border-radius-2x);\n}\n\n.message-banner {\n  text-align: right;\n  color: var(--nylas-base-800);\n  padding: 1rem;\n  border-bottom: 1px solid var(--nylas-color-primary-200);\n  margin: 0;\n}\n\n.loading {\n  margin: 1.5rem;\n  display: flex;\n  gap: 1rem;\n\n  .skeleton {\n    border-radius: var(--nylas-border-radius-2x);\n    animation: pulsate 1.5s infinite;\n\n    &:nth-child(2) {\n      animation-delay: -100ms;\n    }\n\n    &:nth-child(3) {\n      animation-delay: -200ms;\n    }\n\n    &:nth-child(4) {\n      animation-delay: -300ms;\n    }\n\n    &:nth-child(5) {\n      animation-delay: -400ms;\n    }\n  }\n\n  .left .skeleton {\n    height: 100%;\n    width: 400px;\n  }\n\n  .right .skeleton {\n    height: 5rem;\n    width: 300px;\n    margin-bottom: 1rem;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n}\n\n@keyframes pulsate {\n  0% {\n    background-color: var(--nylas-base-50);\n  }\n\n  50% {\n    background-color: var(--nylas-base-100);\n  }\n\n  100% {\n    background-color: var(--nylas-base-50);\n  }\n}\n\n.select-date-page,\n.additional-data-page,\n.booked-event-page,\n.manual-confirmation-page,\n.cancelled-event-page,\n.cancel-flow-page {\n  border-top-left-radius: var(--nylas-border-radius-2x);\n  border-top-right-radius: var(--nylas-border-radius-2x);\n}\n\n.select-date-page,\n.additional-data-page {\n  display: flex;\n\n  @media #{$mobile} {\n    flex-direction: column;\n  }\n}\n\n.booked-event-page,\n.manual-confirmation-page {\n  background-color: var(--nylas-base-50);\n}\n\n.cancelled-event-page,\n.manual-confirmation-page,\n.cancel-flow-page {\n  padding: 1rem;\n  height: 496px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.booked-event-page,\n.manual-confirmation-page,\n.cancelled-event-page,\n.cancel-flow-page {\n  min-width: 784px;\n\n  @media #{$mobile} {\n    min-width: 90%;\n  }\n\n  background: var(--nylas-base-50);\n}\n\n.left-panel {\n  display: flex;\n  flex-direction: column;\n  min-width: 424px;\n  border-top-left-radius: inherit;\n  background: var(--nylas-base-0);\n  position: relative;\n  padding: 1rem 0 0 0;\n  height: 624px;\n\n  @media #{$mobile} {\n    border-top-right-radius: inherit;\n    min-width: unset;\n    height: auto;\n  }\n}\n\n.select-date-page .left-panel {\n  @media #{$mobile} {\n    padding: 0.5rem 4px 0;\n    height: 624px;\n  }\n}\n\n.border {\n  margin-left: -20px; // Offset left padding\n  margin-right: -20px; // Offset right padding\n  border-top-width: 1px;\n  height: 0.5px;\n  background-color: var(--nylas-base-200);\n\n  @media #{$mobile} {\n    display: none;\n  }\n}\n\n.right-panel {\n  min-width: 360px;\n  width: 360px;\n  background-color: var(--nylas-base-50);\n  height: 624px;\n  padding-top: 16px;\n  border-left: 1px solid var(--nylas-base-200);\n  border-top-right-radius: inherit;\n\n  &.reschedule {\n    border-top-right-radius: 0px;\n  }\n\n  @media #{$mobile} {\n    border-top-right-radius: 0px;\n    width: inherit;\n    min-width: unset;\n    height: auto;\n  }\n\n  h2 {\n    display: flex;\n    margin: 0;\n    height: 48px;\n    gap: 0.5rem;\n    justify-content: center;\n    align-items: center;\n    width: auto;\n    font-size: 1.125rem;\n    line-height: 1.5rem;\n    font-weight: 500;\n    text-align: center;\n    color: var(--nylas-base-800);\n  }\n}\n\n.additional-data-page {\n  .left-panel {\n    background-color: var(--nylas-base-50);\n  }\n\n  .right-panel {\n    background-color: var(--nylas-base-0);\n  }\n}\n\nnylas-selected-event-card {\n  height: calc(640px - 36px);\n  padding: 0 1rem;\n\n  @media #{$mobile} {\n    height: 250px;\n  }\n}\n\n.footer {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 16px;\n  font-size: 14px;\n  font-weight: 300;\n  color: var(--nylas-base-500);\n  border-top: 1px solid var(--nylas-base-200);\n  min-height: 24px;\n\n  svg {\n    fill: var(--nylas-base-500);\n  }\n}\n\n.footer svg {\n  margin-top: 1px;\n}\n\nnylas-selected-event-card::part(nsec__timezone) {\n  position: absolute;\n  bottom: 0;\n}\n\nnylas-notification {\n  margin: 1.5rem;\n  width: -webkit-fill-available;\n  width: -moz-available;\n  position: absolute;\n}\n\nnylas-locale-switch {\n  position: absolute;\n  padding: 18px 20px;\n  bottom: 0;\n  width: -webkit-fill-available;\n  width: -moz-available;\n  border-top: 1px solid var(--nylas-base-200);\n\n  @media #{$mobile} {\n    height: auto;\n  }\n}\n\nnylas-date-picker {\n  padding: 0 20px;\n}","import { NylasBaseProvider } from '@/common/abstract-provider';\nimport { RegisteredComponent } from '@/common/register-component';\nimport type { SchedulerEventOverride } from '@/common/component-types';\nimport { NylasSchedulerConnector } from '@/connector/nylas-scheduler-connector';\nimport { CreateNylasSchedulerStore, NylasSchedulerStoreState, NylasSchedulerStoreType } from '@/stores/scheduler-store';\nimport {\n  NylasSchedulerBookingData,\n  ThemeConfig,\n  Notification,\n  NotificationType,\n  NylasSchedulerErrorResponse,\n  Timeslot,\n  NylasSchedulerResponse,\n  NylasSuccessResponse,\n} from '@nylas/core';\nimport { Component, Element, Event, EventEmitter, Host, Listen, Method, Prop, State, Watch, h } from '@stencil/core';\nimport { addDaysToCurrentDate, capitalizeFirstLetter, compactStringToUUIDs, debug } from '@/utils/utils';\nimport { SchedulerView } from './scheduler-view';\nimport { ErrorCategory } from '@/connector/nylas-scheduler-connector/errors';\nimport { MessageBanner } from './message-banner';\nimport i18next from '@/utils/i18n';\nimport { NylasEvent, UISettingsResponse } from '@/common/types';\nimport { LANGUAGE_CODE, LANGUAGE_CODE_MAP, Locale } from '@/common/constants';\n\nconst genericError = { title: i18next.t('genericErrorTitle'), type: NotificationType.Error, category: ErrorCategory.Component };\n\n/**\n * The `nylas-scheduling` component is used to display the Nylas Scheduling UI.\n *\n * @part ndp - [nylas-date-picker] The date picker host.\n * @part ndp__title - [nylas-date-picker] The title.\n * @part ndp__month-header - [nylas-date-picker] The month header.\n * @part ndp__month-button - [nylas-date-picker] The month button.\n * @part ndp__day - [nylas-date-picker] The day.\n * @part ndp__date - [nylas-date-picker] The date.\n * @part ndp__date--selected - [nylas-date-picker] The selected date.\n * @part ndp__date--current-day - [nylas-date-picker] The current day.\n * @part ndp__date--current-month - [nylas-date-picker] The dates in the current month.\n * @part ndp__date--disabled - [nylas-date-picker] The disabled dates.\n * @part ntp - [nylas-timeslot-picker] The timeslot picker component.\n * @part ntp__timeslot - [nylas-timeslot-picker] The timeslot button.\n * @part ntp__timeslot--selected - [nylas-timeslot-picker] The selected timeslot button.\n * @part ntp__button-primary - [nylas-timeslot-picker] The timeslot picker CTA.\n * @part nsec - [nylas-selected-event-card] The selected event card component.\n * @part nsec__card - [nylas-selected-event-card] The card component.\n * @part nsec__icon - [nylas-selected-event-card] The calendar icon.\n * @part nsec__date - [nylas-selected-event-card] The date selected.\n * @part nsec__time - [nylas-selected-event-card] The timeslot selected.\n * @part nbf - [nylas-booking-form] The booking form host.\n * @part nbf__input-textfield - [nylas-booking-form] The input textfield.\n * @part nbf__button-ghost - [nylas-booking-form] The ghost button.\n * @part nbf__button-outline - [nylas-booking-form] The outline button.\n * @part nbf__button-primary - [nylas-booking-form] The primary button.\n * @part nbf__input-wrapper - [nylas-booking-form] The input wrapper.\n * @part nbf__checkbox-component - [nylas-booking-form] The checkbox component.\n * @part nbf__radio-button-group - [nylas-booking-form] The radio button group.\n * @part nbf__textarea-component - [nylas-booking-form] The textarea component.\n * @part nbf__dropdown - [nylas-booking-form] The dropdown component.\n * @part nbf__dropdown-button - [nylas-booking-form] The dropdown button.\n * @part nbf__dropdown-content - [nylas-booking-form] The dropdown content.\n * @part ncec - [nylas-cancelled-event-card] The cancelled event card host.\n * @part ncec__icon - [nylas-cancelled-event-card] The calendar icon.\n * @part ncec__title - [nylas-cancelled-event-card] The title of the cancelled event card.\n * @part ncec__description - [nylas-cancelled-event-card] The description of the cancelled event card.\n * @part ncec__button-outline - [nylas-cancelled-event-card] The close button CTA.\n * @part ncec__card - [nylas-cancelled-event-card] The cancelled event card.\n * @part nbec - [nylas-booked-event-card] The booked event card host.\n * @part nbec__card - [nylas-booked-event-card] The booked event card.\n * @part nbec__title - [nylas-booked-event-card] The title of the booked event card.\n * @part nbec__description - [nylas-booked-event-card] The description of the booked event card.\n * @part nbec__button-outline - [nylas-booked-event-card] The cancel & reschedule button CTA.\n * @part nbec__cancel-cta - [nylas-booked-event-card] The cancel button CTA.\n * @part nbec__reschedule-cta - [nylas-booked-event-card] The reschedule button CTA.\n * @part nls - [nylas-locale-switch] The locale switch container.\n * @part nls__timezone - [nylas-locale-switch] The timezone select container\n * @part nls__timezone-dropdown - [nylas-locale-switch] The timezone dropdown\n * @part nls__timezone-drop-button - [nylas-locale-switch] The timezone dropdown button\n * @part nls__timezone-drop-button-selected-label - [nylas-locale-switch] The timezone dropdown button selected label\n * @part nls__timezone-drop-content - [nylas-locale-switch] The timezone dropdown content\n * @part nls__timezone-drop-label - [nylas-locale-switch] The timezone dropdown label\n * @part nls__language - [nylas-locale-switch] The language select container\n * @part nls__language-dropdown - [nylas-locale-switch] The language dropdown\n * @part nls__language-drop-button - [nylas-locale-switch] The language dropdown button\n * @part nls__language-drop-content - [nylas-locale-switch] The language dropdown content\n * @part nls__language-drop-label - [nylas-locale-switch] The language dropdown label\n * @part ncbf - [nylas-cancel-booking-form] The cancel booking form container.\n * @part ncbf__icon - [nylas-cancel-booking-form] The calendar icon.\n * @part ncbf__title - [nylas-cancel-booking-form] The title of the cancel booking form.\n * @part ncbf__description - [nylas-cancel-booking-form] The description of the cancel booking form.\n * @part ncbf__reason-textarea - [nylas-cancel-booking-form] The reason textarea.\n * @part ncbf__button-cta - [nylas-cancel-booking-form] The cancel booking form CTA button.\n * @part ncbf__button-outline - [nylas-cancel-booking-form] The cancel booking form outline button.\n * @part ncbf__card - [nylas-cancel-booking-form] The cancel booking form card.\n */\n@Component({\n  tag: 'nylas-scheduling',\n  styleUrl: 'nylas-scheduling.scss',\n  shadow: true,\n})\nexport class NylasScheduling {\n  /**\n   * Stores to be used by the provider.\n   */\n  private stores?: { scheduler: NylasSchedulerStoreType };\n\n  /**\n   * This is a base provide that defines the common methods and properties\n   * that all providers should have.\n   *\n   * Because stencil does not support abstract classes, we have to use a\n   * property to store the base provider instance.\n   */\n  private baseProvider?: NylasBaseProvider<Exclude<typeof this.stores, undefined>>;\n\n  /**\n   * The Nylas Scheduler Connector instance.\n   * The branins of the provider. It manages data fetching and state synchronization.\n   */\n  private nylasSchedulerConnector?: NylasSchedulerConnector;\n\n  /**\n   * The host element.\n   * Used to manage the host element of the provider.\n   */\n  @Element() private host!: HTMLNylasSchedulingElement;\n\n  /**\n   * This is used to set the mode for the Nylas Scheduler.\n   * The mode can be either `app` or `composable`. The default mode is `app`.\n   * - `app`: This mode is used to show the default Nylas Scheduler UI.\n   * - `composable`: This mode is used to show the composable Nylas Scheduler UI\n   *    by passing the individual scheduler components as children.\n   */\n  @Prop() readonly mode: 'app' | 'composable' = 'app';\n\n  /**\n   * The default scheduler store state.\n   * Used to set the initial state of the scheduler store.\n   */\n  @Prop({ attribute: 'default-scheduler-store-state' }) readonly defaultSchedulerState?: Partial<NylasSchedulerStoreState>;\n\n  /**\n   * The session ID for the Nylas Scheduler.\n   * This is used to authenticate the user.\n   */\n  @Prop() readonly sessionId?: string;\n\n  /**\n   * The URL for the Nylas Scheduler API. (staging or production URL)\n   */\n  @Prop() readonly schedulerApiUrl: string = 'https://api.us.nylas.com';\n\n  /**\n   * This enables passing the bookingInfo object to the Scheduler UI for direct booking event creation.\n   * When used with timeslotConfirmedHandler, it bypasses the additional data page and immediately\n   * invokes the handler after booking.\n   */\n  @Prop() readonly bookingInfo?: NylasSchedulerBookingData;\n\n  /**\n   * Booking Ref required for rescheduling flow.\n   */\n  @Prop() readonly rescheduleBookingRef?: string;\n\n  /**\n   * Booking Ref required for cancelling flow.\n   */\n  @Prop() readonly cancelBookingRef?: string;\n\n  /**\n   * Booking Ref required for the manual confirmation flow.\n   */\n  @Prop() readonly organizerConfirmationBookingRef?: string;\n\n  /**\n   * The config ID for the Nylas Scheduler. This should be passed in when using a public config,\n   * in which case the sessionId is not required.\n   */\n  @Prop() readonly configurationId?: string;\n\n  /**\n   * The slug of the configuration (public config) to be used for the Nylas Scheduler. This is used in conjunction with the clientId.\n   * When the configurationId is not provided, the slug and clientId are used to make requests to the Scheduler API endpoints.\n   * If the configurationId is provided, this prop will be ignored.\n   */\n  @Prop() readonly slug?: string;\n\n  /**\n   * The app ID of the configuration (public config) to be used for the Nylas Scheduler. This is used in conjunction with the slug.\n   * When the configurationId is not provided, the slug and clientId are used to make requests to the Scheduler API endpoints.\n   * If the configurationId is provided, this prop will be ignored.\n   */\n  @Prop() readonly clientId?: string;\n\n  /**\n   * This prop lets you hide the Nylas branding.\n   * Default is true.\n   */\n  @Prop() readonly nylasBranding?: boolean = true;\n\n  /**\n   * This provides an easy way to override the default function of the event emitter.\n   * An example of this is the `timeslotConfirmed` event. By default, this event will set the scheduler store state for `showBookingForm` to `true` which will\n   * show the booking form. However, if you want to override this behavior, you can pass in the prop `eventOverride` like:\n   * ```html\n   * <nylas-scheduling eventOverride={{\"timeslotConfirmed\": (event, nylasConnector) => { console.log(\"Timeslot confirmed event fired!\"); } }} />\n   * ```\n   */\n  @Prop({ attribute: 'event-overrides' }) readonly eventOverrides: SchedulerEventOverride = {};\n\n  /**\n   * The loading state. This is used to set the loading state for the Nylas Scheduler when fetching data.\n   */\n  @Prop() readonly isLoading?: boolean;\n\n  /**\n   * Theme config, used to automatically generate a theme with color palette and\n   * CSS variables to customize the look and feel of the Nylas Scheduler.\n   */\n  @Prop() readonly themeConfig?: ThemeConfig;\n\n  /**\n   * This prop will allow to override the default localization strings for each language.\n   * Nylas scheduling page currently support the following language codes: en, es, fr, de, sv, zh, ja, nl.\n   */\n  @Prop() readonly localization?: Partial<Record<LANGUAGE_CODE, Locale>>;\n\n  /*\n   * Displays notifications for errors by default. When enabled (`true`), errors\n   * automatically appear as notifications. Disabling this feature (`false`) allows\n   * the parent application to capture and manage errors by listening to the\n   * `nylasSchedulerError` event, providing flexibility in error handling.\n   */\n  @Prop() readonly showNotification?: boolean = true;\n\n  /**\n   * Automatically register components that have the `@RegisterComponent` decorator.\n   * If this is set to false, you will need to manually register components using the\n   * `registerComponent` method.\n   * @default true\n   */\n  @State() automaticComponentRegistration: boolean = true;\n\n  /**\n   * The selected date label for the Nylas Scheduler.\n   * This is used to set the initial date label for the Nylas Scheduler.\n   */\n  @State() selectedDateLabel: string = new Date().toLocaleDateString(undefined, { dateStyle: 'full' }) || `${i18next.t('noDateSelected')}`;\n\n  /**\n   * The config id extracted from the rescheduleBookingRef or cancelBookingRef or organizerConfirmationBookingRef.\n   */\n  @State() refConfigId?: string;\n\n  /**\n   * The selected language for the Nylas Scheduler.\n   */\n  @State() language: string = navigator.language;\n\n  /**\n   * This event is fired when the provider is initialized.\n   * It can be used to set the initial state of the provider,\n   * or to prevent the provider from firing some default behavior.\n   */\n  @Event({ cancelable: true }) init!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  /**\n   * This event is fired when the scheduler component enters componentWillLoad lifecycle.\n   */\n  @Event() schedulerWillLoad!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  /**\n   * This event is fired when the scheduler component enters componentDidLoad lifecycle.\n   */\n  @Event() schedulerDidLoad!: EventEmitter<HTMLNylasSchedulingElement>;\n\n  @Event({\n    eventName: 'nylasSchedulerError',\n  })\n  nylasSchedulerError!: EventEmitter<{ notification: Notification; host: HTMLElement }>;\n\n  @Event({\n    eventName: 'configSettingsLoaded',\n  })\n  configSettingsLoaded!: EventEmitter<{ settings: NylasSchedulerResponse<UISettingsResponse> }>;\n\n  /**\n   * This event is triggered if either the rescheduleBookingRef or cancelBookingRef or organizerConfirmationBookingRef prop\n   * is supplied and the component has been attached to the DOM. It emits the configurationId\n   * and bookingId derived from the rescheduleBookingRef or cancelBookingRef or organizerConfirmationBookingRef. Subscribe to this\n   * event to obtain the extracted configurationId, which is necessary to generate the sessionID\n   * for configurations that are not public.\n   */\n  @Event() bookingRefExtracted!: EventEmitter<{ configurationId: string; bookingId: string; salt?: string }>;\n\n  /**\n   * This event is triggered on successful booking request. It emits the event data.\n   */\n  @Event() bookedEventInfo!: EventEmitter<NylasSchedulerResponse<NylasEvent>>;\n\n  /**\n   * This function is called when the component is connected to the DOM.\n   * At this point in the component lifecycle, the base provider has not yet\n   * been initialized. So avoid using the base provider in this method or stores\n   * in this method.\n   */\n  connectedCallback() {\n    debug(`[nylas-scheduler] connectedCallback`);\n  }\n\n  async componentWillLoad() {\n    debug(`[nylas-scheduler] Component will load`);\n\n    // Emit the schedulerWillLoad event to allow the parent application to set the initial\n    // state of the provider or to prevent the provider from firing some default behavior.\n    const schedulerWillLoadEvent = this.schedulerWillLoad.emit(this.host);\n    if ('schedulerWillLoad' in this.eventOverrides) {\n      await this.eventOverrides.schedulerWillLoad(schedulerWillLoadEvent, this.nylasSchedulerConnector);\n      if (schedulerWillLoadEvent.defaultPrevented) {\n        return;\n      }\n    }\n\n    this.stores = {\n      scheduler: CreateNylasSchedulerStore({\n        bookingInfo: this.bookingInfo,\n        nylasBranding: this.nylasBranding,\n        ...this.defaultSchedulerState,\n      }),\n    };\n\n    this.baseProvider = new NylasBaseProvider(this.host, this.stores, this.automaticComponentRegistration, this.eventOverrides);\n\n    // Set the configId to the reschedule configId if rescheduleBookingRef is provided or\n    // Set the configId to the cancel configId if cancelBookingRef is provided\n    this.refConfigId = this.configurationId;\n    let bookingRefExtractedEvent;\n    if (this.rescheduleBookingRef) {\n      const [rescheduleConfigId, rescheduleBookingId, _] = compactStringToUUIDs(this.rescheduleBookingRef);\n      this.refConfigId = rescheduleConfigId;\n      this.stores.scheduler.set('rescheduleBookingId', rescheduleBookingId);\n      bookingRefExtractedEvent = this.bookingRefExtracted.emit({ configurationId: rescheduleConfigId, bookingId: rescheduleBookingId });\n    } else if (this.cancelBookingRef) {\n      const [cancelConfigId, cancelBookingId, _] = compactStringToUUIDs(this.cancelBookingRef);\n      this.refConfigId = cancelConfigId;\n      this.stores.scheduler.set('cancelBookingId', cancelBookingId);\n      bookingRefExtractedEvent = this.bookingRefExtracted.emit({ configurationId: cancelConfigId, bookingId: cancelBookingId });\n    } else if (this.organizerConfirmationBookingRef) {\n      const [organizerConfirmationConfigId, organizerConfirmationBookingId, salt] = compactStringToUUIDs(this.organizerConfirmationBookingRef);\n      this.refConfigId = organizerConfirmationConfigId;\n      this.stores.scheduler.set('organizerConfirmationBookingId', organizerConfirmationBookingId);\n      this.stores.scheduler.set('organizerConfirmationSalt', salt);\n      bookingRefExtractedEvent = this.bookingRefExtracted.emit({ configurationId: organizerConfirmationConfigId, bookingId: organizerConfirmationBookingId, salt: salt });\n    }\n\n    if ('bookingRefExtracted' in this.eventOverrides) {\n      await this.eventOverrides.bookingRefExtracted(bookingRefExtractedEvent, this.nylasSchedulerConnector);\n      if (bookingRefExtractedEvent.defaultPrevented) {\n        return;\n      }\n    }\n\n    if (!this.checkIfSessionIdOrConfigIdExists()) {\n      return;\n    }\n\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    this.nylasSchedulerConnector = new NylasSchedulerConnector({\n      schedulerAPIURL: this.schedulerApiUrl,\n      sessionId: this.sessionId,\n      configId: this.refConfigId,\n      slug: this.slug,\n      clientId: this.clientId,\n      nylasSchedulerStore,\n    });\n\n    const initEvent = this.init.emit(this.host);\n    if ('init' in this.eventOverrides) {\n      await this.eventOverrides.init(initEvent, this.nylasSchedulerConnector);\n      if (initEvent.defaultPrevented) {\n        return;\n      }\n    }\n\n    this.baseProvider?.componentWillLoad(this.nylasSchedulerConnector);\n    // Override theme\n    this.applyThemeConfig(this.themeConfig);\n  }\n\n  async componentDidLoad() {\n    this.baseProvider?.componentDidLoad();\n\n    const schedulerDidLoadEvent = this.schedulerDidLoad.emit(this.host);\n    if ('schedulerDidLoad' in this.eventOverrides) {\n      await this.eventOverrides.schedulerDidLoad(schedulerDidLoadEvent, this.nylasSchedulerConnector);\n      if (schedulerDidLoadEvent.defaultPrevented) {\n        return;\n      }\n    }\n\n    // If sessionId is not provided, do not fetch availability\n    if (!this.checkIfSessionIdOrConfigIdExists()) {\n      return;\n    }\n    this.localizationChanged(this.localization);\n    const settingsResponse = await this.nylasSchedulerConnector?.scheduler.getUISettings();\n    if (!settingsResponse || 'error' in settingsResponse) {\n      this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(settingsResponse?.error) }, host: this.host });\n      return;\n    } else {\n      if ('data' in settingsResponse && settingsResponse.data?.appearance) {\n        console.info(\n          'Appearance settings have been returned from the configuration used byt his scheduling page; please remember to grab them from the configSettingsLoaded event and apply them as desired.',\n        );\n      }\n      const configSettingsLoadedEvent = this.configSettingsLoaded.emit({ settings: settingsResponse });\n      if ('configSettingsLoaded' in this.eventOverrides) {\n        await this.eventOverrides.configSettingsLoaded(configSettingsLoadedEvent, this.nylasSchedulerConnector);\n        if (configSettingsLoadedEvent.defaultPrevented) {\n          return;\n        }\n      }\n    }\n\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    const availableDaysInFuture = nylasSchedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;\n    const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot');\n\n    if (selectedTimeslot && selectedTimeslot?.start_time) {\n      if (!this.isTimeslotValid(selectedTimeslot)) {\n        return;\n      }\n\n      // If the selected timeslot is already set, do not fetch availability\n      if (nylasSchedulerStore?.get('showBookingForm')) {\n        nylasSchedulerStore?.set('selectedDate', selectedTimeslot.start_time);\n        return;\n      }\n    }\n\n    const selectedDate = nylasSchedulerStore?.get('selectedDate');\n    const availability = nylasSchedulerStore?.get('availability');\n    let result;\n\n    if (availability && availability.length > 0) {\n      return;\n    }\n\n    if (!selectedDate) {\n      const today = new Date();\n      const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(today, availableDaysInFuture || 30);\n      if (today.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n        result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n      }\n    } else {\n      const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(selectedDate, availableDaysInFuture || 30);\n      if (selectedDate.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n        result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n      }\n    }\n\n    if (!result || 'error' in result) {\n      this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(result?.error) }, host: this.host });\n    }\n\n    if (!selectedDate) {\n      let _selectedDate = new Date();\n      const firstAvailableDate = nylasSchedulerStore?.get('availability').find((timeslot: any) => new Date(timeslot.start_time) > new Date());\n      if (firstAvailableDate) {\n        _selectedDate = firstAvailableDate.start_time;\n      }\n      nylasSchedulerStore?.set('selectedDate', _selectedDate);\n    }\n  }\n\n  componentDisconnected() {\n    this.baseProvider?.componentDisconnected();\n  }\n\n  @Watch('bookingInfo')\n  bookingInfoChanged(newVal?: NylasSchedulerBookingData) {\n    this.stores?.scheduler.set('bookingInfo', newVal);\n  }\n\n  @Watch('rescheduleBookingRef')\n  rescheduleBookingRefChanged(newVal?: string) {\n    if (newVal) {\n      const [configId, bookingId] = compactStringToUUIDs(newVal);\n      this.stores?.scheduler.set('rescheduleBookingId', bookingId);\n      this.refConfigId = configId;\n      this.nylasSchedulerConnector?.scheduler.setConfigId(configId);\n    }\n  }\n\n  @Watch('cancelBookingRef')\n  cancelBookingRefChanged(newVal?: string) {\n    if (newVal) {\n      const [configId, bookingId] = compactStringToUUIDs(newVal);\n      this.stores?.scheduler.set('cancelBookingId', bookingId);\n      this.refConfigId = configId;\n      this.nylasSchedulerConnector?.scheduler.setConfigId(configId);\n    }\n  }\n\n  @Watch('organizerConfirmationBookingRef')\n  organizerConfirmationBookingRefChanged(newVal?: string) {\n    if (newVal) {\n      const [configId, bookingId] = compactStringToUUIDs(newVal);\n      this.stores?.scheduler.set('organizerConfirmationBookingId', bookingId);\n      this.refConfigId = configId;\n      this.nylasSchedulerConnector?.scheduler.setConfigId(configId);\n    }\n  }\n\n  @Watch('localization')\n  localizationChanged(newVal?: Partial<Record<LANGUAGE_CODE, Locale>>) {\n    if (!newVal) {\n      return;\n    }\n\n    Object.keys(newVal).forEach(lang => {\n      if (!(lang in LANGUAGE_CODE)) {\n        return;\n      }\n      i18next.addResourceBundle(\n        lang,\n        'translation',\n        newVal[lang],\n        false, // Merge with existing translations\n        true, // Replace the existing translations with the same key\n      );\n      this.language = this.language;\n    });\n  }\n\n  @Watch('themeConfig')\n  themeConfigChanged(newVal?: ThemeConfig) {\n    this.applyThemeConfig(newVal);\n  }\n\n  @Listen('languageChanged')\n  languageChanged(event: CustomEvent<string>) {\n    const newLanguage = event.detail;\n    this.language = newLanguage;\n    i18next.changeLanguage(newLanguage);\n  }\n\n  /**\n   * This is a custom event handler that is used to register a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to register\n   * @returns Promise<void>\n   */\n  @Listen('registerComponent')\n  async registerComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.registerComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to unregister a component with the provider.\n   * It is used by components that have the `@RegisterComponent` decorator.\n   * @param event A custom event that contains the component to unregister\n   * @returns Promise<void>\n   */\n  @Listen('unregisterComponent')\n  async unregisterComponentHandler(event: CustomEvent<RegisteredComponent<any, any>>): Promise<void> {\n    this.baseProvider?.unregisterComponent(event.detail);\n  }\n\n  /**\n   * This is a custom event handler that is used to refetch the availability when the month is changed.\n   */\n  @Listen('monthChanged')\n  async monthChangedHandler(event: CustomEvent<Date>) {\n    const date = event.detail;\n    const availableDaysInFuture = this.nylasSchedulerConnector?.schedulerStore?.get('configSettings')?.scheduler?.available_days_in_future;\n    const { startTime, endTime, endTimeForAvailableDaysInFuture } = this.validateAvailableDaysInFuture(date, availableDaysInFuture || 30);\n\n    if (startTime < endTimeForAvailableDaysInFuture && date.getTime() < endTimeForAvailableDaysInFuture * 1000) {\n      const result = await this.nylasSchedulerConnector?.scheduler.getAvailability(startTime, endTime);\n\n      if (!result || 'error' in result) {\n        this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(result?.error) }, host: this.host });\n      }\n      const selectableDates = this.stores?.scheduler.get('selectableDates');\n      if (selectableDates && selectableDates.length > 0) {\n        this.stores?.scheduler.set('selectedDate', selectableDates[0]);\n      }\n    }\n  }\n\n  mapToBookingData(bookingInfo: NylasSchedulerBookingData): any {\n    const timeslot = this.stores?.scheduler.get('selectedTimeslot');\n    const language = this.stores?.scheduler.get('selectedLanguage');\n    const timezone = this.stores?.scheduler.get('selectedTimezone');\n    const startTime = timeslot?.start_time ? new Date(timeslot?.start_time).getTime() / 1000 : '';\n    const endTime = timeslot?.end_time ? new Date(timeslot?.end_time).getTime() / 1000 : '';\n    return {\n      additional_guests: bookingInfo.guests,\n      guest: bookingInfo.primaryParticipant,\n      additional_fields: bookingInfo.additionalFields,\n      start_time: startTime,\n      end_time: endTime,\n      email_language: language,\n      timezone: timezone,\n    };\n  }\n\n  /**\n   * This is a custom event handler to book an event.\n   */\n  @Listen('detailsConfirmed')\n  async bookButtonClickedHandler(event: CustomEvent<NylasSchedulerBookingData>) {\n    const bookingData = event.detail;\n    const mappedBookingData = this.mapToBookingData(bookingData);\n    const storeRescheduleId = this.nylasSchedulerConnector?.schedulerStore?.get('rescheduleBookingId');\n    const rescheduleBookingId = storeRescheduleId;\n    if (rescheduleBookingId) {\n      const result = await this.nylasSchedulerConnector?.scheduler.rescheduleBooking(rescheduleBookingId, bookingData);\n      if (!result || 'error' in result) {\n        this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(result?.error) }, host: this.host });\n      }\n      const resultData = (result as NylasSuccessResponse<NylasEvent>)?.data;\n      const bookedEventInfoEvent = this.bookedEventInfo.emit({ ...result, data: { ...resultData, ...mappedBookingData } });\n      if ('bookedEventInfo' in this.eventOverrides) {\n        await this.eventOverrides.bookedEventInfo(bookedEventInfoEvent, this.nylasSchedulerConnector);\n      }\n      return;\n    }\n    const result = await this.nylasSchedulerConnector?.scheduler.bookTimeslot(bookingData);\n    if (!result || 'error' in result) {\n      this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(result?.error) }, host: this.host });\n    }\n    const resultData = (result as NylasSuccessResponse<NylasEvent>)?.data;\n    const bookedEventInfoEvent = this.bookedEventInfo.emit({ ...result, data: { ...resultData, ...mappedBookingData } });\n    if ('bookedEventInfo' in this.eventOverrides) {\n      await this.eventOverrides.bookedEventInfo(bookedEventInfoEvent, this.nylasSchedulerConnector);\n    }\n  }\n\n  /**\n   * This is a custom event handler to update the selected date label.\n   */\n  @Listen('dateSelected')\n  dateSelectedHandler(event: CustomEvent<Date>) {\n    const date = event.detail;\n    this.selectedDateLabel = date ? date.toLocaleDateString(undefined, { dateStyle: 'full' }) : `${i18next.t('noDateSelected')}`;\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * cancel booking button is clicked on the cancel booking form.\n   */\n  @Listen('cancelBookedEventError')\n  cancelBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(event.detail.error) }, host: this.host });\n  }\n\n  @Listen('cancelBookedEventValidationError')\n  cancelBookedEventValidationErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(event.detail.error) }, host: this.host });\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * reschedule button is clicked on the booked event card.\n   */\n  @Listen('rescheduleBookedEventError')\n  rescheduleBookedEventErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(event.detail.error) }, host: this.host });\n  }\n\n  /**\n   * This is an event handler to handle the error (if any) when the\n   * manual confirmation button is clicked on the manual confirmation card.\n   */\n  @Listen('confirmBookingError')\n  confirmBookingErrorHandler(event: CustomEvent<NylasSchedulerErrorResponse>) {\n    this.nylasSchedulerError.emit({ notification: { ...this.getErrorObject(event.detail.error) }, host: this.host });\n  }\n\n  /**\n   * This method is used to retrieve the NylasScheduler instance\n   * @returns The NylasScheduler instance\n   */\n  @Method()\n  async getNylasSchedulerStore(): Promise<NylasSchedulerStoreType | undefined> {\n    return this.baseProvider?.getStore('scheduler');\n  }\n\n  /**\n   * This method is used to retrieve the NylasConnector instance\n   * @returns The NylasConnector instance\n   */\n  @Method()\n  async getNylasSchedulerConnector() {\n    return this.nylasSchedulerConnector;\n  }\n\n  @Method()\n  async getRef() {\n    return this.host;\n  }\n\n  private getErrorObject(error: NylasSchedulerErrorResponse['error']): Notification {\n    return {\n      title: error?.title || genericError.title,\n      category: error?.category || genericError.category,\n      type: NotificationType.Error,\n      description: error?.message || '',\n      id: new Date().getTime().toString(),\n      ttl: 'none',\n    };\n  }\n  private checkIfSessionIdOrConfigIdExists(): boolean {\n    if (!this.sessionId && !this.refConfigId && !(this.slug && this.clientId)) {\n      let description = '';\n\n      if (!this.sessionId) {\n        description += i18next.t('sessionIdRequiredErrorMessage');\n      }\n\n      if (!this.sessionId && !this.refConfigId && !(this.slug && this.clientId)) {\n        description = i18next.t('sessionIdRequiredErrorMessage') + ' ' + i18next.t('publicConfigErrorMessage');\n      }\n\n      this.nylasSchedulerError.emit({\n        notification: {\n          title: i18next.t('schedulingComponentErrorTitle'),\n          category: ErrorCategory.Component,\n          type: NotificationType.Error,\n          description: description,\n          id: new Date().getTime().toString(),\n          ttl: 'none',\n        },\n        host: this.host,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private isTimeslotValid(timeslot: Timeslot): boolean {\n    const selectedDate = new Date(timeslot.start_time);\n    if (selectedDate < new Date()) {\n      this.nylasSchedulerError.emit({\n        notification: {\n          title: i18next.t('invalidTimeslotErrorTitle'),\n          category: ErrorCategory.Component,\n          type: NotificationType.Error,\n          description: i18next.t('invalidTimeslotErrorMessage'),\n          id: new Date().getTime().toString(),\n          ttl: 'none',\n        },\n        host: this.host,\n      });\n      return false;\n    }\n    return true;\n  }\n\n  private validateAvailableDaysInFuture(\n    startDate: Date,\n    availableDaysInFuture: number,\n  ): {\n    startTime: number;\n    endTime: number;\n    endTimeForAvailableDaysInFuture: number;\n  } {\n    const today = new Date();\n    const startTime = new Date(startDate.getFullYear(), startDate.getMonth(), 1).getTime() / 1000;\n    const endTimeForCurrentMonth = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 1).getTime() / 1000;\n    const endTimeForAvailableDaysInFuture = Math.floor(addDaysToCurrentDate(today, availableDaysInFuture).getTime() / 1000);\n    const endTime = Math.min(endTimeForAvailableDaysInFuture, endTimeForCurrentMonth);\n    const startTimeWithOffset = startTime < today.getTime() / 1000 ? Math.floor(today.getTime() / 1000) : startTime;\n    return { startTime: startTimeWithOffset, endTime, endTimeForAvailableDaysInFuture };\n  }\n\n  private applyThemeConfig(themeConfig?: ThemeConfig) {\n    if (themeConfig) {\n      for (const [key, value] of Object.entries(themeConfig)) {\n        this.host.style.setProperty(`${key}`, value);\n      }\n    }\n  }\n\n  /**\n   * @slot timeslot-picker-cta-label - This slot is used to pass a custom label to the timeslot picker CTA. The default label is \"Next\".\n   * @slot custom-booking-form - This slot is used to pass a custom booking form to the Nylas Scheduling component.\n   * @deprecated  Deprecated in favor of using the additional fields defined in the config settings.\n   */\n  render() {\n    const showDefaultScheduler = this.mode === 'app';\n    const nylasSchedulerStore = this.baseProvider?.getStore('scheduler');\n    const eventInfo = nylasSchedulerStore?.get('eventInfo');\n    const showBookingForm = nylasSchedulerStore?.get('showBookingForm');\n    const cancelledEventInfo = nylasSchedulerStore?.get('cancelledEventInfo');\n    const cancelBookingId = nylasSchedulerStore?.get('cancelBookingId');\n    const selectedTimeslot = nylasSchedulerStore?.get('selectedTimeslot') as Timeslot;\n    const rescheduleBookingId = nylasSchedulerStore?.get('rescheduleBookingId');\n    const organizerConfirmationBookingId = nylasSchedulerStore?.get('organizerConfirmationBookingId');\n    const rejectBookingId = nylasSchedulerStore?.get('rejectBookingId');\n    const confirmedEventInfo = nylasSchedulerStore?.get('confirmedEventInfo');\n    const nylasBranding = nylasSchedulerStore?.get('nylasBranding') || this.nylasBranding;\n    const selectedDate = nylasSchedulerStore?.get('selectedDate');\n    const redirectUrl = nylasSchedulerStore?.get('configSettings')?.scheduler?.confirmation_redirect_url;\n    this.selectedDateLabel =\n      selectedDate && this.language\n        ? capitalizeFirstLetter(selectedDate.toLocaleDateString(LANGUAGE_CODE_MAP[this.language], { dateStyle: 'full' }))\n        : `${i18next.t('noDateSelected')}`;\n\n    if (showDefaultScheduler && (cancelBookingId || rejectBookingId) && !cancelledEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancel-flow-page\" part=\"cancel-flow-page\">\n              <nylas-cancel-booking-form\n                selectedTimeslot={selectedTimeslot}\n                cancelBookingId={cancelBookingId}\n                rejectBookingId={rejectBookingId}\n                exportparts=\"ncbf, ncbf__icon, ncbf__title, ncbf__description, ncbf__reason-textarea, ncbf__button-cta, ncbf__button-outline, ncbf__card\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Manual confirmation page is shown when the event is manually confirmed\n    if (showDefaultScheduler && organizerConfirmationBookingId) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"manual-confirmation-page\" part=\"manual-confirmation-page\">\n              <nylas-organizer-confirmation-card\n                organizerConfirmationBookingId={organizerConfirmationBookingId}\n                exportparts=\"nmcc, nmcc__title, nmcc__description, nmcc__button-cta, nmcc__button-outline\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Cancelled event card is shown when the event is cancelled\n    if (showDefaultScheduler && cancelledEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancelled-event-page\" part=\"cancelled-event-page\">\n              <nylas-cancelled-event-card\n                cancelledEventInfo={cancelledEventInfo}\n                exportparts=\"ncec, ncec__icon, ncec__title, ncec__description, ncec__button-outline, ncec__card\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Confirmed event card is shown when the event is confirmed\n    if (showDefaultScheduler && confirmedEventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"cancelled-event-page\" part=\"confirmed-event-page\">\n              <nylas-confirmed-event-card\n                confirmedEventInfo={confirmedEventInfo}\n                exportparts=\"ncec, ncec__icon, ncec__title, ncec__description, ncec__button-outline, ncec__card\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    // Redirected to custom URL when the event is booked and redirect URL is provided\n    if (showDefaultScheduler && eventInfo && redirectUrl) {\n      window.location.assign(redirectUrl);\n      return;\n    }\n\n    // Booked event card is shown when the event is booked or booking is sent\n    if (showDefaultScheduler && eventInfo) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            <div class=\"booked-event-page\" part=\"booked-event-page\">\n              <nylas-booked-event-card\n                selectedTimeslot={selectedTimeslot}\n                eventInfo={eventInfo}\n                exportparts=\"nbec, nbec__title, nbec__card, nbec__description, nbec__button-outline, nbec__cancel-cta, nbec__reschedule-cta\"\n              />\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Date and time picker is shown when the event is not booked and no additional data is shown\n    if (showDefaultScheduler && (!eventInfo || !!rescheduleBookingId) && !showBookingForm) {\n      const timeslotPickerCTALabel = this.host.querySelector('[slot=\"timeslot-picker-cta-label\"]');\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            {rescheduleBookingId && <MessageBanner>{`${i18next.t('rescheduleTitle')}`}</MessageBanner>}\n            <div class=\"select-date-page\" part=\"select-date-page\">\n              <div class=\"left-panel\">\n                <nylas-date-picker exportparts=\"ndp, ndp__title, ndp__month-header, ndp__month-button, ndp__day, ndp__date, ndp__date--disabled, ndp__date--selected, ndp__date--current-day, ndp__date--current-month\"></nylas-date-picker>\n                <nylas-locale-switch exportparts=\"nls, nls__timezone, nls__timezone-dropdown, nls__timezone-drop-button, nls__timezone-drop-button-selected-label, nls__timezone-drop-content, nls__timezone-drop-label, nls__language, nls__language-dropdown, nls__language-drop-button, nls__language-drop-content, nls__language-drop-label\"></nylas-locale-switch>\n              </div>\n              <div class={`right-panel ${rescheduleBookingId ? 'reschedule' : ''}`}>\n                <h2>\n                  <calendar-icon></calendar-icon>\n                  <span id=\"selectedDate\">{this.selectedDateLabel}</span>\n                </h2>\n                <nylas-timeslot-picker exportparts=\"ntp, ntp__timeslot, ntp__timeslot--selected, ntp__button-primary\">\n                  {timeslotPickerCTALabel && (\n                    <span slot=\"timeslot-picker-cta-label\">\n                      <slot name=\"timeslot-picker-cta-label\"></slot>\n                    </span>\n                  )}\n                </nylas-timeslot-picker>\n              </div>\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n    // Additional data is shown when the time is selected, event is not booked and additional data is shown\n    if (showDefaultScheduler && !eventInfo && showBookingForm) {\n      return (\n        <Host>\n          <SchedulerView nylasBranding={nylasBranding} isLoading={this.isLoading} showNotification={this.showNotification}>\n            {rescheduleBookingId && <MessageBanner>{`${i18next.t('rescheduleTitle')}`}</MessageBanner>}\n            <div class=\"additional-data-page\" part=\"additional-data-page\">\n              <div class=\"left-panel\">\n                <div class=\"wrapper\">\n                  <nylas-selected-event-card exportparts=\"nsec, nsec__card, nsec__icon, nsec__date, nsec__time, nsec__timezone\"></nylas-selected-event-card>\n                </div>\n              </div>\n              <div class={`right-panel ${rescheduleBookingId ? 'reschedule' : ''}`}>\n                <nylas-booking-form exportparts=\"nbf, nbf__input-textfield, nbf__button-ghost, nbf__button-outline, nbf__button-primary, nbf__input-wrapper, nbf__checkbox-component, nbf__radio-button-group, nbf__textarea-component, nbf__dropdown, nbf__dropdown-button, nbf__dropdown-content\"></nylas-booking-form>\n              </div>\n            </div>\n          </SchedulerView>\n        </Host>\n      );\n    }\n\n    return (\n      <Host>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}