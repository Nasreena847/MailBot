{"file":"nylas-booking-confirmation-redirect.entry.esm.js","mappings":"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","names":[],"sources":["src/components/scheduler-editor/nylas-booking-confirmation-redirect/nylas-booking-confirmation-redirect.scss?tag=nylas-booking-confirmation-redirect&encapsulation=shadow","src/components/scheduler-editor/nylas-booking-confirmation-redirect/nylas-booking-confirmation-redirect.tsx"],"sourcesContent":["@import '../../../common/styles/variables.scss';\n\n:host {\n  display: block;\n  @include default-css-variables;\n  width: inherit;\n}\n\n.nylas-booking-confirmation-redirect {\n  width: inherit;\n  display: flex;\n  flex-direction: column;\n\n  .nylas-booking-confirmation-redirect__dropdown {\n    span.label {\n      display: flex;\n      align-items: center;\n      gap: 4px;\n      margin-bottom: 4px;\n      color: var(--nylas-base-800);\n\n      tooltip-component {\n        display: flex;\n      }\n    }\n\n    select-dropdown::part(sd_dropdown) {\n      width: 100%;\n    }\n\n    select-dropdown::part(sd_dropdown-button) {\n      width: 100%;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      border: 1px solid var(--nylas-base-200);\n      border-radius: var(--nylas-border-radius-2x);\n      padding: 1rem;\n    }\n\n    select-dropdown::part(sd_dropdown-content) {\n      width: 100%;\n      max-width: unset;\n    }\n\n    select-dropdown::part(sd_dropdown-button-selected-label) {\n      max-width: calc(100% - 2rem);\n      font-family: var(--nylas-font-family);\n      font-size: 16px;\n      line-height: 24px;\n    }\n\n    input-component::part(ic__input_wrapper) {\n      margin-top: 1rem;\n    }\n\n    span.error-message {\n      color: var(--nylas-error);\n    }\n  }\n}\n","import { RegisterComponent } from '@/common/register-component';\nimport { NylasSchedulerConfigConnector } from '@/connector/nylas-scheduler-config-connector';\nimport { debug } from '@/utils/utils';\nimport { AttachInternals, Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { NylasSchedulerEditor } from '../nylas-scheduler-editor/nylas-scheduler-editor';\nimport { isValidUrl } from '@/utils/utils';\nimport { Configuration } from '@nylas/core';\n\n/**\n * The `nylas-booking-confirmation-redirect` component is a UI component that allows the user to choose a custom redirect URL after a booking is confirmed.\n * @part nbcr - The booking redirect container\n * @part nbcr__header - The header of the booking redirect\n * @part nbcr__dropdown - The dropdown container\n * @part nbcr__dropdown-button - The dropdown button\n * @part nbcr__dropdown-content - The dropdown content\n * @part nbcr__input-textfield - The input field content\n */\n@Component({\n  tag: 'nylas-booking-confirmation-redirect',\n  styleUrl: 'nylas-booking-confirmation-redirect.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class NylasBookingConfirmationRedirect {\n  @Element() host!: HTMLNylasBookingConfirmationRedirectElement;\n  /**\n   * The selected config\n   */\n  @Prop() selectedConfiguration?: Configuration;\n  /**\n   * The name of the confirmation redirect link.\n   */\n  @Prop() name: string = 'confirmation-redirect';\n  /**\n   * The custom redirect URL.\n   */\n  @Prop() redirectUrl: string = '';\n  /**\n   * The custom redirect URL error message\n   */\n  @Prop() redirectUrlErrorMessage: string = '';\n  /**\n   * The element internals.\n   */\n  @AttachInternals() internals!: ElementInternals;\n\n  /**\n   * The current redirect URL.\n   */\n  @State() currentRedirectUrl: string = '';\n  /**\n   * The state for whether a custom URL can be added.\n   */\n  @State() acceptUrl!: boolean;\n\n  @State() componentLoaded: boolean = false;\n\n  /**\n   * This event is fired when the current redirect URL changes and is valid.\n   */\n  @Event() valueChanged!: EventEmitter<{\n    value: string;\n    name: string;\n    valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void;\n  }>;\n\n  /**\n   * When a name prop is passed, stencil does not automatically set the name attribute on the host element.\n   * Since this component is form-associated, the name attribute is required for form submission.\n   * This is a workaround to ensure that the name attribute is set on the host element.\n   */\n  @Watch('name')\n  elementNameChangedHandler(newValue: string) {\n    debug('nylas-booking-confirmation-redirect', 'elementNameChangedHandler', newValue);\n    this.host.setAttribute('name', newValue);\n  }\n\n  @Watch('selectedConfiguration')\n  selectedConfigurationChangedHandler(newValue: Configuration) {\n    debug('nylas-booking-confirmation-redirect', 'selectedConfigurationChangedHandler', newValue);\n    if (newValue?.scheduler?.confirmation_redirect_url) {\n      this.currentRedirectUrl = newValue?.scheduler?.confirmation_redirect_url;\n      this.acceptUrl = newValue?.scheduler?.confirmation_redirect_url !== '';\n    }\n  }\n\n  // Lifecycle methods\n  connectedCallback() {\n    debug('nylas-booking-confirmation-redirect', 'connectedCallback');\n  }\n\n  disconnectedCallback() {\n    debug('nylas-booking-confirmation-redirect', 'disconnectedCallback');\n  }\n\n  componentWillLoad() {\n    debug('nylas-booking-confirmation-redirect', 'componentWillLoad');\n    // See comment in the @Watch('name') decorator for more information.\n    this.host.setAttribute('name', this.name);\n  }\n\n  componentDidLoad() {\n    debug('nylas-booking-confirmation-redirect', 'componentDidLoad');\n    if (this.selectedConfiguration) {\n      this.selectedConfigurationChangedHandler(this.selectedConfiguration);\n    } else {\n      this.currentRedirectUrl = this.redirectUrl;\n      this.acceptUrl = this.redirectUrl !== '';\n    }\n    this.componentLoaded = true;\n    if (typeof this.internals.setFormValue === 'function') {\n      this.internals.setFormValue(this.currentRedirectUrl.toString(), this.name);\n    }\n  }\n\n  componentWillUpdate() {\n    debug('nylas-booking-confirmation-redirect', 'componentWillUpdate');\n  }\n\n  componentDidUpdate() {\n    debug('nylas-booking-confirmation-redirect', 'componentDidUpdate');\n  }\n\n  componentWillRender() {\n    debug('nylas-booking-confirmation-redirect', 'componentWillRender');\n  }\n\n  componentDidRender() {\n    debug('nylas-booking-confirmation-redirect', 'componentDidRender');\n  }\n\n  @Listen('nylasFormDropdownChanged')\n  nylasFormDropdownChangedHandler(event: CustomEvent<{ value: string; name: string }>) {\n    debug('nylas-booking-confirmation-redirect', 'nylasFormDropdownChangedHandler', event.detail);\n\n    const { name, value } = event.detail;\n\n    if (name === 'confirmation-redirect-dropdown') {\n      if (value === 'custom') {\n        this.acceptUrl = true;\n      } else {\n        this.acceptUrl = false;\n\n        // Submit empty string to clear redirect URL\n        this.internals.setFormValue('', this.name);\n        this.valueChanged.emit({ name: this.name, value: '' });\n      }\n    }\n  }\n\n  @Listen('nylasFormInputBlurred')\n  nylasFormInputBlurHandler(event: CustomEvent<{ value: string; name: string }>) {\n    const { name, value } = event.detail;\n    this.currentRedirectUrl = value;\n\n    if (this.acceptUrl && name === 'confirmation-redirect') {\n      this.redirectUrlErrorMessage = '';\n\n      if (!isValidUrl(this.currentRedirectUrl)) {\n        this.internals.setValidity({ customError: true }, 'Please enter a valid URL.');\n        this.redirectUrlErrorMessage = 'Please enter a valid URL.';\n        return;\n      }\n      this.internals.setValidity({});\n\n      // Pass as handler so that if event.defaultPrevented by parent app, this will be skipped.\n      const valueChanged = (event: CustomEvent<{ value: string; name: string }>) => {\n        const { value } = event.detail;\n        this.internals.setFormValue(value.toString(), this.name);\n      };\n      this.valueChanged.emit({ ...event.detail, valueChanged });\n    }\n  }\n\n  @Listen('formSubmitted', { target: 'document' })\n  formSubmittedHandler(_event: CustomEvent) {\n    if (this.acceptUrl && !isValidUrl(this.currentRedirectUrl)) {\n      this.internals.setValidity({ customError: true }, 'Please enter a valid URL.');\n      this.redirectUrlErrorMessage = 'Please enter a valid URL.';\n    } else {\n      this.internals.setValidity({});\n    }\n  }\n\n  @RegisterComponent<NylasBookingConfirmationRedirect, NylasSchedulerConfigConnector, Exclude<NylasSchedulerEditor['stores'], undefined>>({\n    name: 'nylas-booking-confirmation-redirect',\n    stateToProps: new Map([['schedulerConfig.selectedConfiguration', 'selectedConfiguration']]),\n    eventToProps: {\n      valueChanged: async (\n        event: CustomEvent<{ value: string; name: string; valueChanged?: (event: CustomEvent<{ value: string; name: string }>) => void }>,\n        _nylasSchedulerConfigConnector: NylasSchedulerConfigConnector,\n      ) => {\n        const { valueChanged } = event.detail;\n        // If a handler is passed, call it.\n        if (valueChanged) {\n          valueChanged(event);\n        }\n      },\n    },\n    fireRegisterEvent: true,\n  })\n  render() {\n    const redirectOptions = [\n      {\n        label: 'Display default confirmation page',\n        value: 'default',\n      },\n      {\n        label: 'Redirect to custom URL',\n        value: 'custom',\n      },\n    ];\n\n    return (\n      <Host>\n        <div class=\"nylas-booking-confirmation-redirect\" part=\"nbcr\">\n          {redirectOptions.length > 0 && (\n            <div class=\"nylas-booking-confirmation-redirect__dropdown\">\n              <span class=\"label\">\n                When a booking is confirmed\n                <tooltip-component>\n                  <info-icon slot=\"tooltip-icon\" />\n                  <span slot=\"tooltip-content\">You can either display the default confirmation page or redirect users to your own confirmation page.</span>\n                </tooltip-component>\n              </span>\n              {this.componentLoaded && (\n                <select-dropdown\n                  name=\"confirmation-redirect-dropdown\"\n                  options={redirectOptions}\n                  withSearch={false}\n                  defaultSelectedOption={redirectOptions.find(option => option.value === (this.acceptUrl ? 'custom' : 'default'))}\n                  exportparts=\"sd_dropdown: nbcr__dropdown, sd_dropdown-button: nbcr__dropdown-button, sd_dropdown-content: nbcr__dropdown-content\"\n                />\n              )}\n              {this.acceptUrl && (\n                <div>\n                  <input-component\n                    name=\"confirmation-redirect\"\n                    id=\"confirmation-redirect\"\n                    type=\"text\"\n                    placeholder=\"Enter custom redirect URL\"\n                    required={false}\n                    part=\"ic__input_wrapper: nbcr__input-textfield\"\n                    defaultValue={this.currentRedirectUrl}\n                  />\n                  {this.redirectUrlErrorMessage && <span class=\"error-message\">{this.redirectUrlErrorMessage}</span>}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}