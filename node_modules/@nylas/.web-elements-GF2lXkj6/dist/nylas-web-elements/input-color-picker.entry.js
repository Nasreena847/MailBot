import { r as registerInstance, a as createEvent, h, e as getElement } from './index-b5cb18eb.js';

const inputColorPickerCss = ":host{display:block;position:relative;--nylas-primary:#2563eb;--nylas-error:#cc4841;--nylas-error-pressed:#992222;--nylas-wraning:#f06c00;--nylas-success:#16a392;--nylas-info:#2b8fc2;--nylas-base-0:#ffffff;--nylas-base-25:#fcfcfd;--nylas-base-50:#f8f9fc;--nylas-base-100:#eaecf5;--nylas-base-200:#d5d9eb;--nylas-base-300:#b3b8d8;--nylas-base-400:#717bbc;--nylas-base-500:#4e5ba6;--nylas-base-600:#3e4784;--nylas-base-700:#263f72;--nylas-base-800:#293056;--nylas-base-900:#101323;--nylas-base-950:#0e101b;--nylas-border-radius:0.25rem;--nylas-border-radius-2x:0.5rem;--nylas-border-radius-3x:0.75rem;--nylas-font-family:\"Inter\", sans-serif;width:100%}@media screen and (max-width: 768px){:host{position:unset}}label{display:flex;color:var(--nylas-base-800, #293056);font-size:14px;font-style:normal;font-weight:400;line-height:150%;flex-direction:column;gap:4px;font-family:var(--nylas-font-family);font-size:16px;color:var(--nylas-base-800)}label.error{color:var(--nylas-error)}label span.required{color:var(--nylas-error);padding:0 0.25rem}label p{margin:0}label .error{color:var(--nylas-error)}.color-picker-container{display:flex;height:48px;padding-left:16px;align-items:center;gap:8px;align-self:stretch;border-radius:var(--nylas-border-radius-2x);border:1px solid var(--nylas-base-300);background:var(--nylas-base-0);width:-webkit-fill-available;color:var(--nylas-base-900);font-size:16px;font-style:normal;font-weight:400;line-height:150%;width:-moz-available;width:-webkit-fill-available;padding-left:0;gap:0;overflow:hidden}.color-picker-container:focus{outline-color:var(--nylas-primary)}.color-picker-container.error{border-radius:var(--nylas-border-radius-2x);font-weight:600;border-color:var(--nylas-error);border-width:2px}.color-picker-container.error::placeholder{font-weight:400}.color-picker-container::placeholder{color:var(--nylas-base-300)}.color-picker-container input{display:flex;align-items:center;height:100%;appearance:none;border:none;border-right:1px solid var(--nylas-base-200);background:transparent}.color-picker-container input::-webkit-color-swatch{min-width:30px;border-radius:0.25rem;border:1px solid var(--nylas-base-200);margin:0.25rem}.color-picker-container input::-moz-color-swatch{min-width:30px;border-radius:0.25rem;border:1px solid var(--nylas-base-200);margin:0.25rem}.color-picker-container.error{border:1px solid var(--nylas-error)}.color-picker-container:hover,.color-picker-container:active{outline:1px solid var(--nylas-primary)}.color-picker-container:active{outline:2px solid var(--nylas-primary)}.color-picker-container label{width:100%}.labelBtn{color:var(--nylas-base-800);padding:14px;font-size:1rem;font-family:var(--nylas-font-family);cursor:pointer;display:flex;flex-direction:row;justify-content:space-between;width:100%;gap:0.5rem;background:transparent;border:none}.labelBtn.error{border:1px solid var(--nylas-error)}.labelBtn.focus{background:transparent}.labelBtn:hover,.labelBtn:active{outline:1px solid var(--nylas-primary)}.labelBtn span.chevron{display:flex;align-self:center}.labelBtn span.open{transform:rotate(90deg)}.labelBtn span.closed{transform:rotate(270deg)}.labelBtn span.selected-option{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;max-width:144px;font-size:14px;line-height:20px}@media screen and (max-width: 768px){.labelBtn span.selected-option{max-width:124px;font-size:16px}}";

const InputColorPicker = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.nylasFormDropdownChanged = createEvent(this, "nylasFormDropdownChanged", 7);
        this.componentType = 'color-picker';
        this.name = undefined;
        this.defaultSelectedColor = undefined;
        this.selectedColor = this.defaultSelectedColor;
        this.isOpen = false;
        this.ariaActivedescendant = '';
        this.errorMessage = '';
    }
    componentWillLoad() {
        this.selectedColor = this.defaultSelectedColor;
        this.el.setAttribute('component-type', this.componentType);
    }
    handleFocus() {
        this.isOpen = true;
    }
    handleBlur() {
        this.isOpen = false;
    }
    handleInput(event) {
        this.selectedColor = event.target.value;
    }
    handleChange(event) {
        this.selectedColor = event.target.value;
        this.nylasFormDropdownChanged.emit({
            value: this.selectedColor,
            name: this.name,
            error: this.errorMessage,
        });
    }
    handleKeyDown(event) {
        if (event.code === 'Enter' || event.code === 'Space') {
            event.preventDefault();
            this.inputRef?.click();
        }
    }
    handleOutsideClick(event) {
        const path = event.composedPath();
        const isClickInside = path.includes(this.el);
        if (!isClickInside && this.isOpen) {
            this.isOpen = false;
        }
    }
    render() {
        return (h("div", { key: '145dabea01809c210829fc3cdc4882793b38a154', class: "color-picker-container", part: "icp_color-picker", tabindex: "0", onKeyDown: e => this.handleKeyDown(e) }, h("input", { key: '4ee61547ce9d051d2066fdcbcb1ebd048a8444cf', type: "color", ref: el => (this.inputRef = el), id: this.name, name: this.name, value: this.selectedColor, tabindex: "-1", onFocus: () => this.handleFocus(), onBlur: () => this.handleBlur(), onInput: e => this.handleInput(e), onChange: e => this.handleChange(e), onKeyDown: e => this.handleKeyDown(e) }), h("label", { key: '9473f60a27db4bb073c740df461ea2f276890ddb', part: "icp_color-picker-button", htmlFor: this.name, class: { labelBtn: true, open: this.isOpen, error: !!this.errorMessage }, "aria-haspopup": "listbox", "aria-expanded": this.isOpen ? 'true' : 'false', "aria-label": this.name }, h("span", { key: '3e10c11d8dae028ca965da307f06a51c6c71cf40', class: "selected-option", part: "icp_color-picker-button-selected-label" }, this.selectedColor || 'Select a color'), h("span", { key: 'bfbe7728225a7e6203189ae4da06fc4abf4f4ec4', class: {
                open: this.isOpen,
                closed: !this.isOpen,
                chevron: true,
            }, "aria-hidden": "true" }, h("chevron-icon", { key: '99d0dc5de95436ef6ca79421026debda57c32390', width: "16", height: "16" })), this.errorMessage && h("span", { class: "error help-text" }, this.errorMessage))));
    }
    get el() { return getElement(this); }
};
InputColorPicker.style = inputColorPickerCss;

export { InputColorPicker as input_color_picker };

//# sourceMappingURL=input-color-picker.entry.js.map